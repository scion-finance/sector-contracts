{
  "id": "1f6185419e910332720c134a54542f7c",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.16",
  "solcLongVersion": "0.8.16+commit.07a7930e",
  "input": {
    "language": "Solidity",
    "sources": {
      "src/strategies/perpetual/PerpStrategy.sol": {
        "content": "// // SPDX-License-Identifier: GPL-3.0-or-later\n// pragma solidity 0.8.16;\n// pragma experimental ABIEncoderV2;\n\n// import { ReentrancyGuard } from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n// import { ERC20, IERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n// import { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n// // import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\n// import { IVault } from \"@perp/curie-contract/contracts/interface/IVault.sol\";\n// import { IClearingHouse } from \"@perp/curie-contract/contracts/interface/IClearingHouse.sol\";\n// import { IMarketRegistry } from \"@perp/curie-contract/contracts/interface/IMarketRegistry.sol\";\n// import { IAccountBalance } from \"@perp/curie-contract/contracts/interface/IAccountBalance.sol\";\n// import { IBaseToken } from \"@perp/curie-contract/contracts/interface/IBaseToken.sol\";\n// import { IClearingHouseConfig } from \"@perp/curie-contract/contracts/interface/IClearingHouseConfig.sol\";\n// import { IIndexPrice } from \"@perp/curie-contract/contracts/interface/IIndexPrice.sol\";\n// import { IOrderBook } from \"@perp/curie-contract/contracts/interface/IOrderBook.sol\";\n// import { IUniswapV3Pool } from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\n// import { TickMath } from \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\n// import { FixedPointMathLib } from \"../../libraries/FixedPointMathLib.sol\";\n\n// // import { FullMath } from \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\n\n// // as a fungible vault, shares should be calculated based on the actual account value\n// // but we can't do this onchain due to the restriction of uniswap v3\n// // instead, PERP use index price based account value as reference\n// // this may makes shares not 100% accurate when index price != market price, and may have potential flaw\n// // in order to mitigate this\n// // we suggest to add more restriction to user who deposit/redeem in the same block\n// // a few potential solutions:\n// //   1. add a cool down period between deposit & withdraw\n// //   2. 2 step withdraw\n// //   3. remove liquidity and close entire position before calculating shares ( 100% accurate but cost extra fees )\n// contract FungibleVault is ReentrancyGuard, ERC20 {\n// \t// using SafeMath for uint256;\n// \tusing FixedPointMathLib for uint256;\n\n// \t// PERP\n// \taddress public vault;\n// \taddress public clearingHouse;\n// \taddress public clearingHouseConfig;\n// \taddress public marketRegistry;\n// \taddress public baseToken;\n\n// \t// Uniswap\n// \taddress public uniswapPool;\n// \tint24 internal _minTick;\n// \tint24 internal _maxTick;\n\n// \t// TODO impl EIP4626\n// \taddress public asset;\n\n// \tconstructor(\n// \t\taddress vaultArg,\n// \t\taddress marketRegistryArg,\n// \t\taddress baseTokenArg\n// \t) ERC20(\"FungibleVault\", \"VAT\") {\n// \t\trequire(IBaseToken(baseTokenArg).isOpen(), \"market is closed\");\n// \t\tclearingHouse = IVault(vaultArg).getClearingHouse();\n// \t\trequire(clearingHouse != address(0), \"ClearingHouse not found\");\n\n// \t\tvault = vaultArg;\n// \t\tbaseToken = baseTokenArg;\n// \t\tmarketRegistry = marketRegistryArg;\n// \t\tclearingHouseConfig = IClearingHouse(clearingHouse).getClearingHouseConfig();\n// \t\trequire(clearingHouseConfig != address(0), \"ClearingHouseConfig not found\");\n\n// \t\t// full range = mix tick ~ max tick\n// \t\tuniswapPool = IMarketRegistry(marketRegistryArg).getPool(baseTokenArg);\n// \t\tint24 tickSpacing = IUniswapV3Pool(uniswapPool).tickSpacing();\n// \t\t_minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\n// \t\t_maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\n\n// \t\t// overwrite decimals, make it same as asset\n// \t\tasset = IVault(vaultArg).getSettlementToken();\n// \t\trequire(asset != address(0), \"Vault's settlement token not found\");\n// \t\tuint8 assetDecimals = ERC20(asset).decimals();\n// \t\trequire(assetDecimals > 0, \"asset decimals is 0\");\n// \t\t_setupDecimals(assetDecimals);\n// \t}\n\n// \tfunction deposit(uint256 amount, address receiver) external nonReentrant returns (uint256) {\n// \t\trequire(amount > 0, \"deposit 0\");\n// \t\trequire(receiver != address(0), \"receiver is 0\");\n\n// \t\t// TODO rebalance to ?x leverage\n\n// \t\t// deposit to perp\n// \t\tSafeERC20.safeTransferFrom(IERC20(asset), msg.sender, address(this), amount);\n// \t\tIVault(vault).deposit(address(asset), amount);\n\n// \t\t// opens a full range order\n// \t\t// convert amount to 18 decimals\n// \t\tuint256 amount_18 = _convertTokenDecimals(amount, decimals(), 18);\n// \t\t// quote (usd) = amount / 2\n// \t\tuint256 quote = amount_18 / 2;\n// \t\t// base (position) = (amount - quote) / base TWAP\n// \t\tuint32 twapInterval = IClearingHouseConfig(clearingHouseConfig).getTwapInterval();\n// \t\tuint256 baseTwap = IIndexPrice(baseToken).getIndexPrice(twapInterval);\n// \t\tuint256 base = (amount_18 - quote).mulDivDown(1e18, baseTwap);\n\n// \t\tIClearingHouse.AddLiquidityResponse memory response = IClearingHouse(clearingHouse)\n// \t\t\t.addLiquidity(\n// \t\t\t\tIClearingHouse.AddLiquidityParams({\n// \t\t\t\t\tbaseToken: baseToken,\n// \t\t\t\t\tbase: base,\n// \t\t\t\t\tquote: quote,\n// \t\t\t\t\tlowerTick: _minTick,\n// \t\t\t\t\tupperTick: _maxTick,\n// \t\t\t\t\tminBase: 0, // TODO add min for slippage\n// \t\t\t\t\tminQuote: 0,\n// \t\t\t\t\tuseTakerBalance: false, // this is not activated yet\n// \t\t\t\t\tdeadline: block.timestamp\n// \t\t\t\t})\n// \t\t\t);\n// \t\trequire(response.liquidity > 0, \"0 liquidity added\");\n\n// \t\t// calculate shares and mint it\n// \t\tuint256 shares;\n// \t\tif (totalSupply() == 0) {\n// \t\t\tshares = amount;\n// \t\t} else {\n// \t\t\t// share = amount / account value after liquidity is added\n// \t\t\tshares = amount.mulDivDown(10**decimals(), _safeGetAccountValue());\n// \t\t}\n// \t\t_mint(receiver, shares);\n\n// \t\treturn shares;\n// \t}\n\n// \tfunction redeem(\n// \t\tuint256 shares,\n// \t\taddress receiver,\n// \t\taddress owner\n// \t) external nonReentrant returns (uint256) {\n// \t\t// ratio = shares / totalSupply\n// \t\tuint256 digits = 10**decimals();\n// \t\tuint256 ratio = shares.mulDivDown(digits, totalSupply());\n// \t\trequire(allowance(owner, msg.sender) >= shares, \"redeem amount exceeds allowance\");\n// \t\t_burn(owner, shares);\n\n// \t\t// remove range order based on the ratio\n// \t\t// (should always has 1 order and 0 taker position)\n// \t\tIOrderBook orderBook = IOrderBook(IClearingHouse(clearingHouse).getOrderBook());\n// \t\tuint128 liquidity = orderBook\n// \t\t\t.getOpenOrder(address(this), baseToken, _minTick, _maxTick)\n// \t\t\t.liquidity;\n// \t\tuint256 liquidityOwnedByUser_256 = uint256(liquidity).mulDivDown(ratio, digits);\n// \t\tuint128 liquidityOwnedByUser_128 = uint128(liquidityOwnedByUser_256);\n// \t\trequire(\n// \t\t\tliquidityOwnedByUser_128 == liquidityOwnedByUser_256,\n// \t\t\t\"value doesn't fit in 128 bits\"\n// \t\t);\n// \t\tIClearingHouse(clearingHouse).removeLiquidity(\n// \t\t\tIClearingHouse.RemoveLiquidityParams({\n// \t\t\t\tbaseToken: baseToken,\n// \t\t\t\tlowerTick: _minTick,\n// \t\t\t\tupperTick: _maxTick,\n// \t\t\t\tliquidity: liquidityOwnedByUser_128,\n// \t\t\t\tminBase: 0,\n// \t\t\t\tminQuote: 0,\n// \t\t\t\tdeadline: block.timestamp\n// \t\t\t})\n// \t\t);\n\n// \t\t// close position\n// \t\tIClearingHouse(clearingHouse).closePosition(\n// \t\t\tIClearingHouse.ClosePositionParams({\n// \t\t\t\tbaseToken: baseToken,\n// \t\t\t\tsqrtPriceLimitX96: 0, // no partial close\n// \t\t\t\toppositeAmountBound: 0, // TODO add min for slippage\n// \t\t\t\tdeadline: block.timestamp,\n// \t\t\t\treferralCode: 0\n// \t\t\t})\n// \t\t);\n// \t\t// if the position size is too large, taker position will be closed partially\n// \t\t// TODO make withdraw 2 steps, auction or let keeper close it several times\n// \t\taddress accountBalance = IClearingHouse(clearingHouse).getAccountBalance();\n// \t\trequire(\n// \t\t\tIAccountBalance(accountBalance).getTakerPositionSize(address(this), baseToken) == 0,\n// \t\t\t\"position size is too large\"\n// \t\t);\n\n// \t\t// return asset\n// \t\tuint256 accountValueOwnedByUser = _safeGetAccountValue().mulDivDown(ratio, digits);\n// \t\tIVault(vault).withdraw(asset, accountValueOwnedByUser);\n// \t\tSafeERC20.safeTransfer(IERC20(asset), receiver, accountValueOwnedByUser);\n// \t\treturn accountValueOwnedByUser;\n// \t}\n\n// \tfunction _safeGetAccountValue() internal view returns (uint256) {\n// \t\t// account value is based on index price\n// \t\tint256 accountValue = IVault(vault).getAccountValue(address(this));\n// \t\trequire(accountValue > 0, \"bankrupt\");\n// \t\treturn uint256(accountValue);\n// \t}\n\n// \tfunction _convertTokenDecimals(\n// \t\tuint256 amount,\n// \t\tuint8 fromDecimals,\n// \t\tuint8 toDecimals\n// \t) internal pure returns (uint256) {\n// \t\tif (fromDecimals == toDecimals) {\n// \t\t\treturn amount;\n// \t\t}\n// \t\treturn\n// \t\t\tfromDecimals > toDecimals\n// \t\t\t\t? amount / (10**(fromDecimals - toDecimals))\n// \t\t\t\t: amount * (10**(toDecimals - fromDecimals));\n// \t}\n// }\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 1
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "errors": [
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "src/strategies/perpetual/PerpStrategy.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.6;\"\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.6;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "src/strategies/perpetual/PerpStrategy.sol",
          "start": -1
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "src/strategies/perpetual/PerpStrategy.sol": {
        "ast": {
          "absolutePath": "src/strategies/perpetual/PerpStrategy.sol",
          "exportedSymbols": {},
          "id": 1,
          "license": "GPL-3.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "8646:0:0"
        },
        "id": 0
      }
    }
  }
}
