{
  "address": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "guardian",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            }
          ],
          "internalType": "struct AuthConfig",
          "name": "authConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managementFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct FeeConfig",
          "name": "feeConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BridgeError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HarvestNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxRedeemNotZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingDepositValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingIncomingXFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingMessages",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "postmanId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "MissingPostman",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughtFloat",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotReady",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnGoingHarvest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OverMaxFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameChainOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultMissing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "postman",
          "type": "address"
        }
      ],
      "name": "WrongPostman",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongUnderlying",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "AddedVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_fromChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_toChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "ChangedVaultStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "EmergencyAction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingProfit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "enum MessageType",
          "name": "mType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "postman",
          "type": "address"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "enum MessageType",
          "name": "mtype",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "postman",
          "type": "address"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "postmanId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chanId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "postman",
          "type": "address"
        }
      ],
      "name": "PostmanUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "RegisterDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "RegisterIncomingFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "RequestWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        }
      ],
      "name": "SetManagementFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        }
      ],
      "name": "SetPerformanceFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "SetTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "postmanId",
          "type": "uint16"
        }
      ],
      "name": "UpdatedVaultPostman",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MANAGEMENT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PERFORMANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LIQUIDITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_postmanId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addrBook",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "postmanId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "changeVaultStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vaultAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "allowanceTarget",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "txData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Request[]",
          "name": "vaults",
          "type": "tuple[]"
        }
      ],
      "name": "depositIntoXVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "emergencyAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDelta",
          "type": "uint256"
        }
      ],
      "name": "finalizeHarvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "floatAmnt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getWithdrawStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct WithdrawRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestLedger",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "localDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "crossDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingAnswers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receivedAnswers",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_postmanId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_postman",
          "type": "address"
        }
      ],
      "name": "managePostman",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "postmanAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "processIncomingXFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            }
          ],
          "internalType": "struct Message",
          "name": "_msg",
          "type": "tuple"
        },
        {
          "internalType": "enum MessageType",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "redeemIsReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "removeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "requestRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "requestRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_managementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "toSharesAfterDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalChildHoldings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "underlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_postmanId",
          "type": "uint16"
        }
      ],
      "name": "updateVaultPostman",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vaultAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "allowanceTarget",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "txData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Request[]",
          "name": "vaults",
          "type": "tuple[]"
        }
      ],
      "name": "withdrawFromXVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawLedger",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
  "receipt": {
    "to": null,
    "from": "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
    "contractAddress": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
    "transactionIndex": 1,
    "gasUsed": "49433858",
    "logsBloom": "0x
    "blockHash": "0x00522eb1d1e35a6d9bc1d89138d6ad192428fe94216b16fe8018f3460aac7bab",
    "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32238716,
        "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
        "address": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f",
        "logIndex": 0,
        "blockHash": "0x00522eb1d1e35a6d9bc1d89138d6ad192428fe94216b16fe8018f3460aac7bab"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32238716,
        "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
        "address": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x00522eb1d1e35a6d9bc1d89138d6ad192428fe94216b16fe8018f3460aac7bab"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32238716,
        "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
        "address": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x00522eb1d1e35a6d9bc1d89138d6ad192428fe94216b16fe8018f3460aac7bab"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32238716,
        "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
        "address": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8",
          "0x0000000000000000000000006ddf9da4c37df97cb2458f85050e09994cbb9c2a",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x00522eb1d1e35a6d9bc1d89138d6ad192428fe94216b16fe8018f3460aac7bab"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32238716,
        "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
        "address": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x00522eb1d1e35a6d9bc1d89138d6ad192428fe94216b16fe8018f3460aac7bab"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32238716,
        "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
        "address": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x0000000000000000000000006ddf9da4c37df97cb2458f85050e09994cbb9c2a",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x00522eb1d1e35a6d9bc1d89138d6ad192428fe94216b16fe8018f3460aac7bab"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32238716,
        "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
        "address": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x00522eb1d1e35a6d9bc1d89138d6ad192428fe94216b16fe8018f3460aac7bab"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32238716,
        "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
        "address": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
        "topics": [
          "0xcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef3",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x00522eb1d1e35a6d9bc1d89138d6ad192428fe94216b16fe8018f3460aac7bab"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32238716,
        "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
        "address": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
        "topics": [
          "0x8b940a95968ad5b511f89b01075446a4fe9f614f2dc5fbb9e9a6b227d6d4fd70"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0x00522eb1d1e35a6d9bc1d89138d6ad192428fe94216b16fe8018f3460aac7bab"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32238716,
        "transactionHash": "0x574c960474ab5bb97ef09ad65a89d67d20030035914b6048310dbf7460a17d07",
        "address": "0x3504f8DEE29D20EDf763Ac573A092b986D88F807",
        "topics": [
          "0xd87632b1c6ebfa21acbca0e3279b3cf6385a377cb8fda51e5b866baa6e6012ab"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 9,
        "blockHash": "0x00522eb1d1e35a6d9bc1d89138d6ad192428fe94216b16fe8018f3460aac7bab"
      }
    ],
    "blockNumber": 32238716,
    "cumulativeGasUsed": "49433858",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
    "XVault",
    "XVLT",
    [
      "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
      "0x6DdF9DA4C37DF97CB2458F85050E09994Cbb9C2A",
      "0x6DdF9DA4C37DF97CB2458F85050E09994Cbb9C2A"
    ],
    [
      "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
      0,
      0
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "a84ac658bf96a2081aa45f4ba4df3f0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"internalType\":\"struct AuthConfig\",\"name\":\"authConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BridgeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HarvestNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxRedeemNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingDepositValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingIncomingXFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingMessages\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"postmanId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"MissingPostman\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughtFloat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotReady\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnGoingHarvest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverMaxFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameChainOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultMissing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"postman\",\"type\":\"address\"}],\"name\":\"WrongPostman\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongUnderlying\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"AddedVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_fromChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_toChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ChangedVaultStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"EmergencyAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enum MessageType\",\"name\":\"mType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"postman\",\"type\":\"address\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enum MessageType\",\"name\":\"mtype\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"postman\",\"type\":\"address\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"postmanId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chanId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"postman\",\"type\":\"address\"}],\"name\":\"PostmanUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"RegisterDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"RegisterIncomingFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"RequestWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"}],\"name\":\"SetManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"postmanId\",\"type\":\"uint16\"}],\"name\":\"UpdatedVaultPostman\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MANAGEMENT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_postmanId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrBook\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"postmanId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"changeVaultStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"}],\"internalType\":\"struct Request[]\",\"name\":\"vaults\",\"type\":\"tuple[]\"}],\"name\":\"depositIntoXVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"emergencyAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"}],\"name\":\"finalizeHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floatAmnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct WithdrawRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"localDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crossDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAnswers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedAnswers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_postmanId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_postman\",\"type\":\"address\"}],\"name\":\"managePostman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"postmanAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processIncomingXFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"internalType\":\"struct Message\",\"name\":\"_msg\",\"type\":\"tuple\"},{\"internalType\":\"enum MessageType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"redeemIsReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"removeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"requestRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"requestRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"toSharesAfterDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChildHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"underlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_postmanId\",\"type\":\"uint16\"}],\"name\":\"updateVaultPostman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"}],\"internalType\":\"struct Request[]\",\"name\":\"vaults\",\"type\":\"tuple[]\"}],\"name\":\"withdrawFromXVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Accept transfer of ownership of the contract. Can only be called by the pendingOwner.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"redeem()\":{\"details\":\"safest UI method\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setManagementFee(uint256)\":{\"params\":{\"_managementFee\":\"The new performance fee.\"}},\"setPerformanceFee(uint256)\":{\"params\":{\"_performanceFee\":\"The new performance fee.\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"New treasury address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Init transfer of ownership of the contract to a new account (`_pendingOwner`).\",\"params\":{\"_pendingOwner\":\"pending owner of contract Can only be called by the current owner.\"}},\"underlyingBalance(address)\":{\"details\":\"returns a cached value used for withdrawals\"}},\"version\":1},\"userdoc\":{\"events\":{\"SetManagementFee(uint256)\":{\"notice\":\"Emitted when management fee is updated.\"},\"SetPerformanceFee(uint256)\":{\"notice\":\"Emitted when performance fee is updated.\"}},\"kind\":\"user\",\"methods\":{\"GUARDIAN()\":{\"notice\":\"Update vault params, perform time-sensitive operations, set manager\"},\"MANAGER()\":{\"notice\":\"Hot-wallet bots that route funds between vaults, rebalance and harvest strategies\"},\"emergencyAction(address,bytes)\":{\"notice\":\"this method allows an arbitrary method to be called by the owner in case of emergency owner must be a timelock contract in order to allow users to redeem funds in case they suspect this action to be malicious\"},\"getPenalty()\":{\"notice\":\"UI method to view cancellation penalty\"},\"managementFee()\":{\"notice\":\"Annual management fee.\"},\"owner()\":{\"notice\":\"Add and remove vaults and strategies and other critical operations behind timelock Default admin role There should only be one owner, so it is not a role\"},\"performanceFee()\":{\"notice\":\"The percentage of profit recognized each harvest to reserve as fees.\"},\"redeemIsReady(address)\":{\"notice\":\"UTILS\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets a new performanceFee.\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets a new performanceFee.\"},\"setTreasury(address)\":{\"notice\":\"Updates treasury.\"},\"treasury()\":{\"notice\":\"address where all fees are sent to\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/vaults/SectorCrossVault.sol\":\"SectorCrossVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/common/Accounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { FixedPointMathLib } from \\\"../libraries/FixedPointMathLib.sol\\\";\\nimport { IERC4626Accounting } from \\\"../interfaces/ERC4626/IERC4626Accounting.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract Accounting is IERC4626Accounting {\\n\\tusing FixedPointMathLib for uint256;\\n\\n\\tfunction totalAssets() public view virtual returns (uint256);\\n\\n\\tfunction totalSupply() public view virtual returns (uint256);\\n\\n\\tfunction toSharesAfterDeposit(uint256 assets) public view virtual returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\t\\tuint256 _totalAssets = totalAssets() - assets;\\n\\t\\tif (_totalAssets == 0) return assets;\\n\\t\\treturn supply == 0 ? assets : assets.mulDivDown(supply, _totalAssets);\\n\\t}\\n\\n\\tfunction convertToShares(uint256 assets) public view virtual returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n\\t\\treturn supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n\\t}\\n\\n\\tfunction convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n\\t\\treturn supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n\\t}\\n\\n\\tfunction previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n\\t\\treturn convertToShares(assets);\\n\\t}\\n\\n\\tfunction previewMint(uint256 shares) public view virtual returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n\\t\\treturn supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n\\t}\\n\\n\\tfunction previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n\\t\\treturn supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n\\t}\\n\\n\\tfunction previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n\\t\\treturn convertToAssets(shares);\\n\\t}\\n}\\n\",\"keccak256\":\"0x232ecac90b911bd659137d4c9fa347e447273440ad29cca89840bb913a78c464\",\"license\":\"MIT\"},\"src/common/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nstruct AuthConfig {\\n\\taddress owner;\\n\\taddress guardian;\\n\\taddress manager;\\n}\\n\\ncontract Auth is AccessControl {\\n\\tevent OwnershipTransferInitiated(address owner, address pendingOwner);\\n\\tevent OwnershipTransferred(address oldOwner, address newOwner);\\n\\n\\t////////// CONSTANTS //////////\\n\\n\\t/// Update vault params, perform time-sensitive operations, set manager\\n\\tbytes32 public constant GUARDIAN = keccak256(\\\"GUARDIAN\\\");\\n\\n\\t/// Hot-wallet bots that route funds between vaults, rebalance and harvest strategies\\n\\tbytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\n\\n\\t/// Add and remove vaults and strategies and other critical operations behind timelock\\n\\t/// Default admin role\\n\\t/// There should only be one owner, so it is not a role\\n\\taddress public owner;\\n\\taddress public pendingOwner;\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == owner, \\\"ONLY_OWNER\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(AuthConfig memory authConfig) {\\n\\t\\t/// Set up the roles\\n\\t\\t// owner can manage all roles\\n\\t\\towner = authConfig.owner;\\n\\t\\temit OwnershipTransferred(address(0), authConfig.owner);\\n\\n\\t\\t// TODO do we want cascading roles like this?\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, authConfig.owner);\\n\\t\\t_grantRole(GUARDIAN, owner);\\n\\t\\t_grantRole(GUARDIAN, authConfig.guardian);\\n\\t\\t_grantRole(MANAGER, authConfig.owner);\\n\\t\\t_grantRole(MANAGER, authConfig.guardian);\\n\\t\\t_grantRole(MANAGER, authConfig.manager);\\n\\n\\t\\t/// Allow the guardian role to manage manager\\n\\t\\t_setRoleAdmin(MANAGER, GUARDIAN);\\n\\t}\\n\\n\\t// ----------- Ownership -----------\\n\\n\\t/// @dev Init transfer of ownership of the contract to a new account (`_pendingOwner`).\\n\\t/// @param _pendingOwner pending owner of contract\\n\\t/// Can only be called by the current owner.\\n\\tfunction transferOwnership(address _pendingOwner) external onlyOwner {\\n\\t\\tpendingOwner = _pendingOwner;\\n\\t\\temit OwnershipTransferInitiated(owner, pendingOwner);\\n\\t}\\n\\n\\t/// @dev Accept transfer of ownership of the contract.\\n\\t/// Can only be called by the pendingOwner.\\n\\tfunction acceptOwnership() external {\\n\\t\\trequire(msg.sender == pendingOwner, \\\"ONLY_PENDING_OWNER\\\");\\n\\t\\taddress oldOwner = owner;\\n\\t\\towner = pendingOwner;\\n\\n\\t\\t// revoke the DEFAULT ADMIN ROLE from prev owner\\n\\t\\t_revokeRole(DEFAULT_ADMIN_ROLE, oldOwner);\\n\\t\\t_revokeRole(GUARDIAN, oldOwner);\\n\\t\\t_revokeRole(MANAGER, oldOwner);\\n\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, owner);\\n\\t\\t_grantRole(GUARDIAN, owner);\\n\\t\\t_grantRole(MANAGER, owner);\\n\\n\\t\\temit OwnershipTransferred(oldOwner, owner);\\n\\t}\\n}\\n\",\"keccak256\":\"0x87a62554290d84b1df8d0330328685e798893b0df1b6c3b73d39afae89945980\",\"license\":\"MIT\"},\"src/common/Fees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { Auth } from \\\"./Auth.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nstruct FeeConfig {\\n\\taddress treasury;\\n\\tuint256 performanceFee;\\n\\tuint256 managementFee;\\n}\\n\\nabstract contract Fees is Auth {\\n\\tuint256 public constant MAX_MANAGEMENT_FEE = .05e18; // 5%\\n\\tuint256 public constant MAX_PERFORMANCE_FEE = .25e18; // 25%\\n\\n\\t/// @notice The percentage of profit recognized each harvest to reserve as fees.\\n\\t/// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\\n\\tuint256 public performanceFee;\\n\\n\\t/// @notice Annual management fee.\\n\\t/// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\\n\\tuint256 public managementFee;\\n\\n\\t/// @notice address where all fees are sent to\\n\\taddress public treasury;\\n\\n\\tconstructor(FeeConfig memory feeConfig) {\\n\\t\\ttreasury = feeConfig.treasury;\\n\\t\\tperformanceFee = feeConfig.performanceFee;\\n\\t\\tmanagementFee = feeConfig.managementFee;\\n\\t\\temit SetTreasury(feeConfig.treasury);\\n\\t\\temit SetPerformanceFee(feeConfig.performanceFee);\\n\\t\\temit SetManagementFee(feeConfig.managementFee);\\n\\t}\\n\\n\\t/// @notice Sets a new performanceFee.\\n\\t/// @param _performanceFee The new performance fee.\\n\\tfunction setPerformanceFee(uint256 _performanceFee) public onlyOwner {\\n\\t\\tif (_performanceFee > MAX_PERFORMANCE_FEE) revert OverMaxFee();\\n\\n\\t\\tperformanceFee = _performanceFee;\\n\\t\\temit SetPerformanceFee(performanceFee);\\n\\t}\\n\\n\\t/// @notice Sets a new performanceFee.\\n\\t/// @param _managementFee The new performance fee.\\n\\tfunction setManagementFee(uint256 _managementFee) public onlyOwner {\\n\\t\\tif (_managementFee > MAX_MANAGEMENT_FEE) revert OverMaxFee();\\n\\n\\t\\tmanagementFee = _managementFee;\\n\\t\\temit SetManagementFee(_managementFee);\\n\\t}\\n\\n\\t/// @notice Updates treasury.\\n\\t/// @param _treasury New treasury address.\\n\\tfunction setTreasury(address _treasury) public onlyOwner {\\n\\t\\ttreasury = _treasury;\\n\\t\\temit SetTreasury(_treasury);\\n\\t}\\n\\n\\t/// @notice Emitted when performance fee is updated.\\n\\t/// @param performanceFee The new perforamance fee.\\n\\tevent SetPerformanceFee(uint256 performanceFee);\\n\\n\\t/// @notice Emitted when management fee is updated.\\n\\t/// @param managementFee The new management fee.\\n\\tevent SetManagementFee(uint256 managementFee);\\n\\n\\tevent SetTreasury(address indexed treasury);\\n\\n\\terror OverMaxFee();\\n}\\n\",\"keccak256\":\"0xa739a1ab14c23cfc52d38b6cb1793561fae9b7ada90b19a425cc1567408ca9ea\",\"license\":\"MIT\"},\"src/common/XChainIntegrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Auth } from \\\"./Auth.sol\\\";\\nimport \\\"../interfaces/MsgStructs.sol\\\";\\nimport \\\"../interfaces/postOffice/IPostman.sol\\\";\\n\\n/// @notice Struct encoded in Bungee calldata\\n/// @dev Derived from socket registry contract\\nstruct MiddlewareRequest {\\n\\tuint256 id;\\n\\tuint256 optionalNativeAmount;\\n\\taddress inputToken;\\n\\tbytes data;\\n}\\n\\n/// @notice Struct encoded in Bungee calldata\\n/// @dev Derived from socket registry contract\\nstruct BridgeRequest {\\n\\tuint256 id;\\n\\tuint256 optionalNativeAmount;\\n\\taddress inputToken;\\n\\tbytes data;\\n}\\n\\n/// @notice Struct encoded in Bungee calldata\\n/// @dev Derived from socket registry contract\\nstruct UserRequest {\\n\\taddress receiverAddress;\\n\\tuint256 toChainId;\\n\\tuint256 amount;\\n\\tMiddlewareRequest middlewareRequest;\\n\\tBridgeRequest bridgeRequest;\\n}\\n\\nabstract contract XChainIntegrator is Auth {\\n\\tmapping(address => Vault) public addrBook;\\n\\tmapping(uint16 => mapping(uint16 => address)) public postmanAddr;\\n\\t// mapping(messageType => function(Message calldata)) internal messageAction;\\n\\n\\tuint16 immutable chainId = uint16(block.chainid);\\n\\n\\tconstructor() {}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\t\\tBridge utilities\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Decode the socket request calldata\\n\\t/// @dev Currently not in use due to undertainity in bungee api response\\n\\t/// @param _data Bungee txn calldata\\n\\t/// @return userRequest parsed calldata\\n\\tfunction decodeSocketRegistryCalldata(bytes memory _data)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (UserRequest memory userRequest)\\n\\t{\\n\\t\\tbytes memory callDataWithoutSelector = slice(_data, 4, _data.length - 4);\\n\\t\\t(userRequest) = abi.decode(callDataWithoutSelector, (UserRequest));\\n\\t}\\n\\n\\t/// @notice Decodes and verifies socket calldata\\n\\t/// @param _data Bungee txn calldata\\n\\t/// @param _chainId chainId to check in bungee calldata\\n\\t/// @param _inputToken inputWantToken to check in bungee calldata\\n\\t/// @param _receiverAddress receiving address to check in bungee calldata\\n\\tfunction verifySocketCalldata(\\n\\t\\tbytes memory _data,\\n\\t\\tuint256 _chainId,\\n\\t\\taddress _inputToken,\\n\\t\\taddress _receiverAddress\\n\\t) internal pure {\\n\\t\\tUserRequest memory userRequest;\\n\\t\\t(userRequest) = decodeSocketRegistryCalldata(_data);\\n\\n\\t\\tif (userRequest.toChainId != _chainId) {\\n\\t\\t\\trevert(\\\"Invalid chainId\\\");\\n\\t\\t}\\n\\t\\tif (userRequest.receiverAddress != _receiverAddress) {\\n\\t\\t\\trevert(\\\"Invalid receiver address\\\");\\n\\t\\t}\\n\\t\\tif (userRequest.bridgeRequest.inputToken != _inputToken) {\\n\\t\\t\\trevert(\\\"Invalid input token\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Sends tokens using Bungee middleware. Assumes tokens already present in contract. Manages allowance and transfer.\\n\\t/// @dev Currently not verifying the middleware request calldata. Use very carefully\\n\\t/// @param allowanceTarget address to allow tokens to swipe\\n\\t/// @param socketRegistry address to send bridge txn to\\n\\t/// @param destinationAddress address of receiver\\n\\t/// @param amount amount of tokens to bridge\\n\\t/// @param destinationChainId chain Id of receiving chain\\n\\t/// @param data calldata of txn to be sent\\n\\tfunction _sendTokens(\\n\\t\\taddress asset,\\n\\t\\taddress allowanceTarget,\\n\\t\\taddress socketRegistry,\\n\\t\\taddress destinationAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 destinationChainId,\\n\\t\\tbytes calldata data\\n\\t) internal onlyRole(MANAGER) {\\n\\t\\tverifySocketCalldata(data, destinationChainId, asset, destinationAddress);\\n\\n\\t\\tERC20(asset).approve(allowanceTarget, amount);\\n\\t\\t(bool success, ) = socketRegistry.call(data);\\n\\n\\t\\tif (!success) revert BridgeError();\\n\\t}\\n\\n\\t/*\\n\\t * @notice Helper to slice memory bytes\\n\\t * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n\\t *\\n\\t * @dev refer https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n\\t */\\n\\tfunction slice(\\n\\t\\tbytes memory _bytes,\\n\\t\\tuint256 _start,\\n\\t\\tuint256 _length\\n\\t) internal pure returns (bytes memory) {\\n\\t\\trequire(_length + 31 >= _length, \\\"slice_overflow\\\");\\n\\t\\trequire(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n\\t\\tbytes memory tempBytes;\\n\\n\\t\\tassembly {\\n\\t\\t\\tswitch iszero(_length)\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t// Get a location of some free memory and store it in tempBytes as\\n\\t\\t\\t\\t// Solidity does for memory variables.\\n\\t\\t\\t\\ttempBytes := mload(0x40)\\n\\n\\t\\t\\t\\t// The first word of the slice result is potentially a partial\\n\\t\\t\\t\\t// word read from the original array. To read it, we calculate\\n\\t\\t\\t\\t// the length of that partial word and start copying that many\\n\\t\\t\\t\\t// bytes into the array. The first word we copy will start with\\n\\t\\t\\t\\t// data we don't care about, but the last `lengthmod` bytes will\\n\\t\\t\\t\\t// land at the beginning of the contents of the new array. When\\n\\t\\t\\t\\t// we're done copying, we overwrite the full first word with\\n\\t\\t\\t\\t// the actual length of the slice.\\n\\t\\t\\t\\tlet lengthmod := and(_length, 31)\\n\\n\\t\\t\\t\\t// The multiplication in the next line is necessary\\n\\t\\t\\t\\t// because when slicing multiples of 32 bytes (lengthmod == 0)\\n\\t\\t\\t\\t// the following copy loop was copying the origin's length\\n\\t\\t\\t\\t// and then ending prematurely not copying everything it should.\\n\\t\\t\\t\\tlet mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n\\t\\t\\t\\tlet end := add(mc, _length)\\n\\n\\t\\t\\t\\tfor {\\n\\t\\t\\t\\t\\t// The multiplication in the next line has the same exact purpose\\n\\t\\t\\t\\t\\t// as the one above.\\n\\t\\t\\t\\t\\tlet cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n\\t\\t\\t\\t} lt(mc, end) {\\n\\t\\t\\t\\t\\tmc := add(mc, 0x20)\\n\\t\\t\\t\\t\\tcc := add(cc, 0x20)\\n\\t\\t\\t\\t} {\\n\\t\\t\\t\\t\\tmstore(mc, mload(cc))\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tmstore(tempBytes, _length)\\n\\n\\t\\t\\t\\t//update free-memory pointer\\n\\t\\t\\t\\t//allocating the array padded to 32 bytes like the compiler does now\\n\\t\\t\\t\\tmstore(0x40, and(add(mc, 31), not(31)))\\n\\t\\t\\t}\\n\\t\\t\\t//if we want a zero-length slice let's just return a zero-length array\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\ttempBytes := mload(0x40)\\n\\t\\t\\t\\t//zero out the 32 bytes slice we are about to return\\n\\t\\t\\t\\t//we need to do it because Solidity does not garbage collect\\n\\t\\t\\t\\tmstore(tempBytes, 0)\\n\\n\\t\\t\\t\\tmstore(0x40, add(tempBytes, 0x20))\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn tempBytes;\\n\\t}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\tAddress book management\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\tfunction addVault(\\n\\t\\taddress _vault,\\n\\t\\tuint16 _chainId,\\n\\t\\tuint16 _postmanId,\\n\\t\\tbool _allowed\\n\\t) external virtual onlyOwner {\\n\\t\\t_addVault(_vault, _chainId, _postmanId, _allowed);\\n\\t}\\n\\n\\tfunction _addVault(\\n\\t\\taddress _vault,\\n\\t\\tuint16 _chainId,\\n\\t\\tuint16 _postmanId,\\n\\t\\tbool _allowed\\n\\t) internal onlyOwner {\\n\\t\\tVault memory vault = addrBook[_vault];\\n\\n\\t\\tif (vault.allowed) revert VaultAlreadyAdded();\\n\\n\\t\\taddrBook[_vault] = Vault(_chainId, _postmanId, _allowed);\\n\\t\\temit AddedVault(_vault, _chainId);\\n\\t}\\n\\n\\tfunction changeVaultStatus(address _vault, bool _allowed) external onlyOwner {\\n\\t\\taddrBook[_vault].allowed = _allowed;\\n\\n\\t\\temit ChangedVaultStatus(_vault, _allowed);\\n\\t}\\n\\n\\tfunction updateVaultPostman(address _vault, uint16 _postmanId) external onlyOwner {\\n\\t\\tVault memory vault = addrBook[_vault];\\n\\n\\t\\tif (vault.chainId == 0) revert VaultMissing(_vault);\\n\\n\\t\\taddrBook[_vault].postmanId = _postmanId;\\n\\n\\t\\temit UpdatedVaultPostman(_vault, _postmanId);\\n\\t}\\n\\n\\tfunction managePostman(\\n\\t\\tuint16 _postmanId,\\n\\t\\tuint16 _chainId,\\n\\t\\taddress _postman\\n\\t) external onlyOwner {\\n\\t\\tpostmanAddr[_postmanId][_chainId] = _postman;\\n\\n\\t\\temit PostmanUpdated(_postmanId, _chainId, _postman);\\n\\t}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\tCross-chain logic\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\tfunction _sendMessage(\\n\\t\\taddress receiverAddr,\\n\\t\\tVault memory vault,\\n\\t\\tMessage memory message,\\n\\t\\tMessageType msgType\\n\\t) internal {\\n\\t\\taddress srcPostman = postmanAddr[vault.postmanId][chainId];\\n\\t\\taddress dstPostman = postmanAddr[vault.postmanId][vault.chainId];\\n\\t\\tif (srcPostman == address(0)) revert MissingPostman(vault.postmanId, chainId);\\n\\t\\tif (dstPostman == address(0)) revert MissingPostman(vault.postmanId, vault.chainId);\\n\\n\\t\\tIPostman(srcPostman).deliverMessage(\\n\\t\\t\\tmessage,\\n\\t\\t\\treceiverAddr,\\n\\t\\t\\tdstPostman,\\n\\t\\t\\tmsgType,\\n\\t\\t\\tvault.chainId,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\n\\t\\temit MessageSent(message.value, receiverAddr, vault.chainId, msgType, srcPostman);\\n\\t}\\n\\n\\tfunction receiveMessage(Message calldata _msg, MessageType _type) external {\\n\\t\\t// First check if postman is allowed\\n\\t\\tVault memory vault = addrBook[_msg.sender];\\n\\t\\tif (!vault.allowed || _msg.chainId != vault.chainId) revert SenderNotAllowed(_msg.sender);\\n\\t\\tif (msg.sender != postmanAddr[vault.postmanId][chainId]) revert WrongPostman(msg.sender);\\n\\n\\t\\t// messageAction[_type](_msg);\\n\\t\\t_handleMessage(_type, _msg);\\n\\t\\temit MessageReceived(_msg.value, _msg.sender, _msg.chainId, _type, msg.sender);\\n\\t}\\n\\n\\tfunction _handleMessage(MessageType _type, Message calldata _msg) internal virtual {}\\n\\n\\tfunction processIncomingXFunds() external virtual {}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\t\\t\\tEvents\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\tevent MessageReceived(\\n\\t\\tuint256 value,\\n\\t\\taddress indexed sender,\\n\\t\\tuint16 indexed srcChainId,\\n\\t\\tMessageType mType,\\n\\t\\taddress postman\\n\\t);\\n\\tevent MessageSent(\\n\\t\\tuint256 value,\\n\\t\\taddress indexed receiver,\\n\\t\\tuint16 indexed dstChainId,\\n\\t\\tMessageType mtype,\\n\\t\\taddress postman\\n\\t);\\n\\tevent AddedVault(address indexed vault, uint16 chainId);\\n\\tevent ChangedVaultStatus(address indexed vault, bool status);\\n\\tevent UpdatedVaultPostman(address indexed vault, uint16 postmanId);\\n\\tevent PostmanUpdated(uint16 indexed postmanId, uint16 chanId, address postman);\\n\\tevent BridgeAsset(uint16 _fromChainId, uint16 _toChainId, uint256 amount);\\n\\tevent RegisterIncomingFunds(uint256 total);\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\t\\t\\tErrors\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\terror MissingPostman(uint16 postmanId, uint256 chainId);\\n\\terror SenderNotAllowed(address sender);\\n\\terror WrongPostman(address postman);\\n\\terror VaultNotAllowed(address vault);\\n\\terror VaultMissing(address vault);\\n\\terror VaultAlreadyAdded();\\n\\terror BridgeError();\\n\\terror SameChainOperation();\\n\\terror MissingIncomingXFunds();\\n}\\n\",\"keccak256\":\"0xa95aa6aa6717c1fd5404e305bc33ddff54ba2a12223a37e17c7a16aaa5f59639\",\"license\":\"MIT\"},\"src/interfaces/ERC4626/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.16;\\n\\ninterface IERC4626 {\\n\\tevent Deposit(\\n\\t\\taddress indexed sender,\\n\\t\\taddress indexed owner,\\n\\t\\tuint256 assets,\\n\\t\\tuint256 shares\\n\\t);\\n\\n\\tevent Withdraw(\\n\\t\\taddress indexed sender,\\n\\t\\taddress indexed receiver,\\n\\t\\taddress indexed owner,\\n\\t\\tuint256 assets,\\n\\t\\tuint256 shares\\n\\t);\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n\\tfunction mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n\\tfunction withdraw(\\n\\t\\tuint256 assets,\\n\\t\\taddress receiver,\\n\\t\\taddress owner\\n\\t) external returns (uint256 shares);\\n\\n\\tfunction redeem(\\n\\t\\tuint256 shares,\\n\\t\\taddress receiver,\\n\\t\\taddress owner\\n\\t) external returns (uint256 assets);\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n\\tfunction maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n\\tfunction maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n\\tfunction maxRedeem(address owner) external view returns (uint256 maxShares);\\n}\\n\",\"keccak256\":\"0x66cf40877e37b481baaeea8b8e86631d60555d664bec25f90e62bb1fe3574a3d\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/ERC4626/IERC4626Accounting.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.16;\\n\\ninterface IERC4626Accounting {\\n\\tfunction totalAssets() external view returns (uint256);\\n\\n\\tfunction convertToShares(uint256 assets) external view returns (uint256);\\n\\n\\tfunction convertToAssets(uint256 shares) external view returns (uint256);\\n\\n\\tfunction previewDeposit(uint256 assets) external view returns (uint256);\\n\\n\\tfunction previewMint(uint256 shares) external view returns (uint256);\\n\\n\\tfunction previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n\\tfunction previewRedeem(uint256 shares) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x900dd449e1fd09603b133cb78281dd7c14a6a2cb647c8eab42768772b9bcd67b\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/MsgStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.16;\\n\\nstruct Message {\\n\\tuint256 value;\\n\\taddress sender;\\n\\taddress client; // In case of emergency withdraw, this is the address to send the funds to\\n\\tuint16 chainId;\\n}\\n\\nstruct Vault {\\n\\tuint16 chainId;\\n\\tuint16 postmanId;\\n\\tbool allowed;\\n}\\n\\nstruct Request {\\n\\taddress vaultAddr;\\n\\tuint256 amount;\\n    uint256 fee;\\n\\taddress allowanceTarget;\\n\\taddress registry;\\n\\tbytes txData;\\n}\\n\\nenum MessageType {\\n\\tNONE,\\n\\tDEPOSIT,\\n\\tWITHDRAW,\\n\\tEMERGENCYWITHDRAW,\\n\\tHARVEST\\n}\\n\",\"keccak256\":\"0x8b81c44611ba59ee103dff78fd5fc026826667a14536edd973d55296251e16b0\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/postOffice/IPostOffice.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\nimport \\\"../MsgStructs.sol\\\";\\n\\ninterface IPostOffice {\\n\\tfunction sendMessage(\\n\\t\\taddress receiverAddr,\\n\\t\\tMessage calldata message,\\n\\t\\tuint16 receiverChainId,\\n\\t\\tMessageType msgType\\n\\t) external;\\n\\n\\tfunction writeMessage(\\n\\t\\taddress receiver,\\n\\t\\tMessage calldata message,\\n\\t\\tMessageType msgType\\n\\t) external;\\n\\n\\tfunction readMessage(MessageType msgType) external returns (Message[] memory messages);\\n\\n\\tfunction readMessageSumReduce(MessageType msgType)\\n\\t\\texternal\\n\\t\\treturns (uint256 acc, uint256 count);\\n}\\n\",\"keccak256\":\"0x34c40a968472edc176e07685885dd2bb915bbd49c9a3ff9763f3106acbc11d06\",\"license\":\"AGPL-3.0\"},\"src/interfaces/postOffice/IPostman.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\nimport \\\"../MsgStructs.sol\\\";\\n\\ninterface IPostman {\\n\\tfunction deliverMessage(\\n\\t\\tMessage calldata _msg,\\n\\t\\taddress _dstVautAddress,\\n\\t\\taddress _dstPostman,\\n\\t\\tMessageType _messageType,\\n\\t\\tuint16 _dstChainId,\\n\\t\\taddress _refundTo\\n\\t) external payable;\\n}\\n\",\"keccak256\":\"0x375348fee0f82fb711d0f4584295810048df6a6c3589e27cdb293d3e0e8f9375\",\"license\":\"AGPL-3.0\"},\"src/interfaces/scy/ISCYStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISCYStrategy {\\n\\tfunction deposit(\\n\\t\\taddress receiver,\\n\\t\\taddress tokenIn,\\n\\t\\tuint256 amountTokenToPull,\\n\\t\\tuint256 minSharesOut\\n\\t) external payable returns (uint256 amountSharesOut);\\n\\n\\tfunction redeem(\\n\\t\\taddress receiver,\\n\\t\\tuint256 amountSharesToPull,\\n\\t\\taddress tokenOut,\\n\\t\\tuint256 minTokenOut\\n\\t) external returns (uint256 amountTokenOut);\\n\\n\\tfunction getAndUpdateTvl() external returns (uint256 tvl);\\n\\n\\tfunction getTvl() external view returns (uint256 tvl);\\n\\n\\tfunction MIN_LIQUIDITY() external view returns (uint256);\\n\\n\\tfunction underlying() external view returns (IERC20);\\n\\n\\tfunction sendERC20ToStrategy() external view returns (bool);\\n\\n\\tfunction strategy() external view returns (address payable);\\n\\n\\tfunction underlyingBalance(address) external view returns (uint256);\\n\\n\\tfunction underlyingToShares(uint256 amnt) external view returns (uint256);\\n\\n\\tfunction sharesToUnderlying(uint256 shares) external view returns (uint256);\\n\\n\\tfunction getUpdatedUnderlyingBalance(address) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xd29876d155a4b8aa6f1322f9fd9241bf18ae49801934ea2f527718e9291f6015\",\"license\":\"GPL-3.0-or-later\"},\"src/libraries/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.16;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n\\t/*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tuint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n\\tfunction mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n\\t}\\n\\n\\tfunction mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n\\t}\\n\\n\\tfunction divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n\\t}\\n\\n\\tfunction divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction mulDivDown(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tuint256 denominator\\n\\t) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\t// Store x * y in z for now.\\n\\t\\t\\tz := mul(x, y)\\n\\n\\t\\t\\t// Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n\\t\\t\\tif iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Divide z by the denominator.\\n\\t\\t\\tz := div(z, denominator)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction mulDivUp(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tuint256 denominator\\n\\t) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\t// Store x * y in z for now.\\n\\t\\t\\tz := mul(x, y)\\n\\n\\t\\t\\t// Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n\\t\\t\\tif iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// First, divide z - 1 by the denominator and add 1.\\n\\t\\t\\t// We allow z - 1 to underflow if z is 0, because we multiply the\\n\\t\\t\\t// end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n\\t\\t\\tz := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction rpow(\\n\\t\\tuint256 x,\\n\\t\\tuint256 n,\\n\\t\\tuint256 scalar\\n\\t) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\tswitch x\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\tswitch n\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\t// 0 ** 0 = 1\\n\\t\\t\\t\\t\\tz := scalar\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\t// 0 ** n = 0\\n\\t\\t\\t\\t\\tz := 0\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\tswitch mod(n, 2)\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\t// If n is even, store scalar in z for now.\\n\\t\\t\\t\\t\\tz := scalar\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\t// If n is odd, store x in z for now.\\n\\t\\t\\t\\t\\tz := x\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Shifting right by 1 is like dividing by 2.\\n\\t\\t\\t\\tlet half := shr(1, scalar)\\n\\n\\t\\t\\t\\tfor {\\n\\t\\t\\t\\t\\t// Shift n right by 1 before looping to halve it.\\n\\t\\t\\t\\t\\tn := shr(1, n)\\n\\t\\t\\t\\t} n {\\n\\t\\t\\t\\t\\t// Shift n right by 1 each iteration to halve it.\\n\\t\\t\\t\\t\\tn := shr(1, n)\\n\\t\\t\\t\\t} {\\n\\t\\t\\t\\t\\t// Revert immediately if x ** 2 would overflow.\\n\\t\\t\\t\\t\\t// Equivalent to iszero(eq(div(xx, x), x)) here.\\n\\t\\t\\t\\t\\tif shr(128, x) {\\n\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Store x squared.\\n\\t\\t\\t\\t\\tlet xx := mul(x, x)\\n\\n\\t\\t\\t\\t\\t// Round to the nearest number.\\n\\t\\t\\t\\t\\tlet xxRound := add(xx, half)\\n\\n\\t\\t\\t\\t\\t// Revert if xx + half overflowed.\\n\\t\\t\\t\\t\\tif lt(xxRound, xx) {\\n\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Set x to scaled xxRound.\\n\\t\\t\\t\\t\\tx := div(xxRound, scalar)\\n\\n\\t\\t\\t\\t\\t// If n is even:\\n\\t\\t\\t\\t\\tif mod(n, 2) {\\n\\t\\t\\t\\t\\t\\t// Compute z * x.\\n\\t\\t\\t\\t\\t\\tlet zx := mul(z, x)\\n\\n\\t\\t\\t\\t\\t\\t// If z * x overflowed:\\n\\t\\t\\t\\t\\t\\tif iszero(eq(div(zx, x), z)) {\\n\\t\\t\\t\\t\\t\\t\\t// Revert if x is non-zero.\\n\\t\\t\\t\\t\\t\\t\\tif iszero(iszero(x)) {\\n\\t\\t\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Round to the nearest number.\\n\\t\\t\\t\\t\\t\\tlet zxRound := add(zx, half)\\n\\n\\t\\t\\t\\t\\t\\t// Revert if zx + half overflowed.\\n\\t\\t\\t\\t\\t\\tif lt(zxRound, zx) {\\n\\t\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Return properly scaled zxRound.\\n\\t\\t\\t\\t\\t\\tz := div(zxRound, scalar)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\t// Start off with z at 1.\\n\\t\\t\\tz := 1\\n\\n\\t\\t\\t// Used below to help find a nearby power of 2.\\n\\t\\t\\tlet y := x\\n\\n\\t\\t\\t// Find the lowest power of 2 that is at least sqrt(x).\\n\\t\\t\\tif iszero(lt(y, 0x100000000000000000000000000000000)) {\\n\\t\\t\\t\\ty := shr(128, y) // Like dividing by 2 ** 128.\\n\\t\\t\\t\\tz := shl(64, z) // Like multiplying by 2 ** 64.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x10000000000000000)) {\\n\\t\\t\\t\\ty := shr(64, y) // Like dividing by 2 ** 64.\\n\\t\\t\\t\\tz := shl(32, z) // Like multiplying by 2 ** 32.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x100000000)) {\\n\\t\\t\\t\\ty := shr(32, y) // Like dividing by 2 ** 32.\\n\\t\\t\\t\\tz := shl(16, z) // Like multiplying by 2 ** 16.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x10000)) {\\n\\t\\t\\t\\ty := shr(16, y) // Like dividing by 2 ** 16.\\n\\t\\t\\t\\tz := shl(8, z) // Like multiplying by 2 ** 8.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x100)) {\\n\\t\\t\\t\\ty := shr(8, y) // Like dividing by 2 ** 8.\\n\\t\\t\\t\\tz := shl(4, z) // Like multiplying by 2 ** 4.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x10)) {\\n\\t\\t\\t\\ty := shr(4, y) // Like dividing by 2 ** 4.\\n\\t\\t\\t\\tz := shl(2, z) // Like multiplying by 2 ** 2.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x8)) {\\n\\t\\t\\t\\t// Equivalent to 2 ** z.\\n\\t\\t\\t\\tz := shl(1, z)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Shifting right by 1 is like dividing by 2.\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\n\\t\\t\\t// Compute a rounded down version of z.\\n\\t\\t\\tlet zRoundDown := div(x, z)\\n\\n\\t\\t\\t// If zRoundDown is smaller, use it.\\n\\t\\t\\tif lt(zRoundDown, z) {\\n\\t\\t\\t\\tz := zRoundDown\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x80d6f7e387ea05482e971f71328688e3717e90c73f3a485a56a9d8b298a926e2\",\"license\":\"AGPL-3.0-only\"},\"src/vaults/ERC4626/BatchedWithdraw.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ERC4626 } from \\\"./ERC4626.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nstruct WithdrawRecord {\\n\\tuint256 timestamp;\\n\\tuint256 shares;\\n\\tuint256 value; // this the current value (also max withdraw value)\\n}\\n\\nabstract contract BatchedWithdraw is ERC4626 {\\n\\tusing SafeERC20 for ERC20;\\n\\n\\tevent RequestWithdraw(address indexed caller, address indexed owner, uint256 shares);\\n\\n\\tuint256 public lastHarvestTimestamp;\\n\\tuint256 public pendingWithdraw; // actual amount may be less\\n\\n\\tmapping(address => WithdrawRecord) public withdrawLedger;\\n\\n\\tconstructor() {\\n\\t\\tlastHarvestTimestamp = block.timestamp;\\n\\t}\\n\\n\\tfunction requestRedeem(uint256 shares) public {\\n\\t\\treturn requestRedeem(shares, msg.sender);\\n\\t}\\n\\n\\tfunction requestRedeem(uint256 shares, address owner) public {\\n\\t\\tif (msg.sender != owner) _spendAllowance(owner, msg.sender, shares);\\n\\t\\t_transfer(owner, address(this), shares);\\n\\t\\tWithdrawRecord storage withdrawRecord = withdrawLedger[msg.sender];\\n\\t\\twithdrawRecord.timestamp = block.timestamp;\\n\\t\\twithdrawRecord.shares += shares;\\n\\t\\tuint256 value = convertToAssets(shares);\\n\\t\\twithdrawRecord.value = value;\\n\\t\\tpendingWithdraw += value;\\n\\t\\temit RequestWithdraw(msg.sender, owner, shares);\\n\\t}\\n\\n\\tfunction withdraw(\\n\\t\\tuint256,\\n\\t\\taddress,\\n\\t\\taddress\\n\\t) public pure virtual override returns (uint256) {\\n\\t\\trevert NotImplemented();\\n\\t}\\n\\n\\tfunction redeem(\\n\\t\\tuint256,\\n\\t\\taddress receiver,\\n\\t\\taddress\\n\\t) public virtual override returns (uint256 amountOut) {\\n\\t\\treturn redeem(receiver);\\n\\t}\\n\\n\\t/// @dev safest UI method\\n\\tfunction redeem() public virtual returns (uint256 amountOut) {\\n\\t\\treturn redeem(msg.sender);\\n\\t}\\n\\n\\tfunction redeem(address receiver) public virtual returns (uint256 amountOut) {\\n\\t\\tuint256 shares;\\n\\t\\t(amountOut, shares) = _redeem(msg.sender);\\n\\t\\tERC20(asset).transfer(receiver, amountOut);\\n\\t\\temit Withdraw(msg.sender, receiver, msg.sender, amountOut, shares);\\n\\t}\\n\\n\\t/// @dev should only be called by manager on behalf of xVaults\\n\\tfunction _xRedeem(address xVault) internal virtual returns (uint256 amountOut) {\\n\\t\\tuint256 shares;\\n\\t\\t(amountOut, shares) = _redeem(xVault);\\n\\t\\t_burn(address(this), shares);\\n\\t\\temit Withdraw(xVault, xVault, xVault, amountOut, shares);\\n\\t}\\n\\n\\tfunction _redeem(address account) internal returns (uint256 amountOut, uint256 shares) {\\n\\t\\tWithdrawRecord storage withdrawRecord = withdrawLedger[account];\\n\\n\\t\\tif (withdrawRecord.value == 0) revert ZeroAmount();\\n\\t\\tif (withdrawRecord.timestamp >= lastHarvestTimestamp) revert NotReady();\\n\\n\\t\\tshares = withdrawRecord.shares;\\n\\t\\t// value of shares at time of redemption request\\n\\t\\tuint256 redeemValue = withdrawRecord.value;\\n\\t\\tuint256 currentValue = convertToAssets(shares);\\n\\n\\t\\t// actual amount out is the smaller of currentValue and redeemValue\\n\\t\\tamountOut = currentValue < redeemValue ? currentValue : redeemValue;\\n\\n\\t\\t// update total pending withdraw\\n\\t\\tpendingWithdraw -= redeemValue;\\n\\n\\t\\t// important pendingWithdraw should update prior to beforeWithdraw call\\n\\t\\tbeforeWithdraw(amountOut, shares);\\n\\t\\twithdrawRecord.value = 0;\\n\\t\\t_burn(address(this), shares);\\n\\t}\\n\\n\\tfunction cancelRedeem() public virtual {\\n\\t\\tWithdrawRecord storage withdrawRecord = withdrawLedger[msg.sender];\\n\\n\\t\\tuint256 shares = withdrawRecord.shares;\\n\\t\\t// value of shares at time of redemption request\\n\\t\\tuint256 redeemValue = withdrawRecord.value;\\n\\t\\tuint256 currentValue = convertToAssets(shares);\\n\\n\\t\\t// update accounting\\n\\t\\twithdrawRecord.value = 0;\\n\\t\\tpendingWithdraw -= redeemValue;\\n\\n\\t\\t// if vault lost money, shares stay the same\\n\\t\\tif (currentValue < redeemValue) return _transfer(address(this), msg.sender, shares);\\n\\n\\t\\t// // if vault earned money, subtract earnings since withdrawal request\\n\\t\\tuint256 sharesOut = (shares * redeemValue) / currentValue;\\n\\t\\tuint256 sharesToBurn = shares - sharesOut;\\n\\n\\t\\t_transfer(address(this), msg.sender, sharesOut);\\n\\t\\t_burn(address(this), sharesToBurn);\\n\\t}\\n\\n\\t/// @notice UI method to view cancellation penalty\\n\\tfunction getPenalty() public view returns (uint256) {\\n\\t\\tWithdrawRecord storage withdrawRecord = withdrawLedger[msg.sender];\\n\\t\\tuint256 shares = withdrawRecord.shares;\\n\\n\\t\\tuint256 redeemValue = withdrawRecord.value;\\n\\t\\tuint256 currentValue = convertToAssets(shares);\\n\\n\\t\\tif (currentValue < redeemValue) return 0;\\n\\t\\treturn (1e18 * (currentValue - redeemValue)) / redeemValue;\\n\\t}\\n\\n\\t/// UTILS\\n\\tfunction redeemIsReady(address user) external view returns (bool) {\\n\\t\\tWithdrawRecord storage withdrawRecord = withdrawLedger[user];\\n\\t\\treturn lastHarvestTimestamp > withdrawRecord.timestamp;\\n\\t}\\n\\n\\tfunction getWithdrawStatus(address user) external view returns (WithdrawRecord memory) {\\n\\t\\treturn withdrawLedger[user];\\n\\t}\\n\\n\\terror Expired();\\n\\terror NotImplemented();\\n\\terror NotReady();\\n\\terror ZeroAmount();\\n}\\n\",\"keccak256\":\"0x927ec88d277d3300d58e8cf040c41f8bd8d74eead2a36ba18851ccb49a1632d4\",\"license\":\"AGPL-3.0\"},\"src/vaults/ERC4626/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { FixedPointMathLib } from \\\"../../libraries/FixedPointMathLib.sol\\\";\\nimport { IERC4626 } from \\\"../../interfaces/ERC4626/IERC4626.sol\\\";\\nimport { Accounting } from \\\"../../common/Accounting.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { Auth, AuthConfig } from \\\"../../common/Auth.sol\\\";\\nimport { Fees, FeeConfig } from \\\"../../common/Fees.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is Auth, Accounting, Fees, IERC4626, ERC20 {\\n\\tusing SafeERC20 for ERC20;\\n\\tusing FixedPointMathLib for uint256;\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                               CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t// locked liquidity to prevent rounding errors\\n\\tuint256 public constant MIN_LIQUIDITY = 1e3;\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tERC20 immutable asset;\\n\\n\\tconstructor(\\n\\t\\tERC20 _asset,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol\\n\\t) ERC20(_name, _symbol) {\\n\\t\\tasset = _asset;\\n\\t}\\n\\n\\tfunction decimals() public view override returns (uint8) {\\n\\t\\treturn asset.decimals();\\n\\t}\\n\\n\\tfunction totalAssets() public view virtual override returns (uint256) {\\n\\t\\treturn asset.balanceOf(address(this));\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n\\t\\t// This check is no longer necessary because we use MIN_LIQUIDITY\\n\\t\\t// Check for rounding error since we round down in previewDeposit.\\n\\t\\t// require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\t\\tshares = previewDeposit(assets);\\n\\n\\t\\t// Need to transfer before minting or ERC777s could reenter.\\n\\t\\tasset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n\\t\\t// lock minimum liquidity if totalSupply is 0\\n\\t\\tif (totalSupply() == 0) {\\n\\t\\t\\tif (MIN_LIQUIDITY > shares) revert MinLiquidity();\\n\\t\\t\\tshares -= MIN_LIQUIDITY;\\n\\t\\t\\t_mint(address(1), MIN_LIQUIDITY);\\n\\t\\t}\\n\\n\\t\\t_mint(receiver, shares);\\n\\n\\t\\temit Deposit(msg.sender, receiver, assets, shares);\\n\\n\\t\\tafterDeposit(assets, shares);\\n\\t}\\n\\n\\tfunction mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n\\t\\tassets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n\\t\\t// Need to transfer before minting or ERC777s could reenter.\\n\\t\\tasset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n\\t\\t_mint(receiver, shares);\\n\\n\\t\\temit Deposit(msg.sender, receiver, assets, shares);\\n\\n\\t\\tafterDeposit(assets, shares);\\n\\t}\\n\\n\\tfunction withdraw(\\n\\t\\tuint256 assets,\\n\\t\\taddress receiver,\\n\\t\\taddress owner\\n\\t) public virtual returns (uint256 shares) {\\n\\t\\tshares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n\\t\\t// if not owner, allowance must be enforced\\n\\t\\tif (msg.sender != owner) _spendAllowance(owner, msg.sender, shares);\\n\\n\\t\\tbeforeWithdraw(assets, shares);\\n\\n\\t\\t_burn(owner, shares);\\n\\n\\t\\temit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n\\t\\tasset.safeTransfer(receiver, assets);\\n\\t}\\n\\n\\tfunction redeem(\\n\\t\\tuint256 shares,\\n\\t\\taddress receiver,\\n\\t\\taddress owner\\n\\t) public virtual returns (uint256 assets) {\\n\\t\\t// if not owner, allowance must be enforced\\n\\t\\tif (msg.sender != owner) _spendAllowance(owner, msg.sender, shares);\\n\\n\\t\\t// This check is no longer necessary because we use MIN_LIQUIDITY\\n\\t\\t// Check for rounding error since we round down in previewRedeem.\\n\\t\\t// require((assets = previewRedeem(shares)) != 0, \\\"ZEROassetS\\\");\\n\\t\\tassets = previewRedeem(shares);\\n\\n\\t\\tbeforeWithdraw(assets, shares);\\n\\n\\t\\t_burn(owner, shares);\\n\\n\\t\\temit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n\\t\\tasset.safeTransfer(receiver, assets);\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction maxDeposit(address) public view virtual returns (uint256) {\\n\\t\\treturn type(uint256).max;\\n\\t}\\n\\n\\tfunction maxMint(address) public view virtual returns (uint256) {\\n\\t\\treturn type(uint256).max;\\n\\t}\\n\\n\\tfunction maxWithdraw(address owner) public view virtual returns (uint256) {\\n\\t\\treturn convertToAssets(balanceOf(owner));\\n\\t}\\n\\n\\tfunction maxRedeem(address owner) public view virtual returns (uint256) {\\n\\t\\treturn balanceOf(owner);\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n\\tfunction afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n\\n\\t// OVERRIDES\\n\\tfunction totalSupply() public view override(Accounting, ERC20) returns (uint256) {\\n\\t\\treturn ERC20.totalSupply();\\n\\t}\\n\\n\\terror MinLiquidity();\\n}\\n\",\"keccak256\":\"0x584d884bea253037fef85c95ad466fed51c34a00910af0c7a416083c090cbaf2\",\"license\":\"AGPL-3.0-only\"},\"src/vaults/SectorBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ERC4626, FixedPointMathLib, SafeERC20 } from \\\"./ERC4626/ERC4626.sol\\\";\\nimport { ISCYStrategy } from \\\"../interfaces/scy/ISCYStrategy.sol\\\";\\nimport { BatchedWithdraw } from \\\"./ERC4626/BatchedWithdraw.sol\\\";\\nimport { XChainIntegrator } from \\\"../common/XChainIntegrator.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/MsgStructs.sol\\\";\\n\\nabstract contract SectorBase is BatchedWithdraw, XChainIntegrator {\\n\\tusing FixedPointMathLib for uint256;\\n\\tusing SafeERC20 for ERC20;\\n\\n\\tevent Harvest(\\n\\t\\taddress indexed treasury,\\n\\t\\tuint256 underlyingProfit,\\n\\t\\tuint256 performanceFee,\\n\\t\\tuint256 managementFee,\\n\\t\\tuint256 sharesFees,\\n\\t\\tuint256 tvl\\n\\t);\\n\\n\\tuint256 public totalChildHoldings;\\n\\tuint256 public floatAmnt; // amount of underlying tracked in vault\\n\\n\\tfunction _harvest(uint256 currentChildHoldings) internal {\\n\\t\\t// withdrawFromStrategies should be called prior to harvest to ensure this tx doesn't revert\\n\\t\\tif (floatAmnt < pendingWithdraw) revert NotEnoughtFloat();\\n\\n\\t\\tuint256 profit = currentChildHoldings > totalChildHoldings\\n\\t\\t\\t? currentChildHoldings - totalChildHoldings\\n\\t\\t\\t: 0;\\n\\n\\t\\tuint256 timestamp = block.timestamp;\\n\\t\\tuint256 tvl = currentChildHoldings + floatAmnt;\\n\\n\\t\\t// totalChildHoldings need to be updated before fees computation\\n\\t\\ttotalChildHoldings = currentChildHoldings;\\n\\n\\t\\t// PROCESS VAULT FEES\\n\\t\\tuint256 _performanceFee = profit == 0 ? 0 : (profit * performanceFee) / 1e18;\\n\\t\\tuint256 _managementFee = managementFee == 0\\n\\t\\t\\t? 0\\n\\t\\t\\t: (managementFee * tvl * (timestamp - lastHarvestTimestamp)) / 1e18 / 365 days;\\n\\n\\t\\tuint256 totalFees = _performanceFee + _managementFee;\\n\\t\\tuint256 feeShares;\\n\\n\\t\\tif (totalFees > 0) {\\n\\t\\t\\t// this results in more accurate accounting considering dilution\\n\\t\\t\\tfeeShares = totalFees.mulDivDown(totalSupply(), tvl - totalFees);\\n\\t\\t\\t_mint(treasury, feeShares);\\n\\t\\t}\\n\\n\\t\\temit Harvest(treasury, profit, _performanceFee, _managementFee, feeShares, tvl);\\n\\n\\t\\t// this enables withdrawals requested prior to this timestamp\\n\\t\\tlastHarvestTimestamp = timestamp;\\n\\t}\\n\\n\\t/// @notice this method allows an arbitrary method to be called by the owner in case of emergency\\n\\t/// owner must be a timelock contract in order to allow users to redeem funds in case they suspect\\n\\t/// this action to be malicious\\n\\tfunction emergencyAction(address target, bytes calldata callData) public onlyOwner {\\n\\t\\tAddress.functionCall(target, callData);\\n\\t\\temit EmergencyAction(target, callData);\\n\\t}\\n\\n\\tfunction _checkSlippage(\\n\\t\\tuint256 expectedValue,\\n\\t\\tuint256 actualValue,\\n\\t\\tuint256 maxDelta\\n\\t) internal pure {\\n\\t\\tuint256 delta = expectedValue > actualValue\\n\\t\\t\\t? expectedValue - actualValue\\n\\t\\t\\t: actualValue - expectedValue;\\n\\t\\tif (delta > maxDelta) revert SlippageExceeded();\\n\\t}\\n\\n\\tfunction totalAssets() public view virtual override returns (uint256) {\\n\\t\\treturn floatAmnt + totalChildHoldings;\\n\\t}\\n\\n\\t/// INTERFACE UTILS\\n\\n\\t/// @dev returns a cached value used for withdrawals\\n\\tfunction underlyingBalance(address user) public view returns (uint256) {\\n\\t\\tuint256 shares = balanceOf(user);\\n\\t\\treturn convertToAssets(shares);\\n\\t}\\n\\n\\tfunction underlyingDecimals() public view returns (uint8) {\\n\\t\\treturn asset.decimals();\\n\\t}\\n\\n\\tfunction underlying() public view returns (address) {\\n\\t\\treturn address(asset);\\n\\t}\\n\\n\\t/// OVERRIDES\\n\\n\\tfunction afterDeposit(uint256 assets, uint256) internal override {\\n\\t\\tfloatAmnt += assets;\\n\\t}\\n\\n\\tfunction beforeWithdraw(uint256 assets, uint256) internal override {\\n\\t\\t// this check prevents withdrawing more underlying from the vault then\\n\\t\\t// what we need to keep to honor withdrawals\\n\\t\\tif (floatAmnt < assets || floatAmnt - assets < pendingWithdraw) revert NotEnoughtFloat();\\n\\t\\tfloatAmnt -= assets;\\n\\t}\\n\\n\\tevent RegisterDeposit(uint256 total);\\n\\tevent EmergencyWithdraw(address vault, address client, uint256 shares);\\n\\tevent EmergencyAction(address target, bytes callData);\\n\\n\\terror MaxRedeemNotZero();\\n\\terror NotEnoughtFloat();\\n\\terror WrongUnderlying();\\n\\terror SlippageExceeded();\\n\\terror StrategyExists();\\n\\terror StrategyNotFound();\\n\\terror MissingDepositValue();\\n}\\n\",\"keccak256\":\"0x7c7612d2088417ea322d0223e647fd63b1b316aeef1ac83e559abd69868250d5\",\"license\":\"AGPL-3.0\"},\"src/vaults/SectorCrossVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IERC20, SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { BatchedWithdraw } from \\\"./ERC4626/BatchedWithdraw.sol\\\";\\nimport { SectorVault } from \\\"./SectorVault.sol\\\";\\nimport { ERC4626, FixedPointMathLib, Fees, FeeConfig, Auth, AuthConfig } from \\\"./ERC4626/ERC4626.sol\\\";\\nimport { IPostOffice } from \\\"../interfaces/postOffice/IPostOffice.sol\\\";\\nimport { XChainIntegrator } from \\\"../common/XChainIntegrator.sol\\\";\\nimport { SectorBase } from \\\"./SectorBase.sol\\\";\\nimport \\\"../interfaces/MsgStructs.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nstruct HarvestLedger {\\n\\tuint256 localDepositValue;\\n\\tuint256 crossDepositValue;\\n\\tuint256 pendingAnswers;\\n\\tuint256 receivedAnswers;\\n}\\n\\ncontract SectorCrossVault is SectorBase {\\n\\tusing SafeERC20 for ERC20;\\n\\tusing FixedPointMathLib for uint256;\\n\\n\\t// Used to harvest from deposited vaults\\n\\taddress[] internal vaultList;\\n\\t// Harvest state\\n\\tHarvestLedger public harvestLedger;\\n\\tMessage[] internal withdrawQueue;\\n\\n\\tconstructor(\\n\\t\\tERC20 _asset,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tAuthConfig memory authConfig,\\n\\t\\tFeeConfig memory feeConfig\\n\\t) ERC4626(_asset, _name, _symbol) Auth(authConfig) Fees(feeConfig) BatchedWithdraw() {}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\tCross Vault Interface\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\tfunction depositIntoXVaults(Request[] calldata vaults) public onlyRole(MANAGER) {\\n\\t\\tuint256 totalAmount = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < vaults.length; ) {\\n\\t\\t\\taddress vaultAddr = vaults[i].vaultAddr;\\n\\t\\t\\tuint256 amount = vaults[i].amount;\\n\\t\\t\\tuint256 fee = vaults[i].fee;\\n\\n\\t\\t\\tVault memory vault = checkVault(vaultAddr);\\n\\t\\t\\tif (vault.chainId == chainId) revert SameChainOperation();\\n\\n\\t\\t\\ttotalAmount += amount;\\n\\n\\t\\t\\t_sendMessage(\\n\\t\\t\\t\\tvaultAddr,\\n\\t\\t\\t\\tvault,\\n\\t\\t\\t\\tMessage(amount - fee, address(this), address(0), chainId),\\n\\t\\t\\t\\tMessageType.DEPOSIT\\n\\t\\t\\t);\\n\\n\\t\\t\\t_sendTokens(\\n\\t\\t\\t\\tunderlying(),\\n\\t\\t\\t\\tvaults[i].allowanceTarget,\\n\\t\\t\\t\\tvaults[i].registry,\\n\\t\\t\\t\\tvaultAddr,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\tuint256(vault.chainId),\\n\\t\\t\\t\\tvaults[i].txData\\n\\t\\t\\t);\\n\\n\\t\\t\\temit BridgeAsset(chainId, vault.chainId, amount);\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tbeforeWithdraw(totalAmount, 0);\\n\\t\\ttotalChildHoldings += totalAmount;\\n\\t}\\n\\n\\tfunction withdrawFromXVaults(Request[] calldata vaults) public onlyRole(MANAGER) {\\n\\t\\tfor (uint256 i = 0; i < vaults.length; ) {\\n\\t\\t\\taddress vaultAddr = vaults[i].vaultAddr;\\n\\t\\t\\tuint256 amount = vaults[i].amount;\\n\\n\\t\\t\\tVault memory vault = checkVault(vaultAddr);\\n\\n\\t\\t\\tif (vault.chainId == chainId) revert SameChainOperation();\\n\\n\\t\\t\\t_sendMessage(\\n\\t\\t\\t\\tvaultAddr,\\n\\t\\t\\t\\tvault,\\n\\t\\t\\t\\tMessage(amount, address(this), address(0), chainId),\\n\\t\\t\\t\\tMessageType.WITHDRAW\\n\\t\\t\\t);\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction harvestVaults() public onlyRole(MANAGER) {\\n\\t\\tuint256 localDepositValue = 0;\\n\\n\\t\\tif (harvestLedger.pendingAnswers != 0) revert OnGoingHarvest();\\n\\n\\t\\tuint256 vaultsLength = vaultList.length;\\n\\t\\tuint256 xvaultsCount = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < vaultsLength; ) {\\n\\t\\t\\taddress vaultAddr = vaultList[i];\\n\\t\\t\\tVault memory vault = addrBook[vaultAddr];\\n\\n\\t\\t\\tif (vault.chainId == chainId) {\\n\\t\\t\\t\\tlocalDepositValue += SectorVault(vaultAddr).underlyingBalance(address(this));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_sendMessage(\\n\\t\\t\\t\\t\\tvaultAddr,\\n\\t\\t\\t\\t\\tvault,\\n\\t\\t\\t\\t\\tMessage(0, address(this), address(0), chainId),\\n\\t\\t\\t\\t\\tMessageType.HARVEST\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\txvaultsCount += 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tharvestLedger = HarvestLedger(localDepositValue, 0, xvaultsCount, 0);\\n\\t}\\n\\n\\tfunction finalizeHarvest(uint256 expectedValue, uint256 maxDelta) public onlyRole(MANAGER) {\\n\\t\\tHarvestLedger memory ledger = harvestLedger;\\n\\n\\t\\tif (ledger.pendingAnswers == 0) revert HarvestNotOpen();\\n\\t\\tif (ledger.receivedAnswers < ledger.pendingAnswers) revert MissingMessages();\\n\\n\\t\\tuint256 currentChildHoldings = ledger.localDepositValue + ledger.crossDepositValue;\\n\\n\\t\\t// TODO should expectedValue include balance?\\n\\t\\t// uint256 tvl = currentChildHoldings + asset.balanceOf(address(this));\\n\\t\\t_checkSlippage(expectedValue, currentChildHoldings, maxDelta);\\n\\t\\t_harvest(currentChildHoldings);\\n\\n\\t\\t// Change harvest status\\n\\t\\tharvestLedger = HarvestLedger(0, 0, 0, 0);\\n\\t}\\n\\n\\tfunction emergencyWithdraw() external {\\n\\t\\tuint256 userShares = balanceOf(msg.sender);\\n\\n\\t\\t_burn(msg.sender, userShares);\\n\\t\\tuint256 userPerc = userShares.divWadDown(totalSupply());\\n\\n\\t\\tuint256 vaultsLength = vaultList.length;\\n\\t\\tfor (uint256 i = 0; i < vaultsLength; ) {\\n\\t\\t\\taddress vaultAddr = vaultList[i];\\n\\t\\t\\tVault memory vault = checkVault(vaultAddr);\\n\\n\\t\\t\\tif (vault.chainId == chainId) {\\n\\t\\t\\t\\tBatchedWithdraw _vault = BatchedWithdraw(vaultAddr);\\n\\t\\t\\t\\tuint256 transferShares = userPerc.mulWadDown(_vault.balanceOf(address(this)));\\n\\t\\t\\t\\t_vault.transfer(msg.sender, transferShares);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_sendMessage(\\n\\t\\t\\t\\t\\tvaultAddr,\\n\\t\\t\\t\\t\\tvault,\\n\\t\\t\\t\\t\\tMessage(userPerc, address(this), msg.sender, chainId),\\n\\t\\t\\t\\t\\tMessageType.EMERGENCYWITHDRAW\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// Do linear search on vaultList -> O(n)\\n\\tfunction removeVault(address _vault) external onlyOwner {\\n\\t\\taddrBook[_vault].allowed = false;\\n\\n\\t\\tuint256 length = vaultList.length;\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\tif (vaultList[i] == _vault) {\\n\\t\\t\\t\\tvaultList[i] = vaultList[length - 1];\\n\\t\\t\\t\\tvaultList.pop();\\n\\n\\t\\t\\t\\temit ChangedVaultStatus(_vault, false);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\t\\t\\tOverrides\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\tfunction addVault(\\n\\t\\taddress _vault,\\n\\t\\tuint16 _chainId,\\n\\t\\tuint16 _postmanId,\\n\\t\\tbool _allowed\\n\\t) external override onlyOwner {\\n\\t\\t_addVault(_vault, _chainId, _postmanId, _allowed);\\n\\t\\tvaultList.push(_vault);\\n\\t}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\t\\t\\tInternals\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\tfunction _handleMessage(MessageType _type, Message calldata _msg) internal override {\\n\\t\\tif (_type == MessageType.WITHDRAW) _receiveWithdraw(_msg);\\n\\t\\telse if (_type == MessageType.HARVEST) _receiveHarvest(_msg);\\n\\t\\telse revert NotImplemented();\\n\\t}\\n\\n\\tfunction checkVault(address _vault) internal view returns (Vault memory) {\\n\\t\\tVault memory vault = addrBook[_vault];\\n\\t\\tif (!vault.allowed) revert VaultNotAllowed(_vault);\\n\\t\\treturn vault;\\n\\t}\\n\\n\\tfunction _receiveWithdraw(Message calldata _msg) internal {\\n\\t\\twithdrawQueue.push(_msg);\\n\\t}\\n\\n\\tfunction processIncomingXFunds() external override onlyRole(MANAGER) {\\n\\t\\tuint256 length = withdrawQueue.length;\\n\\t\\tuint256 total = 0;\\n\\t\\tfor (uint256 i = length; i > 0; ) {\\n\\t\\t\\tMessage memory _msg = withdrawQueue[i - 1];\\n\\t\\t\\twithdrawQueue.pop();\\n\\n\\t\\t\\ttotal += _msg.value;\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Should account for fees paid in tokens for using bridge\\n\\t\\t// Also, if a value hasn't arrived manager will not be able to register any value\\n\\t\\t// console.log(total);\\n\\t\\t// console.log(asset.balanceOf(address(this)));\\n\\t\\t// console.log(floatAmnt);\\n\\t\\t// console.log(pendingWithdraw);\\n\\n\\t\\tif (total < (asset.balanceOf(address(this)) - floatAmnt - pendingWithdraw))\\n\\t\\t\\trevert MissingIncomingXFunds();\\n\\n\\t\\t_finalizedWithdraw(total);\\n\\t\\temit RegisterIncomingFunds(total);\\n\\t}\\n\\n\\tfunction _receiveHarvest(Message calldata _msg) internal {\\n\\t\\tharvestLedger.crossDepositValue += _msg.value;\\n\\t\\tharvestLedger.receivedAnswers += 1;\\n\\t}\\n\\n\\tfunction _finalizedWithdraw(uint256 totalWithdraw) internal {\\n\\t\\t// uint256 totalWithdraw;\\n\\t\\ttotalChildHoldings -= totalWithdraw;\\n\\t\\tafterDeposit(totalWithdraw, 0);\\n\\t}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\t\\t\\tModifiers\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\t// modifier harvestLock() {\\n\\t// \\tif (harvestLedger.count != 0) revert OnGoingHarvest();\\n\\t// \\t_;\\n\\t// }\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\t\\t\\tErrors\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\terror HarvestNotOpen();\\n\\terror OnGoingHarvest();\\n\\terror MissingMessages();\\n}\\n\",\"keccak256\":\"0x685db830eac1a376db9c31924f37c9529ad2c235cfb9763a84263956de5da25e\",\"license\":\"AGPL-3.0\"},\"src/vaults/SectorVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ERC4626, FixedPointMathLib, SafeERC20, Fees, FeeConfig, Auth, AuthConfig } from \\\"./ERC4626/ERC4626.sol\\\";\\nimport { ISCYStrategy } from \\\"../interfaces/scy/ISCYStrategy.sol\\\";\\nimport { BatchedWithdraw } from \\\"./ERC4626/BatchedWithdraw.sol\\\";\\nimport { SectorBase } from \\\"./SectorBase.sol\\\";\\nimport \\\"../interfaces/MsgStructs.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n// TODO native asset deposit + flow\\n\\nstruct RedeemParams {\\n\\tISCYStrategy strategy;\\n\\tuint256 shares;\\n\\tuint256 minTokenOut;\\n}\\n\\nstruct DepositParams {\\n\\tISCYStrategy strategy;\\n\\tuint256 amountIn;\\n\\tuint256 minSharesOut;\\n}\\n\\ncontract SectorVault is SectorBase {\\n\\tusing FixedPointMathLib for uint256;\\n\\tusing SafeERC20 for ERC20;\\n\\n\\t/// if vaults accepts native asset we set asset to address 0;\\n\\taddress internal constant NATIVE = address(0);\\n\\n\\tmapping(ISCYStrategy => bool) public strategyExists;\\n\\taddress[] public strategyIndex;\\n\\taddress[] public bridgeQueue;\\n\\tMessage[] internal depositQueue;\\n\\n\\tuint256 public totalStrategyHoldings;\\n\\n\\tconstructor(\\n\\t\\tERC20 asset_,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tAuthConfig memory authConfig,\\n\\t\\tFeeConfig memory feeConfig\\n\\t) ERC4626(asset_, _name, _symbol) Auth(authConfig) Fees(feeConfig) BatchedWithdraw() {}\\n\\n\\tfunction addStrategy(ISCYStrategy strategy) public onlyOwner {\\n\\t\\tif (strategyExists[strategy]) revert StrategyExists();\\n\\n\\t\\t/// make sure underlying matches\\n\\t\\tif (address(strategy.underlying()) != address(asset)) revert WrongUnderlying();\\n\\n\\t\\tstrategyExists[strategy] = true;\\n\\t\\tstrategyIndex.push(address(strategy));\\n\\t\\temit AddStrategy(address(strategy));\\n\\t}\\n\\n\\tfunction removeStrategy(ISCYStrategy strategy) public onlyOwner {\\n\\t\\tif (!strategyExists[strategy]) revert StrategyNotFound();\\n\\t\\tstrategyExists[strategy] = false;\\n\\t\\tuint256 length = strategyIndex.length;\\n\\t\\t// replace current index with last strategy and pop the index array\\n\\t\\tuint256 i;\\n\\t\\tfor (i; i < length; ++i) if (address(strategy) == strategyIndex[i]) break;\\n\\t\\tstrategyIndex[i] = strategyIndex[length - 1];\\n\\t\\tstrategyIndex.pop();\\n\\t\\temit RemoveStrategy(address(strategy));\\n\\t}\\n\\n\\tfunction totalStrategies() external view returns (uint256) {\\n\\t\\treturn strategyIndex.length;\\n\\t}\\n\\n\\tfunction getAllStrategies() external view returns (address[] memory) {\\n\\t\\treturn strategyIndex;\\n\\t}\\n\\n\\t/// We compute expected tvl off-chain first, to ensure this transactions isn't sandwitched\\n\\tfunction harvest(uint256 expectedTvl, uint256 maxDelta) public onlyRole(MANAGER) {\\n\\t\\tuint256 currentChildHoldings = _getStrategyHoldings();\\n\\t\\tuint256 tvl = currentChildHoldings + floatAmnt;\\n\\t\\t_checkSlippage(expectedTvl, tvl, maxDelta);\\n\\t\\t// harvest event emitted here\\n\\t\\t_harvest(currentChildHoldings);\\n\\t}\\n\\n\\t/// this can be done in parts in case gas limit is reached\\n\\tfunction depositIntoStrategies(DepositParams[] calldata params) public onlyRole(MANAGER) {\\n\\t\\tuint256 l = params.length;\\n\\t\\tfor (uint256 i; i < l; ++i) {\\n\\t\\t\\tDepositParams memory param = params[i];\\n\\t\\t\\tuint256 amountIn = param.amountIn;\\n\\t\\t\\tif (amountIn == 0) continue;\\n\\t\\t\\tISCYStrategy strategy = param.strategy;\\n\\t\\t\\tif (!strategyExists[strategy]) revert StrategyNotFound();\\n\\t\\t\\t// update underlying float accouting\\n\\t\\t\\tbeforeWithdraw(amountIn, 0);\\n\\t\\t\\t/// push funds to avoid approvals\\n\\t\\t\\tasset.safeTransfer(strategy.strategy(), amountIn);\\n\\t\\t\\tstrategy.deposit(address(this), address(asset), 0, param.minSharesOut);\\n\\t\\t\\ttotalChildHoldings += amountIn;\\n\\t\\t\\temit DepositIntoStrategy(msg.sender, address(strategy), amountIn);\\n\\t\\t}\\n\\t}\\n\\n\\t/// this can be done in parts in case gas limit is reached\\n\\tfunction withdrawFromStrategies(RedeemParams[] calldata params) public onlyRole(MANAGER) {\\n\\t\\tuint256 l = params.length;\\n\\t\\tfor (uint256 i; i < l; ++i) {\\n\\t\\t\\tRedeemParams memory param = params[i];\\n\\t\\t\\tuint256 shares = param.shares;\\n\\t\\t\\tif (shares == 0) continue;\\n\\t\\t\\tISCYStrategy strategy = param.strategy;\\n\\t\\t\\tif (!strategyExists[strategy]) revert StrategyNotFound();\\n\\n\\t\\t\\t// no need to push share tokens - contract can burn them\\n\\t\\t\\tuint256 amountOut = strategy.redeem(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tshares,\\n\\t\\t\\t\\taddress(asset), // token out is allways asset\\n\\t\\t\\t\\tparam.minTokenOut\\n\\t\\t\\t);\\n\\t\\t\\ttotalChildHoldings -= amountOut;\\n\\t\\t\\t// update underlying float accounting\\n\\t\\t\\tafterDeposit(amountOut, 0);\\n\\t\\t\\temit WithdrawFromStrategy(msg.sender, address(strategy), amountOut);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction emergencyRedeem() public {\\n\\t\\tuint256 _totalSupply = totalSupply();\\n\\t\\tuint256 shares = balanceOf(msg.sender);\\n\\t\\tif (shares == 0) return;\\n\\t\\t_burn(msg.sender, shares);\\n\\n\\t\\t// redeem proportional share of vault's underlying float balance\\n\\t\\tuint256 underlyingShare = (floatAmnt * shares) / _totalSupply;\\n\\t\\tbeforeWithdraw(underlyingShare, 0);\\n\\t\\tasset.safeTransfer(msg.sender, underlyingShare);\\n\\n\\t\\tuint256 l = strategyIndex.length;\\n\\n\\t\\t// redeem proportional share of each strategy\\n\\t\\tfor (uint256 i; i < l; ++i) {\\n\\t\\t\\tERC20 stratToken = ERC20(strategyIndex[i]);\\n\\t\\t\\tuint256 balance = stratToken.balanceOf(address(this));\\n\\t\\t\\tuint256 userShares = (shares * balance) / _totalSupply;\\n\\t\\t\\tif (userShares == 0) continue;\\n\\t\\t\\tstratToken.safeTransfer(msg.sender, userShares);\\n\\t\\t}\\n\\t}\\n\\n\\t/// gets accurate strategy holdings denominated in asset\\n\\tfunction _getStrategyHoldings() internal returns (uint256 tvl) {\\n\\t\\tuint256 l = strategyIndex.length;\\n\\t\\t/// TODO compute realistic limit for strategy array lengh to stay within gas limit\\n\\t\\tfor (uint256 i; i < l; ++i) {\\n\\t\\t\\tISCYStrategy strategy = ISCYStrategy(payable(strategyIndex[i]));\\n\\t\\t\\ttvl += strategy.getUpdatedUnderlyingBalance(address(this));\\n\\t\\t}\\n\\t}\\n\\n\\t/// returns expected tvl (used for estimate)\\n\\tfunction getTvl() public view returns (uint256 tvl) {\\n\\t\\tuint256 l = strategyIndex.length;\\n\\t\\t// there should be no untrusted strategies in this array\\n\\t\\tfor (uint256 i; i < l; ++i) {\\n\\t\\t\\tISCYStrategy strategy = ISCYStrategy(payable(strategyIndex[i]));\\n\\t\\t\\ttvl += strategy.underlyingBalance(address(this));\\n\\t\\t}\\n\\t\\ttvl += asset.balanceOf(address(this));\\n\\t}\\n\\n\\tfunction totalAssets() public view virtual override returns (uint256) {\\n\\t\\treturn floatAmnt + totalChildHoldings;\\n\\t}\\n\\n\\t/// INTERFACE UTILS\\n\\n\\t/// @dev returns accurate value used to estimate current value\\n\\tfunction estimateUnderlyingBalance(address user) external view returns (uint256) {\\n\\t\\tuint256 shares = balanceOf(user);\\n\\t\\t// value based on last harvest exchange rate\\n\\t\\tuint256 cachedValue = convertToAssets(shares);\\n\\t\\t// valued based on current tvl\\n\\t\\tuint256 currentValue = sharesToUnderlying(shares);\\n\\t\\treturn cachedValue > currentValue ? currentValue : cachedValue;\\n\\t}\\n\\n\\t/// @dev current exchange rate (different from previewDeposit rate)\\n\\t/// this should be used for estiamtes of withdrawals\\n\\tfunction sharesToUnderlying(uint256 shares) public view returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\t\\treturn supply == 0 ? shares : shares.mulDivDown(getTvl(), supply);\\n\\t}\\n\\n\\t/// @dev current exchange rate (different from previewDeposit / previewWithdrawal rate)\\n\\t/// this should be used estimate of deposit fee\\n\\tfunction underlyingToShares(uint256 underlyingAmnt) public view returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\t\\treturn supply == 0 ? underlyingAmnt : underlyingAmnt.mulDivDown(supply, getTvl());\\n\\t}\\n\\n\\t/*/////////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\tCrossChain functionality\\n\\t/////////////////////////////////////////////////////////*/\\n\\n\\tfunction _handleMessage(MessageType _type, Message calldata _msg) internal override {\\n\\t\\tif (_type == MessageType.DEPOSIT) _receiveDeposit(_msg);\\n\\t\\telse if (_type == MessageType.HARVEST) _receiveHarvest(_msg);\\n\\t\\telse if (_type == MessageType.WITHDRAW) _receiveWithdraw(_msg);\\n\\t\\telse if (_type == MessageType.EMERGENCYWITHDRAW) _receiveEmergencyWithdraw(_msg);\\n\\t\\telse revert NotImplemented();\\n\\t}\\n\\n\\tfunction _receiveDeposit(Message calldata _msg) internal {\\n\\t\\tdepositQueue.push(_msg);\\n\\t}\\n\\n\\tfunction _receiveWithdraw(Message calldata _msg) internal {\\n\\t\\tif (withdrawLedger[_msg.sender].value == 0) bridgeQueue.push(_msg.sender);\\n\\n\\t\\t/// value here is the fraction of the shares owned by the vault\\n\\t\\t/// since the xVault doesn't know how many shares it holds\\n\\t\\tuint256 xVaultShares = balanceOf(_msg.sender);\\n\\t\\tuint256 shares = (_msg.value * xVaultShares) / 1e18;\\n\\t\\trequestRedeem(shares, _msg.sender);\\n\\t}\\n\\n\\tfunction _receiveEmergencyWithdraw(Message calldata _msg) internal {\\n\\t\\tuint256 transferShares = (_msg.value * balanceOf(_msg.sender)) / 1e18;\\n\\n\\t\\t_transfer(_msg.sender, _msg.client, transferShares);\\n\\t\\temit EmergencyWithdraw(_msg.sender, _msg.client, transferShares);\\n\\t}\\n\\n\\t// TODO should it trigger harvest first?\\n\\tfunction _receiveHarvest(Message calldata _msg) internal {\\n\\t\\tuint256 xVaultUnderlyingBalance = underlyingBalance(_msg.sender);\\n\\n\\t\\tVault memory vault = addrBook[_msg.sender];\\n\\t\\t_sendMessage(\\n\\t\\t\\t_msg.sender,\\n\\t\\t\\tvault,\\n\\t\\t\\tMessage(xVaultUnderlyingBalance, address(this), address(0), chainId),\\n\\t\\t\\tMessageType.HARVEST\\n\\t\\t);\\n\\t}\\n\\n\\tfunction processIncomingXFunds() external override onlyRole(MANAGER) {\\n\\t\\tuint256 length = depositQueue.length;\\n\\t\\tuint256 totalDeposit = 0;\\n\\t\\tfor (uint256 i = length; i > 0; ) {\\n\\t\\t\\tMessage memory _msg = depositQueue[i - 1];\\n\\t\\t\\tdepositQueue.pop();\\n\\n\\t\\t\\tuint256 shares = previewDeposit(_msg.value);\\n\\t\\t\\t// lock minimum liquidity if totalSupply is 0\\n\\t\\t\\t// if i > 0 we can skip this\\n\\t\\t\\tif (i == 0 && totalSupply() == 0) {\\n\\t\\t\\t\\tif (MIN_LIQUIDITY > shares) revert MinLiquidity();\\n\\t\\t\\t\\tshares -= MIN_LIQUIDITY;\\n\\t\\t\\t\\t_mint(address(1), MIN_LIQUIDITY);\\n\\t\\t\\t}\\n\\t\\t\\t_mint(_msg.sender, shares);\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ttotalDeposit += _msg.value;\\n\\t\\t\\t\\ti--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Should account for fees paid in tokens for using bridge\\n\\t\\t// Also, if a value hasn't arrived manager will not be able to register any value\\n\\t\\tif (totalDeposit > (asset.balanceOf(address(this)) - floatAmnt - pendingWithdraw))\\n\\t\\t\\trevert MissingIncomingXFunds();\\n\\n\\t\\t// update floatAmnt with deposited funds\\n\\t\\tafterDeposit(totalDeposit, 0);\\n\\t\\t/// TODO should we add more params here?\\n\\t\\temit RegisterIncomingFunds(totalDeposit);\\n\\t}\\n\\n\\t// Problem -> bridgeQueue has an order and request array has to follow this order\\n\\t// Maybe change how withdraws are saved?\\n\\tfunction processXWithdraw(Request[] calldata requests) external onlyRole(MANAGER) {\\n\\t\\tuint256 length = bridgeQueue.length;\\n\\n\\t\\tuint256 total = 0;\\n\\t\\tfor (uint256 i = length - 1; i > 0; ) {\\n\\t\\t\\taddress vAddr = bridgeQueue[i];\\n\\n\\t\\t\\tif (requests[i].vaultAddr != vAddr) revert VaultAddressNotMatch();\\n\\n\\t\\t\\t// this returns the underlying amount the vault is withdrawing\\n\\t\\t\\tuint256 amountOut = _xRedeem(vAddr);\\n\\t\\t\\tbridgeQueue.pop();\\n\\n\\t\\t\\tVault memory vault = addrBook[vAddr];\\n\\t\\t\\t_sendMessage(\\n\\t\\t\\t\\tvAddr,\\n\\t\\t\\t\\tvault,\\n\\t\\t\\t\\tMessage(amountOut, address(this), address(0), chainId),\\n\\t\\t\\t\\tMessageType.WITHDRAW\\n\\t\\t\\t);\\n\\n\\t\\t\\t_sendTokens(\\n\\t\\t\\t\\tunderlying(),\\n\\t\\t\\t\\trequests[i].allowanceTarget,\\n\\t\\t\\t\\trequests[i].registry,\\n\\t\\t\\t\\tvAddr,\\n\\t\\t\\t\\tamountOut,\\n\\t\\t\\t\\taddrBook[vAddr].chainId,\\n\\t\\t\\t\\trequests[i].txData\\n\\t\\t\\t);\\n\\n\\t\\t\\temit BridgeAsset(chainId, addrBook[vAddr].chainId, amountOut);\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ttotal += amountOut;\\n\\t\\t\\t\\ti--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tbeforeWithdraw(total, 0);\\n\\t}\\n\\n\\terror VaultAddressNotMatch();\\n\\tevent AddStrategy(address indexed strategy);\\n\\tevent RemoveStrategy(address indexed strategy);\\n\\tevent DepositIntoStrategy(address caller, address strategy, uint256 amount);\\n\\tevent WithdrawFromStrategy(address caller, address strategy, uint256 amount);\\n}\\n\",\"keccak256\":\"0x1ace722aa2fc2f7a2fd11c08db8527b016af059525bb65c1c3bb25017a9acd31\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c060405261ffff461660a0523480156200001957600080fd5b5060405162005440380380620054408339810160408190526200003c916200051c565b8151600180546001600160a01b0319166001600160a01b0390921691821790556040805160008152602081019290925286918691869183918391879189917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0910160405180910390a18051620000b590600090620002aa565b600154620000dd9060008051602062005420833981519152906001600160a01b0316620002aa565b62000102600080516020620054208339815191528260200151620002aa60201b60201c565b805162000120906000805160206200540083398151915290620002aa565b62000145600080516020620054008339815191528260200151620002aa60201b60201c565b6200016a600080516020620054008339815191528260400151620002aa60201b60201c565b6200019460008051602062005400833981519152600080516020620054208339815191526200034b565b508051600580546001600160a01b0319166001600160a01b0390921691821790556020820151600355604080830151600455517fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef390600090a27f8b940a95968ad5b511f89b01075446a4fe9f614f2dc5fbb9e9a6b227d6d4fd7081602001516040516200022391815260200190565b60405180910390a17fd87632b1c6ebfa21acbca0e3279b3cf6385a377cb8fda51e5b866baa6e6012ab81604001516040516200026191815260200190565b60405180910390a15060096200027883826200069f565b50600a6200028782826200069f565b5050506001600160a01b03909216608052505042600b55506200076b9350505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000347576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003063390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6001600160a01b0381168114620003ac57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715620003ea57620003ea620003af565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200041b576200041b620003af565b604052919050565b600082601f8301126200043557600080fd5b81516001600160401b03811115620004515762000451620003af565b602062000467601f8301601f19168201620003f0565b82815285828487010111156200047c57600080fd5b60005b838110156200049c5785810183015182820184015282016200047f565b506000928101909101919091529392505050565b600060608284031215620004c357600080fd5b604051606081016001600160401b0381118282101715620004e857620004e8620003af565b80604052508091508251620004fd8162000396565b8082525060208301516020820152604083015160408201525092915050565b60008060008060008587036101208112156200053757600080fd5b8651620005448162000396565b60208801519096506001600160401b03808211156200056257600080fd5b620005708a838b0162000423565b965060408901519150808211156200058757600080fd5b506200059689828a0162000423565b9450506060605f1982011215620005ac57600080fd5b50620005b7620003c5565b6060870151620005c78162000396565b81526080870151620005d98162000396565b602082015260a0870151620005ee8162000396565b60408201529150620006048760c08801620004b0565b90509295509295909350565b600181811c908216806200062557607f821691505b6020821081036200064657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200069a57600081815260208120601f850160051c81016020861015620006755750805b601f850160051c820191505b81811015620006965782815560010162000681565b5050505b505050565b81516001600160401b03811115620006bb57620006bb620003af565b620006d381620006cc845462000610565b846200064c565b602080601f8311600181146200070b5760008415620006f25750858301515b600019600386901b1c1916600185901b17855562000696565b600085815260208120601f198616915b828110156200073c578886015182559484019460019091019084016200071b565b50858210156200075b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051614bff6200080160003960008181610d8301528181610e040152818161174c015281816117d2015281816118c101528181611be101528181612070015281816121d00152818161264c0152818161272801528181612d8b0152612de8015260008181610c4e015281816110ba01528181611179015281816113660152818161199a0152611a320152614bff6000f3fe608060405234801561001057600080fd5b506004361061039b5760003560e01c806301e1d114146103a057806301ffc9a7146103bb57806306fdde03146103de57806307a2d13a146103f3578063095ea7b3146104065780630a28a47714610419578063107703ab1461042c57806318160ddd146104415780631b2df8501461044957806321b77d631461045e5780632257a7381461046757806323b872dd14610470578063248a9ca31461048357806325a760c2146104965780632940ec00146104b05780632f2ff15d146104b9578063313ce567146104965780633230b79b146104cc57806332efa242146104f9578063341a7b421461050c57806336568abe1461051f57806339509351146105325780633e64257514610545578063402d267d14610558578063415c49e21461056d5780634cdad5061461058057806351a72964146105935780635b9d2658146105c857806361d027b3146106125780636e553f65146106325780636f307dc31461064557806370897b231461064d57806370a0823114610660578063724c184c1461067357806373b90eac1461068857806375dd7d381461069057806379ba5097146106a35780637f566d53146106ab5780638576829e146106be57806387788782146106c75780638da5cb5b146106d057806391d14854146106e357806394bf804d146106f657806395a2251f1461070957806395d89b411461071c57806396fbebcc146107245780639908840c146107375780639c508d4a14610745578063a217fddf14610779578063a457c2d714610781578063a6f7f5d614610794578063a879f9761461079d578063a9059cbb146107fb578063aa2f892d1461080e578063b3d7f6b914610821578063b460af9414610834578063ba08765214610847578063bdca91651461085a578063be040fb014610869578063c61b603f14610871578063c63d75b614610558578063c6e6f592146108a7578063ce96cb77146108ba578063ceb68c23146108cd578063cee027f2146108e0578063d547741f146108f3578063d905777e14610906578063db2e21bc14610919578063dd62ed3e14610921578063e30c397814610934578063e56e56db14610947578063e6a296661461094f578063eacff5ba14610957578063ef8b30f71461096a578063f0f442601461097d578063f2d6f5a814610990578063f2fde38b146109a3578063f6316e7e146109b6578063fc6b1ebe146109be578063fe56e232146109c7578063fef5745a146109da575b600080fd5b6103a86109ed565b6040519081526020015b60405180910390f35b6103ce6103c9366004614037565b610a04565b60405190151581526020016103b2565b6103e6610a3b565b6040516103b29190614085565b6103a86104013660046140b8565b610acd565b6103ce6104143660046140e6565b610b01565b6103a86104273660046140b8565b610b19565b61043f61043a366004614112565b610b40565b005b6103a8610c06565b6103a8600080516020614b2a83398151915281565b6103a86103e881565b6103a8600b5481565b6103ce61047e366004614142565b610c11565b6103a86104913660046140b8565b610c35565b61049e610c4a565b60405160ff90911681526020016103b2565b6103a8600c5481565b61043f6104c7366004614112565b610cce565b6103ce6104da366004614183565b6001600160a01b03166000908152600d6020526040902054600b541190565b61043f6105073660046141a0565b610cef565b61043f61051a366004614222565b610e42565b61043f61052d366004614112565b610ed2565b6103ce6105403660046140e6565b610f50565b6103a8610553366004614183565b610f72565b6103a8610566366004614183565b5060001990565b61043f61057b366004614260565b610f89565b6103a861058e3660046140b8565b61102f565b6105a66105a1366004614183565b61103a565b60408051825181526020808401519082015291810151908201526060016103b2565b6105f76105d6366004614183565b600d6020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016103b2565b600554610625906001600160a01b031681565b6040516103b291906142ab565b6103a8610640366004614112565b6110a0565b610625611177565b61043f61065b3660046140b8565b61119b565b6103a861066e366004614183565b61122a565b6103a8600080516020614b4a83398151915281565b61043f611245565b61043f61069e3660046142bf565b611452565b61043f611540565b61043f6106b93660046141a0565b61168b565b6103a860115481565b6103a860035481565b600154610625906001600160a01b031681565b6103ce6106f1366004614112565b611957565b6103a8610704366004614112565b611980565b6103a8610717366004614183565b611a0a565b6103e6611afb565b61043f6107323660046142e1565b611b0a565b6103a866b1a2bc2ec5000081565b610625610753366004614319565b600f6020908152600092835260408084209091529082529020546001600160a01b031681565b6103a8600081565b6103ce61078f3660046140e6565b611cb1565b6103a860045481565b6107d86107ab366004614183565b600e6020526000908152604090205461ffff8082169162010000810490911690600160201b900460ff1683565b6040805161ffff94851681529390921660208401521515908201526060016103b2565b6103ce6108093660046140e6565b611d2c565b61043f61081c3660046140b8565b611d3a565b6103a861082f3660046140b8565b611d47565b6103a8610842366004614347565b611d6d565b6103a8610855366004614347565b611d88565b6103a86703782dace9d9000081565b6103a8611d9b565b6013546014546015546016546108879392919084565b6040805194855260208501939093529183015260608201526080016103b2565b6103a86108b53660046140b8565b611da6565b6103a86108c8366004614183565b611dcd565b61043f6108db366004614183565b611ddb565b61043f6108ee36600461436e565b611f49565b61043f610901366004614112565b611fd5565b6103a8610914366004614183565b611ff1565b61043f611ffc565b6103a861092f3660046143ca565b612207565b600254610625906001600160a01b031681565b6103a8612232565b61043f61229a565b6103a86109653660046140b8565b61233b565b6103a86109783660046140b8565b61238d565b61043f61098b366004614183565b612398565b61043f61099e3660046143f8565b61240c565b61043f6109b1366004614183565b61250d565b61043f61258b565b6103a860105481565b61043f6109d53660046140b8565b61279e565b61043f6109e8366004614416565b612825565b60006010546011546109ff91906144b0565b905090565b60006001600160e01b03198216637965db0b60e01b1480610a3557506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060098054610a4a906144c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a76906144c3565b8015610ac35780601f10610a9857610100808354040283529160200191610ac3565b820191906000526020600020905b815481529060010190602001808311610aa657829003601f168201915b5050505050905090565b600080610ad8610c06565b90508015610af857610af3610aeb6109ed565b8490836128c3565b610afa565b825b9392505050565b600033610b0f8185856128e2565b5060019392505050565b600080610b24610c06565b90508015610af857610af381610b386109ed565b8591906129fe565b336001600160a01b03821614610b5b57610b5b813384612a2c565b610b66813084612aa0565b336000908152600d6020526040812042815560018101805491928592610b8d9084906144b0565b9091555060009050610b9e84610acd565b905080826002018190555080600c6000828254610bbb91906144b0565b90915550506040518481526001600160a01b0384169033907ff601bbafcf0d793cce0a8802057c8783aa5946889f76bd9dd47492217f59af1e9060200160405180910390a350505050565b60006109ff60085490565b600033610c1f858285612a2c565b610c2a858585612aa0565b506001949350505050565b60009081526020819052604090206001015490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff91906144fd565b610cd782610c35565b610ce081612c5c565b610cea8383612c66565b505050565b600080516020614b2a833981519152610d0781612c5c565b60005b82811015610e3c576000848483818110610d2657610d26614520565b9050602002810190610d389190614536565b610d46906020810190614183565b90506000858584818110610d5c57610d5c614520565b9050602002810190610d6e9190614536565b6020013590506000610d7f83612cea565b90507f000000000000000000000000000000000000000000000000000000000000000061ffff16816000015161ffff1603610dcd5760405163164e32df60e01b815260040160405180910390fd5b610e3183826040518060800160405280868152602001306001600160a01b0316815260200160006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000061ffff168152506002612d6d565b505050600101610d0a565b50505050565b6001546001600160a01b03163314610e755760405162461bcd60e51b8152600401610e6c90614556565b60405180910390fd5b6001600160a01b0382166000818152600e6020526040908190208054841515600160201b0260ff60201b1990911617905551600080516020614b8a83398151915290610ec690841515815260200190565b60405180910390a25050565b6001600160a01b0381163314610f425760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610e6c565b610f4c8282612f15565b5050565b600033610b0f818585610f638383612207565b610f6d91906144b0565b6128e2565b600080610f7e8361122a565b9050610afa81610acd565b6001546001600160a01b03163314610fb35760405162461bcd60e51b8152600401610e6c90614556565b61ffff8381166000818152600f602090815260408083209487168084529482529182902080546001600160a01b0319166001600160a01b03871690811790915582519485529084015290917f0a24add6dc7dd296687ea41961d576aa7afe43986fac38191ce40bb4e7f2bf5b91015b60405180910390a2505050565b6000610a3582610acd565b61105e60405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03166000908152600d6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b60006110ab8361238d565b90506110e26001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612f7a565b6110ea610c06565b60000361112f57806103e8111561111457604051630131cd7b60e51b815260040160405180910390fd5b6111206103e88261457a565b905061112f60016103e8612fd4565b6111398282612fd4565b60408051848152602081018390526001600160a01b038416913391600080516020614baa833981519152910160405180910390a3610a3583826130a1565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001546001600160a01b031633146111c55760405162461bcd60e51b8152600401610e6c90614556565b6703782dace9d900008111156111ee57604051635b94d8b160e01b815260040160405180910390fd5b60038190556040518181527f8b940a95968ad5b511f89b01075446a4fe9f614f2dc5fbb9e9a6b227d6d4fd70906020015b60405180910390a150565b6001600160a01b031660009081526006602052604090205490565b600080516020614b2a83398151915261125d81612c5c565b6017546000815b8015611348576000601761127960018461457a565b8154811061128957611289614520565b6000918252602091829020604080516080810182526003939093029091018054835260018101546001600160a01b03908116948401949094526002015492831690820152600160a01b90910461ffff1660608201526017805491925090806112f3576112f361458d565b6000828152602081206003600019909301928302019081556001810180546001600160a01b031916905560020180546001600160b01b03191690559055805161133c90846144b0565b92505060001901611264565b50600c546011546040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061139b9030906004016142ab565b602060405180830381865afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc91906145a3565b6113e6919061457a565b6113f0919061457a565b811015611410576040516337b481d960e01b815260040160405180910390fd5b611419816130bc565b6040518181527f4f5745f9a8198fa6e603922d263d7e2a62c3ac2ea9791f1f4679e40bdad52edd906020015b60405180910390a1505050565b600080516020614b2a83398151915261146a81612c5c565b60408051608081018252601354815260145460208201526015549181018290526016546060820152906000036114b357604051630951089360e21b815260040160405180910390fd5b8060400151816060015110156114dc576040516360a7f98960e01b815260040160405180910390fd5b602081015181516000916114ef916144b0565b90506114fc8582866130df565b61150581613124565b505060408051608081018252600080825260208201819052918101829052606001819052601381905560148190556015819055601655505050565b6002546001600160a01b0316331461158f5760405162461bcd60e51b815260206004820152601260248201527127a7262cafa822a72224a723afa7aba722a960711b6044820152606401610e6c565b600180546002546001600160a01b031982166001600160a01b0391821617909255166115bc600082612f15565b6115d4600080516020614b4a83398151915282612f15565b6115ec600080516020614b2a83398151915282612f15565b600154611604906000906001600160a01b0316612c66565b60015461162990600080516020614b4a833981519152906001600160a01b0316612c66565b60015461164e90600080516020614b2a833981519152906001600160a01b0316612c66565b6001546040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09161121f9184916001600160a01b0316906145bc565b600080516020614b2a8339815191526116a381612c5c565b6000805b8381101561192e5760008585838181106116c3576116c3614520565b90506020028101906116d59190614536565b6116e3906020810190614183565b905060008686848181106116f9576116f9614520565b905060200281019061170b9190614536565b602001359050600087878581811061172557611725614520565b90506020028101906117379190614536565b604001359050600061174884612cea565b90507f000000000000000000000000000000000000000000000000000000000000000061ffff16816000015161ffff16036117965760405163164e32df60e01b815260040160405180910390fd5b6117a083876144b0565b95506117ff8482604051806080016040528086886117be919061457a565b81523060208201526000604082015261ffff7f0000000000000000000000000000000000000000000000000000000000000000166060909101526001612d6d565b6118b661180a611177565b8a8a8881811061181c5761181c614520565b905060200281019061182e9190614536565b61183f906080810190606001614183565b8b8b8981811061185157611851614520565b90506020028101906118639190614536565b6118749060a0810190608001614183565b8787866000015161ffff168f8f8d81811061189157611891614520565b90506020028101906118a39190614536565b6118b19060a08101906145d6565b6132ce565b80516040805161ffff7f000000000000000000000000000000000000000000000000000000000000000081168252909216602083015281018490527f8bdaf3de28c95336795fcfb09634aa6ee90e0ba358711340d92566bc6e3786269060600160405180910390a15050600190920191506116a79050565b5061193a816000613428565b806010600082825461194c91906144b0565b909155505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061198b83611d47565b90506119c26001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612f7a565b6119cc8284612fd4565b60408051828152602081018590526001600160a01b038416913391600080516020614baa833981519152910160405180910390a3610a3581846130a1565b600080611a1633613476565b60405163a9059cbb60e01b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90611a699086908690600401614623565b6020604051808303816000875af1158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aac919061463c565b50604080518381526020810183905233916001600160a01b0386169183917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a450919050565b6060600a8054610a4a906144c3565b6000600e81611b1f6040860160208701614183565b6001600160a01b0316815260208082019290925260409081016000208151606081018352905461ffff80821683526201000082041693820193909352600160201b90920460ff161580159183019190915290915080611b965750805161ffff16611b8f6080850160608601614659565b61ffff1614155b15611bc557611bab6040840160208501614183565b6040516368692cbb60e11b8152600401610e6c91906142ab565b60208181015161ffff9081166000908152600f835260408082207f00000000000000000000000000000000000000000000000000000000000000009093168252919092529020546001600160a01b03163314611c3657336040516306e02ebd60e11b8152600401610e6c91906142ab565b611c40828461353e565b611c506080840160608501614659565b61ffff16611c646040850160208601614183565b6001600160a01b03167f649c8deb433503a93e61cbf3bd7afd938e936ce85fcf81928ab240068c6643a585600001358533604051611ca4939291906146ae565b60405180910390a3505050565b60003381611cbf8286612207565b905083811015611d1f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610e6c565b610c2a82868684036128e2565b600033610b0f818585612aa0565b611d448133610b40565b50565b600080611d52610c06565b90508015610af857610af3611d656109ed565b8490836129fe565b600060405163d623472560e01b815260040160405180910390fd5b6000611d9383611a0a565b949350505050565b60006109ff33611a0a565b600080611db1610c06565b90508015610af857610af381611dc56109ed565b8591906128c3565b6000610a356104018361122a565b6001546001600160a01b03163314611e055760405162461bcd60e51b8152600401610e6c90614556565b6001600160a01b0381166000908152600e60205260408120805460ff60201b19169055601254905b81811015610cea57826001600160a01b031660128281548110611e5257611e52614520565b6000918252602090912001546001600160a01b031603611f41576012611e7960018461457a565b81548110611e8957611e89614520565b600091825260209091200154601280546001600160a01b039092169183908110611eb557611eb5614520565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506012805480611ef457611ef461458d565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556040519182526001600160a01b03851691600080516020614b8a8339815191529101611022565b600101611e2d565b6001546001600160a01b03163314611f735760405162461bcd60e51b8152600401610e6c90614556565b611f7f8484848461359b565b5050601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440180546001600160a01b0319166001600160a01b03939093169290921790915550565b611fde82610c35565b611fe781612c5c565b610cea8383612f15565b6000610a358261122a565b60006120073361122a565b905061201333826136e2565b6000612027612020610c06565b839061381e565b60125490915060005b81811015610e3c5760006012828154811061204d5761204d614520565b60009182526020822001546001600160a01b0316915061206c82612cea565b90507f000000000000000000000000000000000000000000000000000000000000000061ffff16816000015161ffff160361219a576040516370a0823160e01b8152829060009061211e906001600160a01b038416906370a08231906120d69030906004016142ab565b602060405180830381865afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211791906145a3565b8890613833565b60405163a9059cbb60e01b81529091506001600160a01b0383169063a9059cbb9061214f9033908590600401614623565b6020604051808303816000875af115801561216e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612192919061463c565b5050506121fd565b6121fd82826040518060800160405280898152602001306001600160a01b03168152602001336001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000061ffff168152506003612d6d565b5050600101612030565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b336000908152600d60205260408120600181015460028201548361225583610acd565b90508181101561226a57600094505050505090565b81612275818361457a565b61228790670de0b6b3a76400006146db565b61229191906146fa565b94505050505090565b336000908152600d602052604081206001810154600282015491929091906122c183610acd565b90506000846002018190555081600c60008282546122df919061457a565b9091555050818110156122f757610e3c303385612aa0565b60008161230484866146db565b61230e91906146fa565b9050600061231c828661457a565b9050612329303384612aa0565b61233330826136e2565b505050505050565b600080612346610c06565b90506000836123536109ed565b61235d919061457a565b90508060000361236f57509192915050565b8115612385576123808483836128c3565b611d93565b509192915050565b6000610a3582611da6565b6001546001600160a01b031633146123c25760405162461bcd60e51b8152600401610e6c90614556565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef390600090a250565b6001546001600160a01b031633146124365760405162461bcd60e51b8152600401610e6c90614556565b6001600160a01b0382166000908152600e602090815260408083208151606081018352905461ffff80821680845262010000830490911694830194909452600160201b900460ff1615159181019190915291036124a85782604051634ae8435d60e01b8152600401610e6c91906142ab565b6001600160a01b0383166000818152600e6020908152604091829020805463ffff000019166201000061ffff88169081029190911790915591519182527f1f97e73f29802f056373306e9e3198b79119f446f1b9595d0752ebc2a9146f2e9101611022565b6001546001600160a01b031633146125375760405162461bcd60e51b8152600401610e6c90614556565b600280546001600160a01b0319166001600160a01b038381169182179092556001546040517fb150023a879fd806e3599b6ca8ee3b60f0e360ab3846d128d67ebce1a391639a9361121f93921691906145bc565b600080516020614b2a8339815191526125a381612c5c565b601554600090156125c75760405163835eaa8f60e01b815260040160405180910390fd5b6012546000805b82811015612766576000601282815481106125eb576125eb614520565b6000918252602080832091909101546001600160a01b0316808352600e82526040928390208351606081018552905461ffff808216808452620100008304821695840195909552600160201b90910460ff16151594820194909452909350917f00000000000000000000000000000000000000000000000000000000000000001690036126f057604051633e64257560e01b81526001600160a01b03831690633e6425759061269e9030906004016142ab565b602060405180830381865afa1580156126bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126df91906145a3565b6126e990876144b0565b955061275c565b6127558282604051806080016040528060008152602001306001600160a01b0316815260200160006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000061ffff168152506004612d6d565b6001840193505b50506001016125ce565b506040805160808101825284815260006020820181905291810183905260600181905260139390935560148390556015555060165550565b6001546001600160a01b031633146127c85760405162461bcd60e51b8152600401610e6c90614556565b66b1a2bc2ec500008111156127f057604051635b94d8b160e01b815260040160405180910390fd5b60048190556040518181527fd87632b1c6ebfa21acbca0e3279b3cf6385a377cb8fda51e5b866baa6e6012ab9060200161121f565b6001546001600160a01b0316331461284f5760405162461bcd60e51b8152600401610e6c90614556565b61288f8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061384892505050565b507fa9f1cb7eee5fc621e043c1ef431febb0f901998a6c0cbdf70147b0fe4d9f5a6a8383836040516114459392919061471c565b8282028115158415858304851417166128db57600080fd5b0492915050565b6001600160a01b0383166129445760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610e6c565b6001600160a01b0382166129a55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610e6c565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101611ca4565b828202811515841585830485141716612a1657600080fd5b6001826001830304018115150290509392505050565b6000612a388484612207565b90506000198114610e3c5781811015612a935760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610e6c565b610e3c84848484036128e2565b6001600160a01b038316612b045760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610e6c565b6001600160a01b038216612b665760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610e6c565b6001600160a01b03831660009081526006602052604090205481811015612bde5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610e6c565b6001600160a01b03808516600090815260066020526040808220858503905591851681529081208054849290612c159084906144b0565b92505081905550826001600160a01b0316846001600160a01b0316600080516020614b6a83398151915284604051612c4f91815260200190565b60405180910390a3610e3c565b611d44813361388a565b612c708282611957565b610f4c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055612ca63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6040805160608082018352600080835260208084018290528385018290526001600160a01b0386168252600e815290849020845192830185525461ffff80821684526201000082041691830191909152600160201b900460ff1615159281018390529091610a3557826040516318ef3f8360e01b8152600401610e6c91906142ab565b6020808401805161ffff9081166000908152600f80855260408083207f0000000000000000000000000000000000000000000000000000000000000000851684528652808320549451841683529085528082208851909316825291909352909120546001600160a01b03918216911681612e225784602001517f00000000000000000000000000000000000000000000000000000000000000006040516328a4ac9160e11b8152600401610e6c92919061475c565b6001600160a01b038116612e5257602085015185516040516328a4ac9160e11b8152610e6c92919060040161475c565b8451604051630e510a7760e41b81526001600160a01b0384169163e510a77091612e899188918b9187918a91903390600401614771565b600060405180830381600087803b158015612ea357600080fd5b505af1158015612eb7573d6000803e3d6000fd5b50505050846000015161ffff16866001600160a01b03167ff3617f26552d0e4bd64927d1a7fe0d18f2278f99e2446ad6ac8f0a73c38840d886600001518686604051612f05939291906146ae565b60405180910390a3505050505050565b612f1f8282611957565b15610f4c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610e3c9085906138ee565b6001600160a01b03821661302a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610e6c565b806008600082825461303c91906144b0565b90915550506001600160a01b038216600090815260066020526040812080548392906130699084906144b0565b90915550506040518181526001600160a01b03831690600090600080516020614b6a8339815191529060200160405180910390a35050565b81601160008282546130b391906144b0565b90915550505050565b80601060008282546130ce919061457a565b90915550611d4490508160006130a1565b60008284116130f7576130f2848461457a565b613101565b613101838561457a565b905081811115610e3c57604051638199f5f360e01b815260040160405180910390fd5b600c5460115410156131495760405163078cc1fb60e01b815260040160405180910390fd5b6000601054821161315b576000613168565b601054613168908361457a565b601154909150429060009061317d90856144b0565b60108590559050600083156131b257670de0b6b3a7640000600354856131a391906146db565b6131ad91906146fa565b6131b5565b60005b90506000600454600014613210576301e13380670de0b6b3a7640000600b54866131df919061457a565b856004546131ed91906146db565b6131f791906146db565b61320191906146fa565b61320b91906146fa565b613213565b60005b9050600061322182846144b0565b90506000811561326157613248613236610c06565b613240848861457a565b8491906128c3565b600554909150613261906001600160a01b031682612fd4565b600554604080518981526020810187905290810185905260608101839052608081018790526001600160a01b03909116907feaedd1267621f4a8ee97011faf0e67800ad3063714bd179f078c980bb9a3fa3d9060a00160405180910390a2505050600b9290925550505050565b600080516020614b2a8339815191526132e681612c5c565b61332a83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508d91508a90506139c0565b60405163095ea7b360e01b81526001600160a01b038a169063095ea7b390613358908b908990600401614623565b6020604051808303816000875af1158015613377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339b919061463c565b506000876001600160a01b031684846040516133b89291906147ec565b6000604051808303816000865af19150503d80600081146133f5576040519150601f19603f3d011682016040523d82523d6000602084013e6133fa565b606091505b505090508061341c5760405163e0fec00360e01b815260040160405180910390fd5b50505050505050505050565b8160115410806134465750600c5482601154613444919061457a565b105b156134645760405163078cc1fb60e01b815260040160405180910390fd5b81601160008282546130b3919061457a565b6001600160a01b0381166000908152600d60205260408120600281015482919082036134b557604051631f2a200560e01b815260040160405180910390fd5b600b548154106134d857604051634a44555360e11b815260040160405180910390fd5b6001810154600282015490925060006134f084610acd565b90508181106134ff5781613501565b805b945081600c6000828254613515919061457a565b9091555061352590508585613428565b6000600284015561353630856136e2565b505050915091565b600282600481111561355257613552614676565b0361356057610f4c81613ade565b600482600481111561357457613574614676565b0361358257610f4c81613b1f565b60405163d623472560e01b815260040160405180910390fd5b6001546001600160a01b031633146135c55760405162461bcd60e51b8152600401610e6c90614556565b6001600160a01b0384166000908152600e60209081526040918290208251606081018452905461ffff80821683526201000082041692820192909252600160201b90910460ff16158015928201929092529061363457604051630cb3e97f60e31b815260040160405180910390fd5b6040805160608101825261ffff86811680835286821660208085019182528715158587019081526001600160a01b038c166000818152600e845288902096518754945192511515600160201b0260ff60201b19938816620100000263ffffffff199096169190971617939093171693909317909355925192835290917fdfdecea9ea3fba2ae2104af96f9be11589a507814dfd462dadc83c581da372b0910160405180910390a25050505050565b6001600160a01b0382166137425760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610e6c565b6001600160a01b038216600090815260066020526040902054818110156137b65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610e6c565b6001600160a01b03831660009081526006602052604081208383039055600880548492906137e590849061457a565b90915550506040518281526000906001600160a01b03851690600080516020614b6a8339815191529060200160405180910390a3505050565b6000610afa83670de0b6b3a7640000846128c3565b6000610afa8383670de0b6b3a76400006128c3565b6060610afa83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250613b58565b6138948282611957565b610f4c576138ac816001600160a01b03166014613b67565b6138b7836020613b67565b6040516020016138c89291906147fc565b60408051601f198184030181529082905262461bcd60e51b8252610e6c91600401614085565b6000613943826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613b589092919063ffffffff16565b805190915015610cea5780806020019051810190613961919061463c565b610cea5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e6c565b6139c8613fb1565b6139d185613d02565b905083816020015114613a185760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9259608a1b6044820152606401610e6c565b816001600160a01b031681600001516001600160a01b031614613a785760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964207265636569766572206164647265737360401b6044820152606401610e6c565b826001600160a01b03168160800151604001516001600160a01b031614613ad75760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b21034b7383aba103a37b5b2b760691b6044820152606401610e6c565b5050505050565b6017805460018101825560009190915281906003027fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1501610cea828261488b565b6014805482359190600090613b359084906144b0565b90915550506016805460019190600090613b509084906144b0565b909155505050565b6060611d938484600085613d3a565b60606000613b768360026146db565b613b819060026144b0565b6001600160401b03811115613b9857613b986148f4565b6040519080825280601f01601f191660200182016040528015613bc2576020820181803683370190505b509050600360fc1b81600081518110613bdd57613bdd614520565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613c0c57613c0c614520565b60200101906001600160f81b031916908160001a9053506000613c308460026146db565b613c3b9060016144b0565b90505b6001811115613cb3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613c6f57613c6f614520565b1a60f81b828281518110613c8557613c85614520565b60200101906001600160f81b031916908160001a90535060049490941c93613cac8161490a565b9050613c3e565b508315610afa5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610e6c565b613d0a613fb1565b6000613d24836004808651613d1f919061457a565b613e6b565b905080806020019051810190610afa9190614a5e565b606082471015613d9b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610e6c565b6001600160a01b0385163b613df25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e6c565b600080866001600160a01b03168587604051613e0e9190614b17565b60006040518083038185875af1925050503d8060008114613e4b576040519150601f19603f3d011682016040523d82523d6000602084013e613e50565b606091505b5091509150613e60828286613f78565b979650505050505050565b606081613e7981601f6144b0565b1015613eb85760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610e6c565b613ec282846144b0565b84511015613f065760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610e6c565b606082158015613f255760405191506000825260208201604052613f6f565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613f5e578051835260209283019201613f46565b5050858452601f01601f1916604052505b50949350505050565b60608315613f87575081610afa565b825115613f975782518084602001fd5b8160405162461bcd60e51b8152600401610e6c9190614085565b6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200161400e6040518060800160405280600081526020016000815260200160006001600160a01b03168152602001606081525090565b815260408051608081018252600080825260208281018290529282015260608082015291015290565b60006020828403121561404957600080fd5b81356001600160e01b031981168114610afa57600080fd5b60005b8381101561407c578181015183820152602001614064565b50506000910152565b60208152600082518060208401526140a4816040850160208701614061565b601f01601f19169190910160400192915050565b6000602082840312156140ca57600080fd5b5035919050565b6001600160a01b0381168114611d4457600080fd5b600080604083850312156140f957600080fd5b8235614104816140d1565b946020939093013593505050565b6000806040838503121561412557600080fd5b823591506020830135614137816140d1565b809150509250929050565b60008060006060848603121561415757600080fd5b8335614162816140d1565b92506020840135614172816140d1565b929592945050506040919091013590565b60006020828403121561419557600080fd5b8135610afa816140d1565b600080602083850312156141b357600080fd5b82356001600160401b03808211156141ca57600080fd5b818501915085601f8301126141de57600080fd5b8135818111156141ed57600080fd5b8660208260051b850101111561420257600080fd5b60209290920196919550909350505050565b8015158114611d4457600080fd5b6000806040838503121561423557600080fd5b8235614240816140d1565b9150602083013561413781614214565b61ffff81168114611d4457600080fd5b60008060006060848603121561427557600080fd5b833561428081614250565b9250602084013561429081614250565b915060408401356142a0816140d1565b809150509250925092565b6001600160a01b0391909116815260200190565b600080604083850312156142d257600080fd5b50508035926020909101359150565b60008082840360a08112156142f557600080fd5b608081121561430357600080fd5b5082915060808301356005811061413757600080fd5b6000806040838503121561432c57600080fd5b823561433781614250565b9150602083013561413781614250565b60008060006060848603121561435c57600080fd5b833592506020840135614290816140d1565b6000806000806080858703121561438457600080fd5b843561438f816140d1565b9350602085013561439f81614250565b925060408501356143af81614250565b915060608501356143bf81614214565b939692955090935050565b600080604083850312156143dd57600080fd5b82356143e8816140d1565b91506020830135614137816140d1565b6000806040838503121561440b57600080fd5b8235614337816140d1565b60008060006040848603121561442b57600080fd5b8335614436816140d1565b925060208401356001600160401b038082111561445257600080fd5b818601915086601f83011261446657600080fd5b81358181111561447557600080fd5b87602082850101111561448757600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a3557610a3561449a565b600181811c908216806144d757607f821691505b6020821081036144f757634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561450f57600080fd5b815160ff81168114610afa57600080fd5b634e487b7160e01b600052603260045260246000fd5b6000823560be1983360301811261454c57600080fd5b9190910192915050565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b81810381811115610a3557610a3561449a565b634e487b7160e01b600052603160045260246000fd5b6000602082840312156145b557600080fd5b5051919050565b6001600160a01b0392831681529116602082015260400190565b6000808335601e198436030181126145ed57600080fd5b8301803591506001600160401b0382111561460757600080fd5b60200191503681900382131561461c57600080fd5b9250929050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561464e57600080fd5b8151610afa81614214565b60006020828403121561466b57600080fd5b8135610afa81614250565b634e487b7160e01b600052602160045260246000fd5b600581106146aa57634e487b7160e01b600052602160045260246000fd5b9052565b838152606081016146c2602083018561468c565b6001600160a01b03929092166040919091015292915050565b60008160001904831182151516156146f5576146f561449a565b500290565b60008261471757634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b61ffff92831681529116602082015260400190565b60006101208201905087518252602088015160018060a01b0380821660208501528060408b015116604085015260608a0151915061ffff8083166060860152818a16608086015281891660a08601526147cd60c086018961468c565b80871660e0860152508085166101008501525050979650505050505050565b8183823760009101908152919050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161482e816017850160208801614061565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161485f816028840160208801614061565b01602801949350505050565b80546001600160a01b0319166001600160a01b0392909216919091179055565b81358155602082013561489d816140d1565b6148aa816001840161486b565b506002810160408301356148bd816140d1565b6148c7818361486b565b5060608301356148d681614250565b815461ffff60a01b191660a09190911b61ffff60a01b161790555050565b634e487b7160e01b600052604160045260246000fd5b6000816149195761491961449a565b506000190190565b604051608081016001600160401b0381118282101715614943576149436148f4565b60405290565b60405160a081016001600160401b0381118282101715614943576149436148f4565b604051601f8201601f191681016001600160401b0381118282101715614993576149936148f4565b604052919050565b6000608082840312156149ad57600080fd5b6149b5614921565b9050815181526020808301518183015260408301516149d3816140d1565b604083015260608301516001600160401b03808211156149f257600080fd5b818501915085601f830112614a0657600080fd5b815181811115614a1857614a186148f4565b614a2a601f8201601f1916850161496b565b91508082528684828501011115614a4057600080fd5b614a4f81858401868601614061565b50606084015250909392505050565b600060208284031215614a7057600080fd5b81516001600160401b0380821115614a8757600080fd5b9083019060a08286031215614a9b57600080fd5b614aa3614949565b8251614aae816140d1565b808252506020830151602082015260408301516040820152606083015182811115614ad857600080fd5b614ae48782860161499b565b606083015250608083015182811115614afc57600080fd5b614b088782860161499b565b60808301525095945050505050565b6000825161454c81846020870161406156feaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85e07ba75a2f56a1a2ca8551cdddfb8c998f5781c1c9ab6f8d4ae42101c0d7f1dcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7a2646970667358221220c018601e1a05baed9b84a0e62202d82b49ca252115602c0c3db6ee76ad15e32264736f6c63430008100033af290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061039b5760003560e01c806301e1d114146103a057806301ffc9a7146103bb57806306fdde03146103de57806307a2d13a146103f3578063095ea7b3146104065780630a28a47714610419578063107703ab1461042c57806318160ddd146104415780631b2df8501461044957806321b77d631461045e5780632257a7381461046757806323b872dd14610470578063248a9ca31461048357806325a760c2146104965780632940ec00146104b05780632f2ff15d146104b9578063313ce567146104965780633230b79b146104cc57806332efa242146104f9578063341a7b421461050c57806336568abe1461051f57806339509351146105325780633e64257514610545578063402d267d14610558578063415c49e21461056d5780634cdad5061461058057806351a72964146105935780635b9d2658146105c857806361d027b3146106125780636e553f65146106325780636f307dc31461064557806370897b231461064d57806370a0823114610660578063724c184c1461067357806373b90eac1461068857806375dd7d381461069057806379ba5097146106a35780637f566d53146106ab5780638576829e146106be57806387788782146106c75780638da5cb5b146106d057806391d14854146106e357806394bf804d146106f657806395a2251f1461070957806395d89b411461071c57806396fbebcc146107245780639908840c146107375780639c508d4a14610745578063a217fddf14610779578063a457c2d714610781578063a6f7f5d614610794578063a879f9761461079d578063a9059cbb146107fb578063aa2f892d1461080e578063b3d7f6b914610821578063b460af9414610834578063ba08765214610847578063bdca91651461085a578063be040fb014610869578063c61b603f14610871578063c63d75b614610558578063c6e6f592146108a7578063ce96cb77146108ba578063ceb68c23146108cd578063cee027f2146108e0578063d547741f146108f3578063d905777e14610906578063db2e21bc14610919578063dd62ed3e14610921578063e30c397814610934578063e56e56db14610947578063e6a296661461094f578063eacff5ba14610957578063ef8b30f71461096a578063f0f442601461097d578063f2d6f5a814610990578063f2fde38b146109a3578063f6316e7e146109b6578063fc6b1ebe146109be578063fe56e232146109c7578063fef5745a146109da575b600080fd5b6103a86109ed565b6040519081526020015b60405180910390f35b6103ce6103c9366004614037565b610a04565b60405190151581526020016103b2565b6103e6610a3b565b6040516103b29190614085565b6103a86104013660046140b8565b610acd565b6103ce6104143660046140e6565b610b01565b6103a86104273660046140b8565b610b19565b61043f61043a366004614112565b610b40565b005b6103a8610c06565b6103a8600080516020614b2a83398151915281565b6103a86103e881565b6103a8600b5481565b6103ce61047e366004614142565b610c11565b6103a86104913660046140b8565b610c35565b61049e610c4a565b60405160ff90911681526020016103b2565b6103a8600c5481565b61043f6104c7366004614112565b610cce565b6103ce6104da366004614183565b6001600160a01b03166000908152600d6020526040902054600b541190565b61043f6105073660046141a0565b610cef565b61043f61051a366004614222565b610e42565b61043f61052d366004614112565b610ed2565b6103ce6105403660046140e6565b610f50565b6103a8610553366004614183565b610f72565b6103a8610566366004614183565b5060001990565b61043f61057b366004614260565b610f89565b6103a861058e3660046140b8565b61102f565b6105a66105a1366004614183565b61103a565b60408051825181526020808401519082015291810151908201526060016103b2565b6105f76105d6366004614183565b600d6020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016103b2565b600554610625906001600160a01b031681565b6040516103b291906142ab565b6103a8610640366004614112565b6110a0565b610625611177565b61043f61065b3660046140b8565b61119b565b6103a861066e366004614183565b61122a565b6103a8600080516020614b4a83398151915281565b61043f611245565b61043f61069e3660046142bf565b611452565b61043f611540565b61043f6106b93660046141a0565b61168b565b6103a860115481565b6103a860035481565b600154610625906001600160a01b031681565b6103ce6106f1366004614112565b611957565b6103a8610704366004614112565b611980565b6103a8610717366004614183565b611a0a565b6103e6611afb565b61043f6107323660046142e1565b611b0a565b6103a866b1a2bc2ec5000081565b610625610753366004614319565b600f6020908152600092835260408084209091529082529020546001600160a01b031681565b6103a8600081565b6103ce61078f3660046140e6565b611cb1565b6103a860045481565b6107d86107ab366004614183565b600e6020526000908152604090205461ffff8082169162010000810490911690600160201b900460ff1683565b6040805161ffff94851681529390921660208401521515908201526060016103b2565b6103ce6108093660046140e6565b611d2c565b61043f61081c3660046140b8565b611d3a565b6103a861082f3660046140b8565b611d47565b6103a8610842366004614347565b611d6d565b6103a8610855366004614347565b611d88565b6103a86703782dace9d9000081565b6103a8611d9b565b6013546014546015546016546108879392919084565b6040805194855260208501939093529183015260608201526080016103b2565b6103a86108b53660046140b8565b611da6565b6103a86108c8366004614183565b611dcd565b61043f6108db366004614183565b611ddb565b61043f6108ee36600461436e565b611f49565b61043f610901366004614112565b611fd5565b6103a8610914366004614183565b611ff1565b61043f611ffc565b6103a861092f3660046143ca565b612207565b600254610625906001600160a01b031681565b6103a8612232565b61043f61229a565b6103a86109653660046140b8565b61233b565b6103a86109783660046140b8565b61238d565b61043f61098b366004614183565b612398565b61043f61099e3660046143f8565b61240c565b61043f6109b1366004614183565b61250d565b61043f61258b565b6103a860105481565b61043f6109d53660046140b8565b61279e565b61043f6109e8366004614416565b612825565b60006010546011546109ff91906144b0565b905090565b60006001600160e01b03198216637965db0b60e01b1480610a3557506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060098054610a4a906144c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a76906144c3565b8015610ac35780601f10610a9857610100808354040283529160200191610ac3565b820191906000526020600020905b815481529060010190602001808311610aa657829003601f168201915b5050505050905090565b600080610ad8610c06565b90508015610af857610af3610aeb6109ed565b8490836128c3565b610afa565b825b9392505050565b600033610b0f8185856128e2565b5060019392505050565b600080610b24610c06565b90508015610af857610af381610b386109ed565b8591906129fe565b336001600160a01b03821614610b5b57610b5b813384612a2c565b610b66813084612aa0565b336000908152600d6020526040812042815560018101805491928592610b8d9084906144b0565b9091555060009050610b9e84610acd565b905080826002018190555080600c6000828254610bbb91906144b0565b90915550506040518481526001600160a01b0384169033907ff601bbafcf0d793cce0a8802057c8783aa5946889f76bd9dd47492217f59af1e9060200160405180910390a350505050565b60006109ff60085490565b600033610c1f858285612a2c565b610c2a858585612aa0565b506001949350505050565b60009081526020819052604090206001015490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff91906144fd565b610cd782610c35565b610ce081612c5c565b610cea8383612c66565b505050565b600080516020614b2a833981519152610d0781612c5c565b60005b82811015610e3c576000848483818110610d2657610d26614520565b9050602002810190610d389190614536565b610d46906020810190614183565b90506000858584818110610d5c57610d5c614520565b9050602002810190610d6e9190614536565b6020013590506000610d7f83612cea565b90507f000000000000000000000000000000000000000000000000000000000000000061ffff16816000015161ffff1603610dcd5760405163164e32df60e01b815260040160405180910390fd5b610e3183826040518060800160405280868152602001306001600160a01b0316815260200160006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000061ffff168152506002612d6d565b505050600101610d0a565b50505050565b6001546001600160a01b03163314610e755760405162461bcd60e51b8152600401610e6c90614556565b60405180910390fd5b6001600160a01b0382166000818152600e6020526040908190208054841515600160201b0260ff60201b1990911617905551600080516020614b8a83398151915290610ec690841515815260200190565b60405180910390a25050565b6001600160a01b0381163314610f425760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610e6c565b610f4c8282612f15565b5050565b600033610b0f818585610f638383612207565b610f6d91906144b0565b6128e2565b600080610f7e8361122a565b9050610afa81610acd565b6001546001600160a01b03163314610fb35760405162461bcd60e51b8152600401610e6c90614556565b61ffff8381166000818152600f602090815260408083209487168084529482529182902080546001600160a01b0319166001600160a01b03871690811790915582519485529084015290917f0a24add6dc7dd296687ea41961d576aa7afe43986fac38191ce40bb4e7f2bf5b91015b60405180910390a2505050565b6000610a3582610acd565b61105e60405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03166000908152600d6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b60006110ab8361238d565b90506110e26001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612f7a565b6110ea610c06565b60000361112f57806103e8111561111457604051630131cd7b60e51b815260040160405180910390fd5b6111206103e88261457a565b905061112f60016103e8612fd4565b6111398282612fd4565b60408051848152602081018390526001600160a01b038416913391600080516020614baa833981519152910160405180910390a3610a3583826130a1565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001546001600160a01b031633146111c55760405162461bcd60e51b8152600401610e6c90614556565b6703782dace9d900008111156111ee57604051635b94d8b160e01b815260040160405180910390fd5b60038190556040518181527f8b940a95968ad5b511f89b01075446a4fe9f614f2dc5fbb9e9a6b227d6d4fd70906020015b60405180910390a150565b6001600160a01b031660009081526006602052604090205490565b600080516020614b2a83398151915261125d81612c5c565b6017546000815b8015611348576000601761127960018461457a565b8154811061128957611289614520565b6000918252602091829020604080516080810182526003939093029091018054835260018101546001600160a01b03908116948401949094526002015492831690820152600160a01b90910461ffff1660608201526017805491925090806112f3576112f361458d565b6000828152602081206003600019909301928302019081556001810180546001600160a01b031916905560020180546001600160b01b03191690559055805161133c90846144b0565b92505060001901611264565b50600c546011546040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061139b9030906004016142ab565b602060405180830381865afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc91906145a3565b6113e6919061457a565b6113f0919061457a565b811015611410576040516337b481d960e01b815260040160405180910390fd5b611419816130bc565b6040518181527f4f5745f9a8198fa6e603922d263d7e2a62c3ac2ea9791f1f4679e40bdad52edd906020015b60405180910390a1505050565b600080516020614b2a83398151915261146a81612c5c565b60408051608081018252601354815260145460208201526015549181018290526016546060820152906000036114b357604051630951089360e21b815260040160405180910390fd5b8060400151816060015110156114dc576040516360a7f98960e01b815260040160405180910390fd5b602081015181516000916114ef916144b0565b90506114fc8582866130df565b61150581613124565b505060408051608081018252600080825260208201819052918101829052606001819052601381905560148190556015819055601655505050565b6002546001600160a01b0316331461158f5760405162461bcd60e51b815260206004820152601260248201527127a7262cafa822a72224a723afa7aba722a960711b6044820152606401610e6c565b600180546002546001600160a01b031982166001600160a01b0391821617909255166115bc600082612f15565b6115d4600080516020614b4a83398151915282612f15565b6115ec600080516020614b2a83398151915282612f15565b600154611604906000906001600160a01b0316612c66565b60015461162990600080516020614b4a833981519152906001600160a01b0316612c66565b60015461164e90600080516020614b2a833981519152906001600160a01b0316612c66565b6001546040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09161121f9184916001600160a01b0316906145bc565b600080516020614b2a8339815191526116a381612c5c565b6000805b8381101561192e5760008585838181106116c3576116c3614520565b90506020028101906116d59190614536565b6116e3906020810190614183565b905060008686848181106116f9576116f9614520565b905060200281019061170b9190614536565b602001359050600087878581811061172557611725614520565b90506020028101906117379190614536565b604001359050600061174884612cea565b90507f000000000000000000000000000000000000000000000000000000000000000061ffff16816000015161ffff16036117965760405163164e32df60e01b815260040160405180910390fd5b6117a083876144b0565b95506117ff8482604051806080016040528086886117be919061457a565b81523060208201526000604082015261ffff7f0000000000000000000000000000000000000000000000000000000000000000166060909101526001612d6d565b6118b661180a611177565b8a8a8881811061181c5761181c614520565b905060200281019061182e9190614536565b61183f906080810190606001614183565b8b8b8981811061185157611851614520565b90506020028101906118639190614536565b6118749060a0810190608001614183565b8787866000015161ffff168f8f8d81811061189157611891614520565b90506020028101906118a39190614536565b6118b19060a08101906145d6565b6132ce565b80516040805161ffff7f000000000000000000000000000000000000000000000000000000000000000081168252909216602083015281018490527f8bdaf3de28c95336795fcfb09634aa6ee90e0ba358711340d92566bc6e3786269060600160405180910390a15050600190920191506116a79050565b5061193a816000613428565b806010600082825461194c91906144b0565b909155505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061198b83611d47565b90506119c26001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612f7a565b6119cc8284612fd4565b60408051828152602081018590526001600160a01b038416913391600080516020614baa833981519152910160405180910390a3610a3581846130a1565b600080611a1633613476565b60405163a9059cbb60e01b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90611a699086908690600401614623565b6020604051808303816000875af1158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aac919061463c565b50604080518381526020810183905233916001600160a01b0386169183917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a450919050565b6060600a8054610a4a906144c3565b6000600e81611b1f6040860160208701614183565b6001600160a01b0316815260208082019290925260409081016000208151606081018352905461ffff80821683526201000082041693820193909352600160201b90920460ff161580159183019190915290915080611b965750805161ffff16611b8f6080850160608601614659565b61ffff1614155b15611bc557611bab6040840160208501614183565b6040516368692cbb60e11b8152600401610e6c91906142ab565b60208181015161ffff9081166000908152600f835260408082207f00000000000000000000000000000000000000000000000000000000000000009093168252919092529020546001600160a01b03163314611c3657336040516306e02ebd60e11b8152600401610e6c91906142ab565b611c40828461353e565b611c506080840160608501614659565b61ffff16611c646040850160208601614183565b6001600160a01b03167f649c8deb433503a93e61cbf3bd7afd938e936ce85fcf81928ab240068c6643a585600001358533604051611ca4939291906146ae565b60405180910390a3505050565b60003381611cbf8286612207565b905083811015611d1f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610e6c565b610c2a82868684036128e2565b600033610b0f818585612aa0565b611d448133610b40565b50565b600080611d52610c06565b90508015610af857610af3611d656109ed565b8490836129fe565b600060405163d623472560e01b815260040160405180910390fd5b6000611d9383611a0a565b949350505050565b60006109ff33611a0a565b600080611db1610c06565b90508015610af857610af381611dc56109ed565b8591906128c3565b6000610a356104018361122a565b6001546001600160a01b03163314611e055760405162461bcd60e51b8152600401610e6c90614556565b6001600160a01b0381166000908152600e60205260408120805460ff60201b19169055601254905b81811015610cea57826001600160a01b031660128281548110611e5257611e52614520565b6000918252602090912001546001600160a01b031603611f41576012611e7960018461457a565b81548110611e8957611e89614520565b600091825260209091200154601280546001600160a01b039092169183908110611eb557611eb5614520565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506012805480611ef457611ef461458d565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556040519182526001600160a01b03851691600080516020614b8a8339815191529101611022565b600101611e2d565b6001546001600160a01b03163314611f735760405162461bcd60e51b8152600401610e6c90614556565b611f7f8484848461359b565b5050601280546001810182556000919091527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440180546001600160a01b0319166001600160a01b03939093169290921790915550565b611fde82610c35565b611fe781612c5c565b610cea8383612f15565b6000610a358261122a565b60006120073361122a565b905061201333826136e2565b6000612027612020610c06565b839061381e565b60125490915060005b81811015610e3c5760006012828154811061204d5761204d614520565b60009182526020822001546001600160a01b0316915061206c82612cea565b90507f000000000000000000000000000000000000000000000000000000000000000061ffff16816000015161ffff160361219a576040516370a0823160e01b8152829060009061211e906001600160a01b038416906370a08231906120d69030906004016142ab565b602060405180830381865afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211791906145a3565b8890613833565b60405163a9059cbb60e01b81529091506001600160a01b0383169063a9059cbb9061214f9033908590600401614623565b6020604051808303816000875af115801561216e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612192919061463c565b5050506121fd565b6121fd82826040518060800160405280898152602001306001600160a01b03168152602001336001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000061ffff168152506003612d6d565b5050600101612030565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b336000908152600d60205260408120600181015460028201548361225583610acd565b90508181101561226a57600094505050505090565b81612275818361457a565b61228790670de0b6b3a76400006146db565b61229191906146fa565b94505050505090565b336000908152600d602052604081206001810154600282015491929091906122c183610acd565b90506000846002018190555081600c60008282546122df919061457a565b9091555050818110156122f757610e3c303385612aa0565b60008161230484866146db565b61230e91906146fa565b9050600061231c828661457a565b9050612329303384612aa0565b61233330826136e2565b505050505050565b600080612346610c06565b90506000836123536109ed565b61235d919061457a565b90508060000361236f57509192915050565b8115612385576123808483836128c3565b611d93565b509192915050565b6000610a3582611da6565b6001546001600160a01b031633146123c25760405162461bcd60e51b8152600401610e6c90614556565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef390600090a250565b6001546001600160a01b031633146124365760405162461bcd60e51b8152600401610e6c90614556565b6001600160a01b0382166000908152600e602090815260408083208151606081018352905461ffff80821680845262010000830490911694830194909452600160201b900460ff1615159181019190915291036124a85782604051634ae8435d60e01b8152600401610e6c91906142ab565b6001600160a01b0383166000818152600e6020908152604091829020805463ffff000019166201000061ffff88169081029190911790915591519182527f1f97e73f29802f056373306e9e3198b79119f446f1b9595d0752ebc2a9146f2e9101611022565b6001546001600160a01b031633146125375760405162461bcd60e51b8152600401610e6c90614556565b600280546001600160a01b0319166001600160a01b038381169182179092556001546040517fb150023a879fd806e3599b6ca8ee3b60f0e360ab3846d128d67ebce1a391639a9361121f93921691906145bc565b600080516020614b2a8339815191526125a381612c5c565b601554600090156125c75760405163835eaa8f60e01b815260040160405180910390fd5b6012546000805b82811015612766576000601282815481106125eb576125eb614520565b6000918252602080832091909101546001600160a01b0316808352600e82526040928390208351606081018552905461ffff808216808452620100008304821695840195909552600160201b90910460ff16151594820194909452909350917f00000000000000000000000000000000000000000000000000000000000000001690036126f057604051633e64257560e01b81526001600160a01b03831690633e6425759061269e9030906004016142ab565b602060405180830381865afa1580156126bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126df91906145a3565b6126e990876144b0565b955061275c565b6127558282604051806080016040528060008152602001306001600160a01b0316815260200160006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000061ffff168152506004612d6d565b6001840193505b50506001016125ce565b506040805160808101825284815260006020820181905291810183905260600181905260139390935560148390556015555060165550565b6001546001600160a01b031633146127c85760405162461bcd60e51b8152600401610e6c90614556565b66b1a2bc2ec500008111156127f057604051635b94d8b160e01b815260040160405180910390fd5b60048190556040518181527fd87632b1c6ebfa21acbca0e3279b3cf6385a377cb8fda51e5b866baa6e6012ab9060200161121f565b6001546001600160a01b0316331461284f5760405162461bcd60e51b8152600401610e6c90614556565b61288f8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061384892505050565b507fa9f1cb7eee5fc621e043c1ef431febb0f901998a6c0cbdf70147b0fe4d9f5a6a8383836040516114459392919061471c565b8282028115158415858304851417166128db57600080fd5b0492915050565b6001600160a01b0383166129445760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610e6c565b6001600160a01b0382166129a55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610e6c565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101611ca4565b828202811515841585830485141716612a1657600080fd5b6001826001830304018115150290509392505050565b6000612a388484612207565b90506000198114610e3c5781811015612a935760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610e6c565b610e3c84848484036128e2565b6001600160a01b038316612b045760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610e6c565b6001600160a01b038216612b665760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610e6c565b6001600160a01b03831660009081526006602052604090205481811015612bde5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610e6c565b6001600160a01b03808516600090815260066020526040808220858503905591851681529081208054849290612c159084906144b0565b92505081905550826001600160a01b0316846001600160a01b0316600080516020614b6a83398151915284604051612c4f91815260200190565b60405180910390a3610e3c565b611d44813361388a565b612c708282611957565b610f4c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055612ca63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6040805160608082018352600080835260208084018290528385018290526001600160a01b0386168252600e815290849020845192830185525461ffff80821684526201000082041691830191909152600160201b900460ff1615159281018390529091610a3557826040516318ef3f8360e01b8152600401610e6c91906142ab565b6020808401805161ffff9081166000908152600f80855260408083207f0000000000000000000000000000000000000000000000000000000000000000851684528652808320549451841683529085528082208851909316825291909352909120546001600160a01b03918216911681612e225784602001517f00000000000000000000000000000000000000000000000000000000000000006040516328a4ac9160e11b8152600401610e6c92919061475c565b6001600160a01b038116612e5257602085015185516040516328a4ac9160e11b8152610e6c92919060040161475c565b8451604051630e510a7760e41b81526001600160a01b0384169163e510a77091612e899188918b9187918a91903390600401614771565b600060405180830381600087803b158015612ea357600080fd5b505af1158015612eb7573d6000803e3d6000fd5b50505050846000015161ffff16866001600160a01b03167ff3617f26552d0e4bd64927d1a7fe0d18f2278f99e2446ad6ac8f0a73c38840d886600001518686604051612f05939291906146ae565b60405180910390a3505050505050565b612f1f8282611957565b15610f4c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610e3c9085906138ee565b6001600160a01b03821661302a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610e6c565b806008600082825461303c91906144b0565b90915550506001600160a01b038216600090815260066020526040812080548392906130699084906144b0565b90915550506040518181526001600160a01b03831690600090600080516020614b6a8339815191529060200160405180910390a35050565b81601160008282546130b391906144b0565b90915550505050565b80601060008282546130ce919061457a565b90915550611d4490508160006130a1565b60008284116130f7576130f2848461457a565b613101565b613101838561457a565b905081811115610e3c57604051638199f5f360e01b815260040160405180910390fd5b600c5460115410156131495760405163078cc1fb60e01b815260040160405180910390fd5b6000601054821161315b576000613168565b601054613168908361457a565b601154909150429060009061317d90856144b0565b60108590559050600083156131b257670de0b6b3a7640000600354856131a391906146db565b6131ad91906146fa565b6131b5565b60005b90506000600454600014613210576301e13380670de0b6b3a7640000600b54866131df919061457a565b856004546131ed91906146db565b6131f791906146db565b61320191906146fa565b61320b91906146fa565b613213565b60005b9050600061322182846144b0565b90506000811561326157613248613236610c06565b613240848861457a565b8491906128c3565b600554909150613261906001600160a01b031682612fd4565b600554604080518981526020810187905290810185905260608101839052608081018790526001600160a01b03909116907feaedd1267621f4a8ee97011faf0e67800ad3063714bd179f078c980bb9a3fa3d9060a00160405180910390a2505050600b9290925550505050565b600080516020614b2a8339815191526132e681612c5c565b61332a83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508d91508a90506139c0565b60405163095ea7b360e01b81526001600160a01b038a169063095ea7b390613358908b908990600401614623565b6020604051808303816000875af1158015613377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339b919061463c565b506000876001600160a01b031684846040516133b89291906147ec565b6000604051808303816000865af19150503d80600081146133f5576040519150601f19603f3d011682016040523d82523d6000602084013e6133fa565b606091505b505090508061341c5760405163e0fec00360e01b815260040160405180910390fd5b50505050505050505050565b8160115410806134465750600c5482601154613444919061457a565b105b156134645760405163078cc1fb60e01b815260040160405180910390fd5b81601160008282546130b3919061457a565b6001600160a01b0381166000908152600d60205260408120600281015482919082036134b557604051631f2a200560e01b815260040160405180910390fd5b600b548154106134d857604051634a44555360e11b815260040160405180910390fd5b6001810154600282015490925060006134f084610acd565b90508181106134ff5781613501565b805b945081600c6000828254613515919061457a565b9091555061352590508585613428565b6000600284015561353630856136e2565b505050915091565b600282600481111561355257613552614676565b0361356057610f4c81613ade565b600482600481111561357457613574614676565b0361358257610f4c81613b1f565b60405163d623472560e01b815260040160405180910390fd5b6001546001600160a01b031633146135c55760405162461bcd60e51b8152600401610e6c90614556565b6001600160a01b0384166000908152600e60209081526040918290208251606081018452905461ffff80821683526201000082041692820192909252600160201b90910460ff16158015928201929092529061363457604051630cb3e97f60e31b815260040160405180910390fd5b6040805160608101825261ffff86811680835286821660208085019182528715158587019081526001600160a01b038c166000818152600e845288902096518754945192511515600160201b0260ff60201b19938816620100000263ffffffff199096169190971617939093171693909317909355925192835290917fdfdecea9ea3fba2ae2104af96f9be11589a507814dfd462dadc83c581da372b0910160405180910390a25050505050565b6001600160a01b0382166137425760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610e6c565b6001600160a01b038216600090815260066020526040902054818110156137b65760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610e6c565b6001600160a01b03831660009081526006602052604081208383039055600880548492906137e590849061457a565b90915550506040518281526000906001600160a01b03851690600080516020614b6a8339815191529060200160405180910390a3505050565b6000610afa83670de0b6b3a7640000846128c3565b6000610afa8383670de0b6b3a76400006128c3565b6060610afa83836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000815250613b58565b6138948282611957565b610f4c576138ac816001600160a01b03166014613b67565b6138b7836020613b67565b6040516020016138c89291906147fc565b60408051601f198184030181529082905262461bcd60e51b8252610e6c91600401614085565b6000613943826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613b589092919063ffffffff16565b805190915015610cea5780806020019051810190613961919061463c565b610cea5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e6c565b6139c8613fb1565b6139d185613d02565b905083816020015114613a185760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9259608a1b6044820152606401610e6c565b816001600160a01b031681600001516001600160a01b031614613a785760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964207265636569766572206164647265737360401b6044820152606401610e6c565b826001600160a01b03168160800151604001516001600160a01b031614613ad75760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b21034b7383aba103a37b5b2b760691b6044820152606401610e6c565b5050505050565b6017805460018101825560009190915281906003027fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1501610cea828261488b565b6014805482359190600090613b359084906144b0565b90915550506016805460019190600090613b509084906144b0565b909155505050565b6060611d938484600085613d3a565b60606000613b768360026146db565b613b819060026144b0565b6001600160401b03811115613b9857613b986148f4565b6040519080825280601f01601f191660200182016040528015613bc2576020820181803683370190505b509050600360fc1b81600081518110613bdd57613bdd614520565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613c0c57613c0c614520565b60200101906001600160f81b031916908160001a9053506000613c308460026146db565b613c3b9060016144b0565b90505b6001811115613cb3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613c6f57613c6f614520565b1a60f81b828281518110613c8557613c85614520565b60200101906001600160f81b031916908160001a90535060049490941c93613cac8161490a565b9050613c3e565b508315610afa5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610e6c565b613d0a613fb1565b6000613d24836004808651613d1f919061457a565b613e6b565b905080806020019051810190610afa9190614a5e565b606082471015613d9b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610e6c565b6001600160a01b0385163b613df25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e6c565b600080866001600160a01b03168587604051613e0e9190614b17565b60006040518083038185875af1925050503d8060008114613e4b576040519150601f19603f3d011682016040523d82523d6000602084013e613e50565b606091505b5091509150613e60828286613f78565b979650505050505050565b606081613e7981601f6144b0565b1015613eb85760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610e6c565b613ec282846144b0565b84511015613f065760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610e6c565b606082158015613f255760405191506000825260208201604052613f6f565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613f5e578051835260209283019201613f46565b5050858452601f01601f1916604052505b50949350505050565b60608315613f87575081610afa565b825115613f975782518084602001fd5b8160405162461bcd60e51b8152600401610e6c9190614085565b6040518060a0016040528060006001600160a01b03168152602001600081526020016000815260200161400e6040518060800160405280600081526020016000815260200160006001600160a01b03168152602001606081525090565b815260408051608081018252600080825260208281018290529282015260608082015291015290565b60006020828403121561404957600080fd5b81356001600160e01b031981168114610afa57600080fd5b60005b8381101561407c578181015183820152602001614064565b50506000910152565b60208152600082518060208401526140a4816040850160208701614061565b601f01601f19169190910160400192915050565b6000602082840312156140ca57600080fd5b5035919050565b6001600160a01b0381168114611d4457600080fd5b600080604083850312156140f957600080fd5b8235614104816140d1565b946020939093013593505050565b6000806040838503121561412557600080fd5b823591506020830135614137816140d1565b809150509250929050565b60008060006060848603121561415757600080fd5b8335614162816140d1565b92506020840135614172816140d1565b929592945050506040919091013590565b60006020828403121561419557600080fd5b8135610afa816140d1565b600080602083850312156141b357600080fd5b82356001600160401b03808211156141ca57600080fd5b818501915085601f8301126141de57600080fd5b8135818111156141ed57600080fd5b8660208260051b850101111561420257600080fd5b60209290920196919550909350505050565b8015158114611d4457600080fd5b6000806040838503121561423557600080fd5b8235614240816140d1565b9150602083013561413781614214565b61ffff81168114611d4457600080fd5b60008060006060848603121561427557600080fd5b833561428081614250565b9250602084013561429081614250565b915060408401356142a0816140d1565b809150509250925092565b6001600160a01b0391909116815260200190565b600080604083850312156142d257600080fd5b50508035926020909101359150565b60008082840360a08112156142f557600080fd5b608081121561430357600080fd5b5082915060808301356005811061413757600080fd5b6000806040838503121561432c57600080fd5b823561433781614250565b9150602083013561413781614250565b60008060006060848603121561435c57600080fd5b833592506020840135614290816140d1565b6000806000806080858703121561438457600080fd5b843561438f816140d1565b9350602085013561439f81614250565b925060408501356143af81614250565b915060608501356143bf81614214565b939692955090935050565b600080604083850312156143dd57600080fd5b82356143e8816140d1565b91506020830135614137816140d1565b6000806040838503121561440b57600080fd5b8235614337816140d1565b60008060006040848603121561442b57600080fd5b8335614436816140d1565b925060208401356001600160401b038082111561445257600080fd5b818601915086601f83011261446657600080fd5b81358181111561447557600080fd5b87602082850101111561448757600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a3557610a3561449a565b600181811c908216806144d757607f821691505b6020821081036144f757634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561450f57600080fd5b815160ff81168114610afa57600080fd5b634e487b7160e01b600052603260045260246000fd5b6000823560be1983360301811261454c57600080fd5b9190910192915050565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b81810381811115610a3557610a3561449a565b634e487b7160e01b600052603160045260246000fd5b6000602082840312156145b557600080fd5b5051919050565b6001600160a01b0392831681529116602082015260400190565b6000808335601e198436030181126145ed57600080fd5b8301803591506001600160401b0382111561460757600080fd5b60200191503681900382131561461c57600080fd5b9250929050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561464e57600080fd5b8151610afa81614214565b60006020828403121561466b57600080fd5b8135610afa81614250565b634e487b7160e01b600052602160045260246000fd5b600581106146aa57634e487b7160e01b600052602160045260246000fd5b9052565b838152606081016146c2602083018561468c565b6001600160a01b03929092166040919091015292915050565b60008160001904831182151516156146f5576146f561449a565b500290565b60008261471757634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b61ffff92831681529116602082015260400190565b60006101208201905087518252602088015160018060a01b0380821660208501528060408b015116604085015260608a0151915061ffff8083166060860152818a16608086015281891660a08601526147cd60c086018961468c565b80871660e0860152508085166101008501525050979650505050505050565b8183823760009101908152919050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161482e816017850160208801614061565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161485f816028840160208801614061565b01602801949350505050565b80546001600160a01b0319166001600160a01b0392909216919091179055565b81358155602082013561489d816140d1565b6148aa816001840161486b565b506002810160408301356148bd816140d1565b6148c7818361486b565b5060608301356148d681614250565b815461ffff60a01b191660a09190911b61ffff60a01b161790555050565b634e487b7160e01b600052604160045260246000fd5b6000816149195761491961449a565b506000190190565b604051608081016001600160401b0381118282101715614943576149436148f4565b60405290565b60405160a081016001600160401b0381118282101715614943576149436148f4565b604051601f8201601f191681016001600160401b0381118282101715614993576149936148f4565b604052919050565b6000608082840312156149ad57600080fd5b6149b5614921565b9050815181526020808301518183015260408301516149d3816140d1565b604083015260608301516001600160401b03808211156149f257600080fd5b818501915085601f830112614a0657600080fd5b815181811115614a1857614a186148f4565b614a2a601f8201601f1916850161496b565b91508082528684828501011115614a4057600080fd5b614a4f81858401868601614061565b50606084015250909392505050565b600060208284031215614a7057600080fd5b81516001600160401b0380821115614a8757600080fd5b9083019060a08286031215614a9b57600080fd5b614aa3614949565b8251614aae816140d1565b808252506020830151602082015260408301516040820152606083015182811115614ad857600080fd5b614ae48782860161499b565b606083015250608083015182811115614afc57600080fd5b614b088782860161499b565b60808301525095945050505050565b6000825161454c81846020870161406156feaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85e07ba75a2f56a1a2ca8551cdddfb8c998f5781c1c9ab6f8d4ae42101c0d7f1dcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7a2646970667358221220c018601e1a05baed9b84a0e62202d82b49ca252115602c0c3db6ee76ad15e32264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Accept transfer of ownership of the contract. Can only be called by the pendingOwner."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "redeem()": {
        "details": "safest UI method"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setManagementFee(uint256)": {
        "params": {
          "_managementFee": "The new performance fee."
        }
      },
      "setPerformanceFee(uint256)": {
        "params": {
          "_performanceFee": "The new performance fee."
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "New treasury address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Init transfer of ownership of the contract to a new account (`_pendingOwner`).",
        "params": {
          "_pendingOwner": "pending owner of contract Can only be called by the current owner."
        }
      },
      "underlyingBalance(address)": {
        "details": "returns a cached value used for withdrawals"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "SetManagementFee(uint256)": {
        "notice": "Emitted when management fee is updated."
      },
      "SetPerformanceFee(uint256)": {
        "notice": "Emitted when performance fee is updated."
      }
    },
    "kind": "user",
    "methods": {
      "GUARDIAN()": {
        "notice": "Update vault params, perform time-sensitive operations, set manager"
      },
      "MANAGER()": {
        "notice": "Hot-wallet bots that route funds between vaults, rebalance and harvest strategies"
      },
      "emergencyAction(address,bytes)": {
        "notice": "this method allows an arbitrary method to be called by the owner in case of emergency owner must be a timelock contract in order to allow users to redeem funds in case they suspect this action to be malicious"
      },
      "getPenalty()": {
        "notice": "UI method to view cancellation penalty"
      },
      "managementFee()": {
        "notice": "Annual management fee."
      },
      "owner()": {
        "notice": "Add and remove vaults and strategies and other critical operations behind timelock Default admin role There should only be one owner, so it is not a role"
      },
      "performanceFee()": {
        "notice": "The percentage of profit recognized each harvest to reserve as fees."
      },
      "redeemIsReady(address)": {
        "notice": "UTILS"
      },
      "setManagementFee(uint256)": {
        "notice": "Sets a new performanceFee."
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets a new performanceFee."
      },
      "setTreasury(address)": {
        "notice": "Updates treasury."
      },
      "treasury()": {
        "notice": "address where all fees are sent to"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1634,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1629_storage)"
      },
      {
        "astId": 15515,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15517,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15859,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15862,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "managementFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 15865,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2171,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2177,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2179,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2181,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "_name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 2183,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 28890,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "lastHarvestTimestamp",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 28892,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "pendingWithdraw",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 28897,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "withdrawLedger",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(WithdrawRecord)28874_storage)"
      },
      {
        "astId": 16181,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "addrBook",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(Vault)16940_storage)"
      },
      {
        "astId": 16187,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "postmanAddr",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_address))"
      },
      {
        "astId": 30560,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "totalChildHoldings",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 30562,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "floatAmnt",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 30902,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "vaultList",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 30905,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "harvestLedger",
        "offset": 0,
        "slot": "19",
        "type": "t_struct(HarvestLedger)30890_storage"
      },
      {
        "astId": 30909,
        "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
        "label": "withdrawQueue",
        "offset": 0,
        "slot": "23",
        "type": "t_array(t_struct(Message)16933_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Message)16933_storage)dyn_storage": {
        "base": "t_struct(Message)16933_storage",
        "encoding": "dynamic_array",
        "label": "struct Message[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Vault)16940_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault)",
        "numberOfBytes": "32",
        "value": "t_struct(Vault)16940_storage"
      },
      "t_mapping(t_address,t_struct(WithdrawRecord)28874_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WithdrawRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(WithdrawRecord)28874_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1629_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1629_storage"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_address))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_address)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(HarvestLedger)30890_storage": {
        "encoding": "inplace",
        "label": "struct HarvestLedger",
        "members": [
          {
            "astId": 30883,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "localDepositValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 30885,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "crossDepositValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 30887,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "pendingAnswers",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 30889,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "receivedAnswers",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Message)16933_storage": {
        "encoding": "inplace",
        "label": "struct Message",
        "members": [
          {
            "astId": 16926,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16928,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "sender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16930,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "client",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16932,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "chainId",
            "offset": 20,
            "slot": "2",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)1629_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1626,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1628,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vault)16940_storage": {
        "encoding": "inplace",
        "label": "struct Vault",
        "members": [
          {
            "astId": 16935,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "chainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16937,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "postmanId",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16939,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "allowed",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(WithdrawRecord)28874_storage": {
        "encoding": "inplace",
        "label": "struct WithdrawRecord",
        "members": [
          {
            "astId": 28869,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 28871,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 28873,
            "contract": "src/vaults/SectorCrossVault.sol:SectorCrossVault",
            "label": "value",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}