{
  "address": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "asset_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "guardian",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            }
          ],
          "internalType": "struct AuthConfig",
          "name": "authConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "performanceFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "managementFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct FeeConfig",
          "name": "feeConfig",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BridgeError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxRedeemNotZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingDepositValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingIncomingXFunds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "postmanId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "MissingPostman",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughtFloat",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotReady",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OverMaxFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameChainOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAddressNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VaultAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultMissing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "postman",
          "type": "address"
        }
      ],
      "name": "WrongPostman",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongUnderlying",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "AddStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "AddedVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_fromChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_toChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "ChangedVaultStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositIntoStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "EmergencyAction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingProfit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "enum MessageType",
          "name": "mType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "postman",
          "type": "address"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "enum MessageType",
          "name": "mtype",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "postman",
          "type": "address"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "postmanId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chanId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "postman",
          "type": "address"
        }
      ],
      "name": "PostmanUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "RegisterDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "name": "RegisterIncomingFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "RemoveStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "RequestWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        }
      ],
      "name": "SetManagementFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        }
      ],
      "name": "SetPerformanceFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "SetTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "postmanId",
          "type": "uint16"
        }
      ],
      "name": "UpdatedVaultPostman",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromStrategy",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GUARDIAN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MANAGEMENT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PERFORMANCE_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LIQUIDITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISCYStrategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_postmanId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addrBook",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "postmanId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bridgeQueue",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "changeVaultStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract ISCYStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSharesOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct DepositParams[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "depositIntoStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "emergencyAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "estimateUnderlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "floatAmnt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStrategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getWithdrawStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct WithdrawRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedTvl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDelta",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_postmanId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_postman",
          "type": "address"
        }
      ],
      "name": "managePostman",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "postmanAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "processIncomingXFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vaultAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "allowanceTarget",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "txData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Request[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "processXWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            }
          ],
          "internalType": "struct Message",
          "name": "_msg",
          "type": "tuple"
        },
        {
          "internalType": "enum MessageType",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "redeemIsReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISCYStrategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "requestRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "requestRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_managementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "sharesToUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISCYStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategyExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategyIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "toSharesAfterDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalChildHoldings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStrategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStrategyHoldings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "underlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "underlyingAmnt",
          "type": "uint256"
        }
      ],
      "name": "underlyingToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_postmanId",
          "type": "uint16"
        }
      ],
      "name": "updateVaultPostman",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract ISCYStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTokenOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct RedeemParams[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "withdrawFromStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawLedger",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
  "receipt": {
    "to": null,
    "from": "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
    "contractAddress": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
    "transactionIndex": 0,
    "gasUsed": "5099025",
    "logsBloom": "0x
    "blockHash": "0xeeb21ae49fa559512b8d25d2d3c76cbbd06a25813db2d3e02a32d41d4f0c45b9",
    "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 31204923,
        "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
        "address": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f",
        "logIndex": 0,
        "blockHash": "0xeeb21ae49fa559512b8d25d2d3c76cbbd06a25813db2d3e02a32d41d4f0c45b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 31204923,
        "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
        "address": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xeeb21ae49fa559512b8d25d2d3c76cbbd06a25813db2d3e02a32d41d4f0c45b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 31204923,
        "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
        "address": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xeeb21ae49fa559512b8d25d2d3c76cbbd06a25813db2d3e02a32d41d4f0c45b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 31204923,
        "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
        "address": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8",
          "0x0000000000000000000000006ddf9da4c37df97cb2458f85050e09994cbb9c2a",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xeeb21ae49fa559512b8d25d2d3c76cbbd06a25813db2d3e02a32d41d4f0c45b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 31204923,
        "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
        "address": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xeeb21ae49fa559512b8d25d2d3c76cbbd06a25813db2d3e02a32d41d4f0c45b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 31204923,
        "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
        "address": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x0000000000000000000000006ddf9da4c37df97cb2458f85050e09994cbb9c2a",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xeeb21ae49fa559512b8d25d2d3c76cbbd06a25813db2d3e02a32d41d4f0c45b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 31204923,
        "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
        "address": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xeeb21ae49fa559512b8d25d2d3c76cbbd06a25813db2d3e02a32d41d4f0c45b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 31204923,
        "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
        "address": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
        "topics": [
          "0xcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef3",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xeeb21ae49fa559512b8d25d2d3c76cbbd06a25813db2d3e02a32d41d4f0c45b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 31204923,
        "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
        "address": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
        "topics": [
          "0x8b940a95968ad5b511f89b01075446a4fe9f614f2dc5fbb9e9a6b227d6d4fd70"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0xeeb21ae49fa559512b8d25d2d3c76cbbd06a25813db2d3e02a32d41d4f0c45b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 31204923,
        "transactionHash": "0x63ba0892a6992c4159b88db057ae28b93e5e3894b41ee11211bd667ce1f6a0e0",
        "address": "0x75079AcAEB581e28040A049cA780e543F722eBdf",
        "topics": [
          "0xd87632b1c6ebfa21acbca0e3279b3cf6385a377cb8fda51e5b866baa6e6012ab"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 9,
        "blockHash": "0xeeb21ae49fa559512b8d25d2d3c76cbbd06a25813db2d3e02a32d41d4f0c45b9"
      }
    ],
    "blockNumber": 31204923,
    "cumulativeGasUsed": "5099025",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7F5c764cBc14f9669B88837ca1490cCa17c31607",
    "SectorVault",
    "SVLT",
    [
      "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
      "0x6DdF9DA4C37DF97CB2458F85050E09994Cbb9C2A",
      "0x6DdF9DA4C37DF97CB2458F85050E09994Cbb9C2A"
    ],
    [
      "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
      0,
      0
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "a84ac658bf96a2081aa45f4ba4df3f0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"internalType\":\"struct AuthConfig\",\"name\":\"authConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"}],\"internalType\":\"struct FeeConfig\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BridgeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxRedeemNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingDepositValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingIncomingXFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"postmanId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"MissingPostman\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughtFloat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotReady\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverMaxFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameChainOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAddressNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultMissing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"postman\",\"type\":\"address\"}],\"name\":\"WrongPostman\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongUnderlying\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"AddStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"AddedVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_fromChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_toChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ChangedVaultStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositIntoStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"EmergencyAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enum MessageType\",\"name\":\"mType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"postman\",\"type\":\"address\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enum MessageType\",\"name\":\"mtype\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"postman\",\"type\":\"address\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"postmanId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chanId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"postman\",\"type\":\"address\"}],\"name\":\"PostmanUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"RegisterDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"RegisterIncomingFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"RemoveStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"RequestWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"}],\"name\":\"SetManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"postmanId\",\"type\":\"uint16\"}],\"name\":\"UpdatedVaultPostman\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromStrategy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MANAGEMENT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISCYStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_postmanId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addrBook\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"postmanId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"changeVaultStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ISCYStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSharesOut\",\"type\":\"uint256\"}],\"internalType\":\"struct DepositParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"depositIntoStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"emergencyAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"estimateUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floatAmnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct WithdrawRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedTvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDelta\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_postmanId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_postman\",\"type\":\"address\"}],\"name\":\"managePostman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"postmanAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processIncomingXFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"}],\"internalType\":\"struct Request[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"processXWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"internalType\":\"struct Message\",\"name\":\"_msg\",\"type\":\"tuple\"},{\"internalType\":\"enum MessageType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"redeemIsReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISCYStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"requestRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"requestRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"sharesToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISCYStrategy\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"toSharesAfterDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChildHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStrategyHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"underlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmnt\",\"type\":\"uint256\"}],\"name\":\"underlyingToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_postmanId\",\"type\":\"uint16\"}],\"name\":\"updateVaultPostman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract ISCYStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenOut\",\"type\":\"uint256\"}],\"internalType\":\"struct RedeemParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"withdrawFromStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawLedger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Accept transfer of ownership of the contract. Can only be called by the pendingOwner.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"estimateUnderlyingBalance(address)\":{\"details\":\"returns accurate value used to estimate current value\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"redeem()\":{\"details\":\"safest UI method\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setManagementFee(uint256)\":{\"params\":{\"_managementFee\":\"The new performance fee.\"}},\"setPerformanceFee(uint256)\":{\"params\":{\"_performanceFee\":\"The new performance fee.\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"New treasury address.\"}},\"sharesToUnderlying(uint256)\":{\"details\":\"current exchange rate (different from previewDeposit rate) this should be used for estiamtes of withdrawals\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Init transfer of ownership of the contract to a new account (`_pendingOwner`).\",\"params\":{\"_pendingOwner\":\"pending owner of contract Can only be called by the current owner.\"}},\"underlyingBalance(address)\":{\"details\":\"returns a cached value used for withdrawals\"},\"underlyingToShares(uint256)\":{\"details\":\"current exchange rate (different from previewDeposit / previewWithdrawal rate) this should be used estimate of deposit fee\"}},\"version\":1},\"userdoc\":{\"events\":{\"SetManagementFee(uint256)\":{\"notice\":\"Emitted when management fee is updated.\"},\"SetPerformanceFee(uint256)\":{\"notice\":\"Emitted when performance fee is updated.\"}},\"kind\":\"user\",\"methods\":{\"GUARDIAN()\":{\"notice\":\"Update vault params, perform time-sensitive operations, set manager\"},\"MANAGER()\":{\"notice\":\"Hot-wallet bots that route funds between vaults, rebalance and harvest strategies\"},\"depositIntoStrategies((address,uint256,uint256)[])\":{\"notice\":\"this can be done in parts in case gas limit is reached\"},\"emergencyAction(address,bytes)\":{\"notice\":\"this method allows an arbitrary method to be called by the owner in case of emergency owner must be a timelock contract in order to allow users to redeem funds in case they suspect this action to be malicious\"},\"getPenalty()\":{\"notice\":\"UI method to view cancellation penalty\"},\"getTvl()\":{\"notice\":\"returns expected tvl (used for estimate)\"},\"harvest(uint256,uint256)\":{\"notice\":\"We compute expected tvl off-chain first, to ensure this transactions isn't sandwitched\"},\"managementFee()\":{\"notice\":\"Annual management fee.\"},\"owner()\":{\"notice\":\"Add and remove vaults and strategies and other critical operations behind timelock Default admin role There should only be one owner, so it is not a role\"},\"performanceFee()\":{\"notice\":\"The percentage of profit recognized each harvest to reserve as fees.\"},\"redeemIsReady(address)\":{\"notice\":\"UTILS\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets a new performanceFee.\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets a new performanceFee.\"},\"setTreasury(address)\":{\"notice\":\"Updates treasury.\"},\"treasury()\":{\"notice\":\"address where all fees are sent to\"},\"withdrawFromStrategies((address,uint256,uint256)[])\":{\"notice\":\"this can be done in parts in case gas limit is reached\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/vaults/SectorVault.sol\":\"SectorVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/common/Accounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { FixedPointMathLib } from \\\"../libraries/FixedPointMathLib.sol\\\";\\nimport { IERC4626Accounting } from \\\"../interfaces/ERC4626/IERC4626Accounting.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract Accounting is IERC4626Accounting {\\n\\tusing FixedPointMathLib for uint256;\\n\\n\\tfunction totalAssets() public view virtual returns (uint256);\\n\\n\\tfunction totalSupply() public view virtual returns (uint256);\\n\\n\\tfunction toSharesAfterDeposit(uint256 assets) public view virtual returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\t\\tuint256 _totalAssets = totalAssets() - assets;\\n\\t\\tif (_totalAssets == 0) return assets;\\n\\t\\treturn supply == 0 ? assets : assets.mulDivDown(supply, _totalAssets);\\n\\t}\\n\\n\\tfunction convertToShares(uint256 assets) public view virtual returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n\\t\\treturn supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n\\t}\\n\\n\\tfunction convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n\\t\\treturn supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n\\t}\\n\\n\\tfunction previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n\\t\\treturn convertToShares(assets);\\n\\t}\\n\\n\\tfunction previewMint(uint256 shares) public view virtual returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n\\t\\treturn supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n\\t}\\n\\n\\tfunction previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n\\t\\treturn supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n\\t}\\n\\n\\tfunction previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n\\t\\treturn convertToAssets(shares);\\n\\t}\\n}\\n\",\"keccak256\":\"0x232ecac90b911bd659137d4c9fa347e447273440ad29cca89840bb913a78c464\",\"license\":\"MIT\"},\"src/common/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nstruct AuthConfig {\\n\\taddress owner;\\n\\taddress guardian;\\n\\taddress manager;\\n}\\n\\ncontract Auth is AccessControl {\\n\\tevent OwnershipTransferInitiated(address owner, address pendingOwner);\\n\\tevent OwnershipTransferred(address oldOwner, address newOwner);\\n\\n\\t////////// CONSTANTS //////////\\n\\n\\t/// Update vault params, perform time-sensitive operations, set manager\\n\\tbytes32 public constant GUARDIAN = keccak256(\\\"GUARDIAN\\\");\\n\\n\\t/// Hot-wallet bots that route funds between vaults, rebalance and harvest strategies\\n\\tbytes32 public constant MANAGER = keccak256(\\\"MANAGER\\\");\\n\\n\\t/// Add and remove vaults and strategies and other critical operations behind timelock\\n\\t/// Default admin role\\n\\t/// There should only be one owner, so it is not a role\\n\\taddress public owner;\\n\\taddress public pendingOwner;\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == owner, \\\"ONLY_OWNER\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(AuthConfig memory authConfig) {\\n\\t\\t/// Set up the roles\\n\\t\\t// owner can manage all roles\\n\\t\\towner = authConfig.owner;\\n\\t\\temit OwnershipTransferred(address(0), authConfig.owner);\\n\\n\\t\\t// TODO do we want cascading roles like this?\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, authConfig.owner);\\n\\t\\t_grantRole(GUARDIAN, owner);\\n\\t\\t_grantRole(GUARDIAN, authConfig.guardian);\\n\\t\\t_grantRole(MANAGER, authConfig.owner);\\n\\t\\t_grantRole(MANAGER, authConfig.guardian);\\n\\t\\t_grantRole(MANAGER, authConfig.manager);\\n\\n\\t\\t/// Allow the guardian role to manage manager\\n\\t\\t_setRoleAdmin(MANAGER, GUARDIAN);\\n\\t}\\n\\n\\t// ----------- Ownership -----------\\n\\n\\t/// @dev Init transfer of ownership of the contract to a new account (`_pendingOwner`).\\n\\t/// @param _pendingOwner pending owner of contract\\n\\t/// Can only be called by the current owner.\\n\\tfunction transferOwnership(address _pendingOwner) external onlyOwner {\\n\\t\\tpendingOwner = _pendingOwner;\\n\\t\\temit OwnershipTransferInitiated(owner, pendingOwner);\\n\\t}\\n\\n\\t/// @dev Accept transfer of ownership of the contract.\\n\\t/// Can only be called by the pendingOwner.\\n\\tfunction acceptOwnership() external {\\n\\t\\trequire(msg.sender == pendingOwner, \\\"ONLY_PENDING_OWNER\\\");\\n\\t\\taddress oldOwner = owner;\\n\\t\\towner = pendingOwner;\\n\\n\\t\\t// revoke the DEFAULT ADMIN ROLE from prev owner\\n\\t\\t_revokeRole(DEFAULT_ADMIN_ROLE, oldOwner);\\n\\t\\t_revokeRole(GUARDIAN, oldOwner);\\n\\t\\t_revokeRole(MANAGER, oldOwner);\\n\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, owner);\\n\\t\\t_grantRole(GUARDIAN, owner);\\n\\t\\t_grantRole(MANAGER, owner);\\n\\n\\t\\temit OwnershipTransferred(oldOwner, owner);\\n\\t}\\n}\\n\",\"keccak256\":\"0x87a62554290d84b1df8d0330328685e798893b0df1b6c3b73d39afae89945980\",\"license\":\"MIT\"},\"src/common/Fees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { Auth } from \\\"./Auth.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nstruct FeeConfig {\\n\\taddress treasury;\\n\\tuint256 performanceFee;\\n\\tuint256 managementFee;\\n}\\n\\nabstract contract Fees is Auth {\\n\\tuint256 public constant MAX_MANAGEMENT_FEE = .05e18; // 5%\\n\\tuint256 public constant MAX_PERFORMANCE_FEE = .25e18; // 25%\\n\\n\\t/// @notice The percentage of profit recognized each harvest to reserve as fees.\\n\\t/// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\\n\\tuint256 public performanceFee;\\n\\n\\t/// @notice Annual management fee.\\n\\t/// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\\n\\tuint256 public managementFee;\\n\\n\\t/// @notice address where all fees are sent to\\n\\taddress public treasury;\\n\\n\\tconstructor(FeeConfig memory feeConfig) {\\n\\t\\ttreasury = feeConfig.treasury;\\n\\t\\tperformanceFee = feeConfig.performanceFee;\\n\\t\\tmanagementFee = feeConfig.managementFee;\\n\\t\\temit SetTreasury(feeConfig.treasury);\\n\\t\\temit SetPerformanceFee(feeConfig.performanceFee);\\n\\t\\temit SetManagementFee(feeConfig.managementFee);\\n\\t}\\n\\n\\t/// @notice Sets a new performanceFee.\\n\\t/// @param _performanceFee The new performance fee.\\n\\tfunction setPerformanceFee(uint256 _performanceFee) public onlyOwner {\\n\\t\\tif (_performanceFee > MAX_PERFORMANCE_FEE) revert OverMaxFee();\\n\\n\\t\\tperformanceFee = _performanceFee;\\n\\t\\temit SetPerformanceFee(performanceFee);\\n\\t}\\n\\n\\t/// @notice Sets a new performanceFee.\\n\\t/// @param _managementFee The new performance fee.\\n\\tfunction setManagementFee(uint256 _managementFee) public onlyOwner {\\n\\t\\tif (_managementFee > MAX_MANAGEMENT_FEE) revert OverMaxFee();\\n\\n\\t\\tmanagementFee = _managementFee;\\n\\t\\temit SetManagementFee(_managementFee);\\n\\t}\\n\\n\\t/// @notice Updates treasury.\\n\\t/// @param _treasury New treasury address.\\n\\tfunction setTreasury(address _treasury) public onlyOwner {\\n\\t\\ttreasury = _treasury;\\n\\t\\temit SetTreasury(_treasury);\\n\\t}\\n\\n\\t/// @notice Emitted when performance fee is updated.\\n\\t/// @param performanceFee The new perforamance fee.\\n\\tevent SetPerformanceFee(uint256 performanceFee);\\n\\n\\t/// @notice Emitted when management fee is updated.\\n\\t/// @param managementFee The new management fee.\\n\\tevent SetManagementFee(uint256 managementFee);\\n\\n\\tevent SetTreasury(address indexed treasury);\\n\\n\\terror OverMaxFee();\\n}\\n\",\"keccak256\":\"0xa739a1ab14c23cfc52d38b6cb1793561fae9b7ada90b19a425cc1567408ca9ea\",\"license\":\"MIT\"},\"src/common/XChainIntegrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Auth } from \\\"./Auth.sol\\\";\\nimport \\\"../interfaces/MsgStructs.sol\\\";\\nimport \\\"../interfaces/postOffice/IPostman.sol\\\";\\n\\n/// @notice Struct encoded in Bungee calldata\\n/// @dev Derived from socket registry contract\\nstruct MiddlewareRequest {\\n\\tuint256 id;\\n\\tuint256 optionalNativeAmount;\\n\\taddress inputToken;\\n\\tbytes data;\\n}\\n\\n/// @notice Struct encoded in Bungee calldata\\n/// @dev Derived from socket registry contract\\nstruct BridgeRequest {\\n\\tuint256 id;\\n\\tuint256 optionalNativeAmount;\\n\\taddress inputToken;\\n\\tbytes data;\\n}\\n\\n/// @notice Struct encoded in Bungee calldata\\n/// @dev Derived from socket registry contract\\nstruct UserRequest {\\n\\taddress receiverAddress;\\n\\tuint256 toChainId;\\n\\tuint256 amount;\\n\\tMiddlewareRequest middlewareRequest;\\n\\tBridgeRequest bridgeRequest;\\n}\\n\\nabstract contract XChainIntegrator is Auth {\\n\\tmapping(address => Vault) public addrBook;\\n\\tmapping(uint16 => mapping(uint16 => address)) public postmanAddr;\\n\\t// mapping(messageType => function(Message calldata)) internal messageAction;\\n\\n\\tuint16 immutable chainId = uint16(block.chainid);\\n\\n\\tconstructor() {}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\t\\tBridge utilities\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\t/// @notice Decode the socket request calldata\\n\\t/// @dev Currently not in use due to undertainity in bungee api response\\n\\t/// @param _data Bungee txn calldata\\n\\t/// @return userRequest parsed calldata\\n\\tfunction decodeSocketRegistryCalldata(bytes memory _data)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (UserRequest memory userRequest)\\n\\t{\\n\\t\\tbytes memory callDataWithoutSelector = slice(_data, 4, _data.length - 4);\\n\\t\\t(userRequest) = abi.decode(callDataWithoutSelector, (UserRequest));\\n\\t}\\n\\n\\t/// @notice Decodes and verifies socket calldata\\n\\t/// @param _data Bungee txn calldata\\n\\t/// @param _chainId chainId to check in bungee calldata\\n\\t/// @param _inputToken inputWantToken to check in bungee calldata\\n\\t/// @param _receiverAddress receiving address to check in bungee calldata\\n\\tfunction verifySocketCalldata(\\n\\t\\tbytes memory _data,\\n\\t\\tuint256 _chainId,\\n\\t\\taddress _inputToken,\\n\\t\\taddress _receiverAddress\\n\\t) internal pure {\\n\\t\\tUserRequest memory userRequest;\\n\\t\\t(userRequest) = decodeSocketRegistryCalldata(_data);\\n\\n\\t\\tif (userRequest.toChainId != _chainId) {\\n\\t\\t\\trevert(\\\"Invalid chainId\\\");\\n\\t\\t}\\n\\t\\tif (userRequest.receiverAddress != _receiverAddress) {\\n\\t\\t\\trevert(\\\"Invalid receiver address\\\");\\n\\t\\t}\\n\\t\\tif (userRequest.bridgeRequest.inputToken != _inputToken) {\\n\\t\\t\\trevert(\\\"Invalid input token\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Sends tokens using Bungee middleware. Assumes tokens already present in contract. Manages allowance and transfer.\\n\\t/// @dev Currently not verifying the middleware request calldata. Use very carefully\\n\\t/// @param allowanceTarget address to allow tokens to swipe\\n\\t/// @param socketRegistry address to send bridge txn to\\n\\t/// @param destinationAddress address of receiver\\n\\t/// @param amount amount of tokens to bridge\\n\\t/// @param destinationChainId chain Id of receiving chain\\n\\t/// @param data calldata of txn to be sent\\n\\tfunction _sendTokens(\\n\\t\\taddress asset,\\n\\t\\taddress allowanceTarget,\\n\\t\\taddress socketRegistry,\\n\\t\\taddress destinationAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 destinationChainId,\\n\\t\\tbytes calldata data\\n\\t) internal onlyRole(MANAGER) {\\n\\t\\tverifySocketCalldata(data, destinationChainId, asset, destinationAddress);\\n\\n\\t\\tERC20(asset).approve(allowanceTarget, amount);\\n\\t\\t(bool success, ) = socketRegistry.call(data);\\n\\n\\t\\tif (!success) revert BridgeError();\\n\\t}\\n\\n\\t/*\\n\\t * @notice Helper to slice memory bytes\\n\\t * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n\\t *\\n\\t * @dev refer https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n\\t */\\n\\tfunction slice(\\n\\t\\tbytes memory _bytes,\\n\\t\\tuint256 _start,\\n\\t\\tuint256 _length\\n\\t) internal pure returns (bytes memory) {\\n\\t\\trequire(_length + 31 >= _length, \\\"slice_overflow\\\");\\n\\t\\trequire(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n\\t\\tbytes memory tempBytes;\\n\\n\\t\\tassembly {\\n\\t\\t\\tswitch iszero(_length)\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t// Get a location of some free memory and store it in tempBytes as\\n\\t\\t\\t\\t// Solidity does for memory variables.\\n\\t\\t\\t\\ttempBytes := mload(0x40)\\n\\n\\t\\t\\t\\t// The first word of the slice result is potentially a partial\\n\\t\\t\\t\\t// word read from the original array. To read it, we calculate\\n\\t\\t\\t\\t// the length of that partial word and start copying that many\\n\\t\\t\\t\\t// bytes into the array. The first word we copy will start with\\n\\t\\t\\t\\t// data we don't care about, but the last `lengthmod` bytes will\\n\\t\\t\\t\\t// land at the beginning of the contents of the new array. When\\n\\t\\t\\t\\t// we're done copying, we overwrite the full first word with\\n\\t\\t\\t\\t// the actual length of the slice.\\n\\t\\t\\t\\tlet lengthmod := and(_length, 31)\\n\\n\\t\\t\\t\\t// The multiplication in the next line is necessary\\n\\t\\t\\t\\t// because when slicing multiples of 32 bytes (lengthmod == 0)\\n\\t\\t\\t\\t// the following copy loop was copying the origin's length\\n\\t\\t\\t\\t// and then ending prematurely not copying everything it should.\\n\\t\\t\\t\\tlet mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n\\t\\t\\t\\tlet end := add(mc, _length)\\n\\n\\t\\t\\t\\tfor {\\n\\t\\t\\t\\t\\t// The multiplication in the next line has the same exact purpose\\n\\t\\t\\t\\t\\t// as the one above.\\n\\t\\t\\t\\t\\tlet cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n\\t\\t\\t\\t} lt(mc, end) {\\n\\t\\t\\t\\t\\tmc := add(mc, 0x20)\\n\\t\\t\\t\\t\\tcc := add(cc, 0x20)\\n\\t\\t\\t\\t} {\\n\\t\\t\\t\\t\\tmstore(mc, mload(cc))\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tmstore(tempBytes, _length)\\n\\n\\t\\t\\t\\t//update free-memory pointer\\n\\t\\t\\t\\t//allocating the array padded to 32 bytes like the compiler does now\\n\\t\\t\\t\\tmstore(0x40, and(add(mc, 31), not(31)))\\n\\t\\t\\t}\\n\\t\\t\\t//if we want a zero-length slice let's just return a zero-length array\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\ttempBytes := mload(0x40)\\n\\t\\t\\t\\t//zero out the 32 bytes slice we are about to return\\n\\t\\t\\t\\t//we need to do it because Solidity does not garbage collect\\n\\t\\t\\t\\tmstore(tempBytes, 0)\\n\\n\\t\\t\\t\\tmstore(0x40, add(tempBytes, 0x20))\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn tempBytes;\\n\\t}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\tAddress book management\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\tfunction addVault(\\n\\t\\taddress _vault,\\n\\t\\tuint16 _chainId,\\n\\t\\tuint16 _postmanId,\\n\\t\\tbool _allowed\\n\\t) external virtual onlyOwner {\\n\\t\\t_addVault(_vault, _chainId, _postmanId, _allowed);\\n\\t}\\n\\n\\tfunction _addVault(\\n\\t\\taddress _vault,\\n\\t\\tuint16 _chainId,\\n\\t\\tuint16 _postmanId,\\n\\t\\tbool _allowed\\n\\t) internal onlyOwner {\\n\\t\\tVault memory vault = addrBook[_vault];\\n\\n\\t\\tif (vault.allowed) revert VaultAlreadyAdded();\\n\\n\\t\\taddrBook[_vault] = Vault(_chainId, _postmanId, _allowed);\\n\\t\\temit AddedVault(_vault, _chainId);\\n\\t}\\n\\n\\tfunction changeVaultStatus(address _vault, bool _allowed) external onlyOwner {\\n\\t\\taddrBook[_vault].allowed = _allowed;\\n\\n\\t\\temit ChangedVaultStatus(_vault, _allowed);\\n\\t}\\n\\n\\tfunction updateVaultPostman(address _vault, uint16 _postmanId) external onlyOwner {\\n\\t\\tVault memory vault = addrBook[_vault];\\n\\n\\t\\tif (vault.chainId == 0) revert VaultMissing(_vault);\\n\\n\\t\\taddrBook[_vault].postmanId = _postmanId;\\n\\n\\t\\temit UpdatedVaultPostman(_vault, _postmanId);\\n\\t}\\n\\n\\tfunction managePostman(\\n\\t\\tuint16 _postmanId,\\n\\t\\tuint16 _chainId,\\n\\t\\taddress _postman\\n\\t) external onlyOwner {\\n\\t\\tpostmanAddr[_postmanId][_chainId] = _postman;\\n\\n\\t\\temit PostmanUpdated(_postmanId, _chainId, _postman);\\n\\t}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\tCross-chain logic\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\tfunction _sendMessage(\\n\\t\\taddress receiverAddr,\\n\\t\\tVault memory vault,\\n\\t\\tMessage memory message,\\n\\t\\tMessageType msgType\\n\\t) internal {\\n\\t\\taddress srcPostman = postmanAddr[vault.postmanId][chainId];\\n\\t\\taddress dstPostman = postmanAddr[vault.postmanId][vault.chainId];\\n\\t\\tif (srcPostman == address(0)) revert MissingPostman(vault.postmanId, chainId);\\n\\t\\tif (dstPostman == address(0)) revert MissingPostman(vault.postmanId, vault.chainId);\\n\\n\\t\\tIPostman(srcPostman).deliverMessage(\\n\\t\\t\\tmessage,\\n\\t\\t\\treceiverAddr,\\n\\t\\t\\tdstPostman,\\n\\t\\t\\tmsgType,\\n\\t\\t\\tvault.chainId,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\n\\t\\temit MessageSent(message.value, receiverAddr, vault.chainId, msgType, srcPostman);\\n\\t}\\n\\n\\tfunction receiveMessage(Message calldata _msg, MessageType _type) external {\\n\\t\\t// First check if postman is allowed\\n\\t\\tVault memory vault = addrBook[_msg.sender];\\n\\t\\tif (!vault.allowed || _msg.chainId != vault.chainId) revert SenderNotAllowed(_msg.sender);\\n\\t\\tif (msg.sender != postmanAddr[vault.postmanId][chainId]) revert WrongPostman(msg.sender);\\n\\n\\t\\t// messageAction[_type](_msg);\\n\\t\\t_handleMessage(_type, _msg);\\n\\t\\temit MessageReceived(_msg.value, _msg.sender, _msg.chainId, _type, msg.sender);\\n\\t}\\n\\n\\tfunction _handleMessage(MessageType _type, Message calldata _msg) internal virtual {}\\n\\n\\tfunction processIncomingXFunds() external virtual {}\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\t\\t\\tEvents\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\tevent MessageReceived(\\n\\t\\tuint256 value,\\n\\t\\taddress indexed sender,\\n\\t\\tuint16 indexed srcChainId,\\n\\t\\tMessageType mType,\\n\\t\\taddress postman\\n\\t);\\n\\tevent MessageSent(\\n\\t\\tuint256 value,\\n\\t\\taddress indexed receiver,\\n\\t\\tuint16 indexed dstChainId,\\n\\t\\tMessageType mtype,\\n\\t\\taddress postman\\n\\t);\\n\\tevent AddedVault(address indexed vault, uint16 chainId);\\n\\tevent ChangedVaultStatus(address indexed vault, bool status);\\n\\tevent UpdatedVaultPostman(address indexed vault, uint16 postmanId);\\n\\tevent PostmanUpdated(uint16 indexed postmanId, uint16 chanId, address postman);\\n\\tevent BridgeAsset(uint16 _fromChainId, uint16 _toChainId, uint256 amount);\\n\\tevent RegisterIncomingFunds(uint256 total);\\n\\n\\t/*/////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\t\\t\\tErrors\\n\\t/////////////////////////////////////////////////////*/\\n\\n\\terror MissingPostman(uint16 postmanId, uint256 chainId);\\n\\terror SenderNotAllowed(address sender);\\n\\terror WrongPostman(address postman);\\n\\terror VaultNotAllowed(address vault);\\n\\terror VaultMissing(address vault);\\n\\terror VaultAlreadyAdded();\\n\\terror BridgeError();\\n\\terror SameChainOperation();\\n\\terror MissingIncomingXFunds();\\n}\\n\",\"keccak256\":\"0xa95aa6aa6717c1fd5404e305bc33ddff54ba2a12223a37e17c7a16aaa5f59639\",\"license\":\"MIT\"},\"src/interfaces/ERC4626/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.16;\\n\\ninterface IERC4626 {\\n\\tevent Deposit(\\n\\t\\taddress indexed sender,\\n\\t\\taddress indexed owner,\\n\\t\\tuint256 assets,\\n\\t\\tuint256 shares\\n\\t);\\n\\n\\tevent Withdraw(\\n\\t\\taddress indexed sender,\\n\\t\\taddress indexed receiver,\\n\\t\\taddress indexed owner,\\n\\t\\tuint256 assets,\\n\\t\\tuint256 shares\\n\\t);\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n\\tfunction mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n\\tfunction withdraw(\\n\\t\\tuint256 assets,\\n\\t\\taddress receiver,\\n\\t\\taddress owner\\n\\t) external returns (uint256 shares);\\n\\n\\tfunction redeem(\\n\\t\\tuint256 shares,\\n\\t\\taddress receiver,\\n\\t\\taddress owner\\n\\t) external returns (uint256 assets);\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n\\tfunction maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n\\tfunction maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n\\tfunction maxRedeem(address owner) external view returns (uint256 maxShares);\\n}\\n\",\"keccak256\":\"0x66cf40877e37b481baaeea8b8e86631d60555d664bec25f90e62bb1fe3574a3d\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/ERC4626/IERC4626Accounting.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.16;\\n\\ninterface IERC4626Accounting {\\n\\tfunction totalAssets() external view returns (uint256);\\n\\n\\tfunction convertToShares(uint256 assets) external view returns (uint256);\\n\\n\\tfunction convertToAssets(uint256 shares) external view returns (uint256);\\n\\n\\tfunction previewDeposit(uint256 assets) external view returns (uint256);\\n\\n\\tfunction previewMint(uint256 shares) external view returns (uint256);\\n\\n\\tfunction previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n\\tfunction previewRedeem(uint256 shares) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x900dd449e1fd09603b133cb78281dd7c14a6a2cb647c8eab42768772b9bcd67b\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/MsgStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.16;\\n\\nstruct Message {\\n\\tuint256 value;\\n\\taddress sender;\\n\\taddress client; // In case of emergency withdraw, this is the address to send the funds to\\n\\tuint16 chainId;\\n}\\n\\nstruct Vault {\\n\\tuint16 chainId;\\n\\tuint16 postmanId;\\n\\tbool allowed;\\n}\\n\\nstruct Request {\\n\\taddress vaultAddr;\\n\\tuint256 amount;\\n    uint256 fee;\\n\\taddress allowanceTarget;\\n\\taddress registry;\\n\\tbytes txData;\\n}\\n\\nenum MessageType {\\n\\tNONE,\\n\\tDEPOSIT,\\n\\tWITHDRAW,\\n\\tEMERGENCYWITHDRAW,\\n\\tHARVEST\\n}\\n\",\"keccak256\":\"0x8b81c44611ba59ee103dff78fd5fc026826667a14536edd973d55296251e16b0\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/postOffice/IPostman.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\nimport \\\"../MsgStructs.sol\\\";\\n\\ninterface IPostman {\\n\\tfunction deliverMessage(\\n\\t\\tMessage calldata _msg,\\n\\t\\taddress _dstVautAddress,\\n\\t\\taddress _dstPostman,\\n\\t\\tMessageType _messageType,\\n\\t\\tuint16 _dstChainId,\\n\\t\\taddress _refundTo\\n\\t) external payable;\\n}\\n\",\"keccak256\":\"0x375348fee0f82fb711d0f4584295810048df6a6c3589e27cdb293d3e0e8f9375\",\"license\":\"AGPL-3.0\"},\"src/interfaces/scy/ISCYStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISCYStrategy {\\n\\tfunction deposit(\\n\\t\\taddress receiver,\\n\\t\\taddress tokenIn,\\n\\t\\tuint256 amountTokenToPull,\\n\\t\\tuint256 minSharesOut\\n\\t) external payable returns (uint256 amountSharesOut);\\n\\n\\tfunction redeem(\\n\\t\\taddress receiver,\\n\\t\\tuint256 amountSharesToPull,\\n\\t\\taddress tokenOut,\\n\\t\\tuint256 minTokenOut\\n\\t) external returns (uint256 amountTokenOut);\\n\\n\\tfunction getAndUpdateTvl() external returns (uint256 tvl);\\n\\n\\tfunction getTvl() external view returns (uint256 tvl);\\n\\n\\tfunction MIN_LIQUIDITY() external view returns (uint256);\\n\\n\\tfunction underlying() external view returns (IERC20);\\n\\n\\tfunction sendERC20ToStrategy() external view returns (bool);\\n\\n\\tfunction strategy() external view returns (address payable);\\n\\n\\tfunction underlyingBalance(address) external view returns (uint256);\\n\\n\\tfunction underlyingToShares(uint256 amnt) external view returns (uint256);\\n\\n\\tfunction sharesToUnderlying(uint256 shares) external view returns (uint256);\\n\\n\\tfunction getUpdatedUnderlyingBalance(address) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xd29876d155a4b8aa6f1322f9fd9241bf18ae49801934ea2f527718e9291f6015\",\"license\":\"GPL-3.0-or-later\"},\"src/libraries/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.16;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n\\t/*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tuint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n\\tfunction mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n\\t}\\n\\n\\tfunction mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n\\t}\\n\\n\\tfunction divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n\\t}\\n\\n\\tfunction divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n\\t\\treturn mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction mulDivDown(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tuint256 denominator\\n\\t) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\t// Store x * y in z for now.\\n\\t\\t\\tz := mul(x, y)\\n\\n\\t\\t\\t// Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n\\t\\t\\tif iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Divide z by the denominator.\\n\\t\\t\\tz := div(z, denominator)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction mulDivUp(\\n\\t\\tuint256 x,\\n\\t\\tuint256 y,\\n\\t\\tuint256 denominator\\n\\t) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\t// Store x * y in z for now.\\n\\t\\t\\tz := mul(x, y)\\n\\n\\t\\t\\t// Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n\\t\\t\\tif iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// First, divide z - 1 by the denominator and add 1.\\n\\t\\t\\t// We allow z - 1 to underflow if z is 0, because we multiply the\\n\\t\\t\\t// end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n\\t\\t\\tz := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction rpow(\\n\\t\\tuint256 x,\\n\\t\\tuint256 n,\\n\\t\\tuint256 scalar\\n\\t) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\tswitch x\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\tswitch n\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\t// 0 ** 0 = 1\\n\\t\\t\\t\\t\\tz := scalar\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\t// 0 ** n = 0\\n\\t\\t\\t\\t\\tz := 0\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\tswitch mod(n, 2)\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\t// If n is even, store scalar in z for now.\\n\\t\\t\\t\\t\\tz := scalar\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\t// If n is odd, store x in z for now.\\n\\t\\t\\t\\t\\tz := x\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Shifting right by 1 is like dividing by 2.\\n\\t\\t\\t\\tlet half := shr(1, scalar)\\n\\n\\t\\t\\t\\tfor {\\n\\t\\t\\t\\t\\t// Shift n right by 1 before looping to halve it.\\n\\t\\t\\t\\t\\tn := shr(1, n)\\n\\t\\t\\t\\t} n {\\n\\t\\t\\t\\t\\t// Shift n right by 1 each iteration to halve it.\\n\\t\\t\\t\\t\\tn := shr(1, n)\\n\\t\\t\\t\\t} {\\n\\t\\t\\t\\t\\t// Revert immediately if x ** 2 would overflow.\\n\\t\\t\\t\\t\\t// Equivalent to iszero(eq(div(xx, x), x)) here.\\n\\t\\t\\t\\t\\tif shr(128, x) {\\n\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Store x squared.\\n\\t\\t\\t\\t\\tlet xx := mul(x, x)\\n\\n\\t\\t\\t\\t\\t// Round to the nearest number.\\n\\t\\t\\t\\t\\tlet xxRound := add(xx, half)\\n\\n\\t\\t\\t\\t\\t// Revert if xx + half overflowed.\\n\\t\\t\\t\\t\\tif lt(xxRound, xx) {\\n\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Set x to scaled xxRound.\\n\\t\\t\\t\\t\\tx := div(xxRound, scalar)\\n\\n\\t\\t\\t\\t\\t// If n is even:\\n\\t\\t\\t\\t\\tif mod(n, 2) {\\n\\t\\t\\t\\t\\t\\t// Compute z * x.\\n\\t\\t\\t\\t\\t\\tlet zx := mul(z, x)\\n\\n\\t\\t\\t\\t\\t\\t// If z * x overflowed:\\n\\t\\t\\t\\t\\t\\tif iszero(eq(div(zx, x), z)) {\\n\\t\\t\\t\\t\\t\\t\\t// Revert if x is non-zero.\\n\\t\\t\\t\\t\\t\\t\\tif iszero(iszero(x)) {\\n\\t\\t\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Round to the nearest number.\\n\\t\\t\\t\\t\\t\\tlet zxRound := add(zx, half)\\n\\n\\t\\t\\t\\t\\t\\t// Revert if zx + half overflowed.\\n\\t\\t\\t\\t\\t\\tif lt(zxRound, zx) {\\n\\t\\t\\t\\t\\t\\t\\trevert(0, 0)\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Return properly scaled zxRound.\\n\\t\\t\\t\\t\\t\\tz := div(zxRound, scalar)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256 z) {\\n\\t\\tassembly {\\n\\t\\t\\t// Start off with z at 1.\\n\\t\\t\\tz := 1\\n\\n\\t\\t\\t// Used below to help find a nearby power of 2.\\n\\t\\t\\tlet y := x\\n\\n\\t\\t\\t// Find the lowest power of 2 that is at least sqrt(x).\\n\\t\\t\\tif iszero(lt(y, 0x100000000000000000000000000000000)) {\\n\\t\\t\\t\\ty := shr(128, y) // Like dividing by 2 ** 128.\\n\\t\\t\\t\\tz := shl(64, z) // Like multiplying by 2 ** 64.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x10000000000000000)) {\\n\\t\\t\\t\\ty := shr(64, y) // Like dividing by 2 ** 64.\\n\\t\\t\\t\\tz := shl(32, z) // Like multiplying by 2 ** 32.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x100000000)) {\\n\\t\\t\\t\\ty := shr(32, y) // Like dividing by 2 ** 32.\\n\\t\\t\\t\\tz := shl(16, z) // Like multiplying by 2 ** 16.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x10000)) {\\n\\t\\t\\t\\ty := shr(16, y) // Like dividing by 2 ** 16.\\n\\t\\t\\t\\tz := shl(8, z) // Like multiplying by 2 ** 8.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x100)) {\\n\\t\\t\\t\\ty := shr(8, y) // Like dividing by 2 ** 8.\\n\\t\\t\\t\\tz := shl(4, z) // Like multiplying by 2 ** 4.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x10)) {\\n\\t\\t\\t\\ty := shr(4, y) // Like dividing by 2 ** 4.\\n\\t\\t\\t\\tz := shl(2, z) // Like multiplying by 2 ** 2.\\n\\t\\t\\t}\\n\\t\\t\\tif iszero(lt(y, 0x8)) {\\n\\t\\t\\t\\t// Equivalent to 2 ** z.\\n\\t\\t\\t\\tz := shl(1, z)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Shifting right by 1 is like dividing by 2.\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\t\\t\\tz := shr(1, add(z, div(x, z)))\\n\\n\\t\\t\\t// Compute a rounded down version of z.\\n\\t\\t\\tlet zRoundDown := div(x, z)\\n\\n\\t\\t\\t// If zRoundDown is smaller, use it.\\n\\t\\t\\tif lt(zRoundDown, z) {\\n\\t\\t\\t\\tz := zRoundDown\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x80d6f7e387ea05482e971f71328688e3717e90c73f3a485a56a9d8b298a926e2\",\"license\":\"AGPL-3.0-only\"},\"src/vaults/ERC4626/BatchedWithdraw.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ERC4626 } from \\\"./ERC4626.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nstruct WithdrawRecord {\\n\\tuint256 timestamp;\\n\\tuint256 shares;\\n\\tuint256 value; // this the current value (also max withdraw value)\\n}\\n\\nabstract contract BatchedWithdraw is ERC4626 {\\n\\tusing SafeERC20 for ERC20;\\n\\n\\tevent RequestWithdraw(address indexed caller, address indexed owner, uint256 shares);\\n\\n\\tuint256 public lastHarvestTimestamp;\\n\\tuint256 public pendingWithdraw; // actual amount may be less\\n\\n\\tmapping(address => WithdrawRecord) public withdrawLedger;\\n\\n\\tconstructor() {\\n\\t\\tlastHarvestTimestamp = block.timestamp;\\n\\t}\\n\\n\\tfunction requestRedeem(uint256 shares) public {\\n\\t\\treturn requestRedeem(shares, msg.sender);\\n\\t}\\n\\n\\tfunction requestRedeem(uint256 shares, address owner) public {\\n\\t\\tif (msg.sender != owner) _spendAllowance(owner, msg.sender, shares);\\n\\t\\t_transfer(owner, address(this), shares);\\n\\t\\tWithdrawRecord storage withdrawRecord = withdrawLedger[msg.sender];\\n\\t\\twithdrawRecord.timestamp = block.timestamp;\\n\\t\\twithdrawRecord.shares += shares;\\n\\t\\tuint256 value = convertToAssets(shares);\\n\\t\\twithdrawRecord.value = value;\\n\\t\\tpendingWithdraw += value;\\n\\t\\temit RequestWithdraw(msg.sender, owner, shares);\\n\\t}\\n\\n\\tfunction withdraw(\\n\\t\\tuint256,\\n\\t\\taddress,\\n\\t\\taddress\\n\\t) public pure virtual override returns (uint256) {\\n\\t\\trevert NotImplemented();\\n\\t}\\n\\n\\tfunction redeem(\\n\\t\\tuint256,\\n\\t\\taddress receiver,\\n\\t\\taddress\\n\\t) public virtual override returns (uint256 amountOut) {\\n\\t\\treturn redeem(receiver);\\n\\t}\\n\\n\\t/// @dev safest UI method\\n\\tfunction redeem() public virtual returns (uint256 amountOut) {\\n\\t\\treturn redeem(msg.sender);\\n\\t}\\n\\n\\tfunction redeem(address receiver) public virtual returns (uint256 amountOut) {\\n\\t\\tuint256 shares;\\n\\t\\t(amountOut, shares) = _redeem(msg.sender);\\n\\t\\tERC20(asset).transfer(receiver, amountOut);\\n\\t\\temit Withdraw(msg.sender, receiver, msg.sender, amountOut, shares);\\n\\t}\\n\\n\\t/// @dev should only be called by manager on behalf of xVaults\\n\\tfunction _xRedeem(address xVault) internal virtual returns (uint256 amountOut) {\\n\\t\\tuint256 shares;\\n\\t\\t(amountOut, shares) = _redeem(xVault);\\n\\t\\t_burn(address(this), shares);\\n\\t\\temit Withdraw(xVault, xVault, xVault, amountOut, shares);\\n\\t}\\n\\n\\tfunction _redeem(address account) internal returns (uint256 amountOut, uint256 shares) {\\n\\t\\tWithdrawRecord storage withdrawRecord = withdrawLedger[account];\\n\\n\\t\\tif (withdrawRecord.value == 0) revert ZeroAmount();\\n\\t\\tif (withdrawRecord.timestamp >= lastHarvestTimestamp) revert NotReady();\\n\\n\\t\\tshares = withdrawRecord.shares;\\n\\t\\t// value of shares at time of redemption request\\n\\t\\tuint256 redeemValue = withdrawRecord.value;\\n\\t\\tuint256 currentValue = convertToAssets(shares);\\n\\n\\t\\t// actual amount out is the smaller of currentValue and redeemValue\\n\\t\\tamountOut = currentValue < redeemValue ? currentValue : redeemValue;\\n\\n\\t\\t// update total pending withdraw\\n\\t\\tpendingWithdraw -= redeemValue;\\n\\n\\t\\t// important pendingWithdraw should update prior to beforeWithdraw call\\n\\t\\tbeforeWithdraw(amountOut, shares);\\n\\t\\twithdrawRecord.value = 0;\\n\\t\\t_burn(address(this), shares);\\n\\t}\\n\\n\\tfunction cancelRedeem() public virtual {\\n\\t\\tWithdrawRecord storage withdrawRecord = withdrawLedger[msg.sender];\\n\\n\\t\\tuint256 shares = withdrawRecord.shares;\\n\\t\\t// value of shares at time of redemption request\\n\\t\\tuint256 redeemValue = withdrawRecord.value;\\n\\t\\tuint256 currentValue = convertToAssets(shares);\\n\\n\\t\\t// update accounting\\n\\t\\twithdrawRecord.value = 0;\\n\\t\\tpendingWithdraw -= redeemValue;\\n\\n\\t\\t// if vault lost money, shares stay the same\\n\\t\\tif (currentValue < redeemValue) return _transfer(address(this), msg.sender, shares);\\n\\n\\t\\t// // if vault earned money, subtract earnings since withdrawal request\\n\\t\\tuint256 sharesOut = (shares * redeemValue) / currentValue;\\n\\t\\tuint256 sharesToBurn = shares - sharesOut;\\n\\n\\t\\t_transfer(address(this), msg.sender, sharesOut);\\n\\t\\t_burn(address(this), sharesToBurn);\\n\\t}\\n\\n\\t/// @notice UI method to view cancellation penalty\\n\\tfunction getPenalty() public view returns (uint256) {\\n\\t\\tWithdrawRecord storage withdrawRecord = withdrawLedger[msg.sender];\\n\\t\\tuint256 shares = withdrawRecord.shares;\\n\\n\\t\\tuint256 redeemValue = withdrawRecord.value;\\n\\t\\tuint256 currentValue = convertToAssets(shares);\\n\\n\\t\\tif (currentValue < redeemValue) return 0;\\n\\t\\treturn (1e18 * (currentValue - redeemValue)) / redeemValue;\\n\\t}\\n\\n\\t/// UTILS\\n\\tfunction redeemIsReady(address user) external view returns (bool) {\\n\\t\\tWithdrawRecord storage withdrawRecord = withdrawLedger[user];\\n\\t\\treturn lastHarvestTimestamp > withdrawRecord.timestamp;\\n\\t}\\n\\n\\tfunction getWithdrawStatus(address user) external view returns (WithdrawRecord memory) {\\n\\t\\treturn withdrawLedger[user];\\n\\t}\\n\\n\\terror Expired();\\n\\terror NotImplemented();\\n\\terror NotReady();\\n\\terror ZeroAmount();\\n}\\n\",\"keccak256\":\"0x927ec88d277d3300d58e8cf040c41f8bd8d74eead2a36ba18851ccb49a1632d4\",\"license\":\"AGPL-3.0\"},\"src/vaults/ERC4626/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { FixedPointMathLib } from \\\"../../libraries/FixedPointMathLib.sol\\\";\\nimport { IERC4626 } from \\\"../../interfaces/ERC4626/IERC4626.sol\\\";\\nimport { Accounting } from \\\"../../common/Accounting.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { Auth, AuthConfig } from \\\"../../common/Auth.sol\\\";\\nimport { Fees, FeeConfig } from \\\"../../common/Fees.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is Auth, Accounting, Fees, IERC4626, ERC20 {\\n\\tusing SafeERC20 for ERC20;\\n\\tusing FixedPointMathLib for uint256;\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                               CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\t// locked liquidity to prevent rounding errors\\n\\tuint256 public constant MIN_LIQUIDITY = 1e3;\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tERC20 immutable asset;\\n\\n\\tconstructor(\\n\\t\\tERC20 _asset,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol\\n\\t) ERC20(_name, _symbol) {\\n\\t\\tasset = _asset;\\n\\t}\\n\\n\\tfunction decimals() public view override returns (uint8) {\\n\\t\\treturn asset.decimals();\\n\\t}\\n\\n\\tfunction totalAssets() public view virtual override returns (uint256) {\\n\\t\\treturn asset.balanceOf(address(this));\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n\\t\\t// This check is no longer necessary because we use MIN_LIQUIDITY\\n\\t\\t// Check for rounding error since we round down in previewDeposit.\\n\\t\\t// require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\t\\tshares = previewDeposit(assets);\\n\\n\\t\\t// Need to transfer before minting or ERC777s could reenter.\\n\\t\\tasset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n\\t\\t// lock minimum liquidity if totalSupply is 0\\n\\t\\tif (totalSupply() == 0) {\\n\\t\\t\\tif (MIN_LIQUIDITY > shares) revert MinLiquidity();\\n\\t\\t\\tshares -= MIN_LIQUIDITY;\\n\\t\\t\\t_mint(address(1), MIN_LIQUIDITY);\\n\\t\\t}\\n\\n\\t\\t_mint(receiver, shares);\\n\\n\\t\\temit Deposit(msg.sender, receiver, assets, shares);\\n\\n\\t\\tafterDeposit(assets, shares);\\n\\t}\\n\\n\\tfunction mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n\\t\\tassets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n\\t\\t// Need to transfer before minting or ERC777s could reenter.\\n\\t\\tasset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n\\t\\t_mint(receiver, shares);\\n\\n\\t\\temit Deposit(msg.sender, receiver, assets, shares);\\n\\n\\t\\tafterDeposit(assets, shares);\\n\\t}\\n\\n\\tfunction withdraw(\\n\\t\\tuint256 assets,\\n\\t\\taddress receiver,\\n\\t\\taddress owner\\n\\t) public virtual returns (uint256 shares) {\\n\\t\\tshares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n\\t\\t// if not owner, allowance must be enforced\\n\\t\\tif (msg.sender != owner) _spendAllowance(owner, msg.sender, shares);\\n\\n\\t\\tbeforeWithdraw(assets, shares);\\n\\n\\t\\t_burn(owner, shares);\\n\\n\\t\\temit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n\\t\\tasset.safeTransfer(receiver, assets);\\n\\t}\\n\\n\\tfunction redeem(\\n\\t\\tuint256 shares,\\n\\t\\taddress receiver,\\n\\t\\taddress owner\\n\\t) public virtual returns (uint256 assets) {\\n\\t\\t// if not owner, allowance must be enforced\\n\\t\\tif (msg.sender != owner) _spendAllowance(owner, msg.sender, shares);\\n\\n\\t\\t// This check is no longer necessary because we use MIN_LIQUIDITY\\n\\t\\t// Check for rounding error since we round down in previewRedeem.\\n\\t\\t// require((assets = previewRedeem(shares)) != 0, \\\"ZEROassetS\\\");\\n\\t\\tassets = previewRedeem(shares);\\n\\n\\t\\tbeforeWithdraw(assets, shares);\\n\\n\\t\\t_burn(owner, shares);\\n\\n\\t\\temit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n\\t\\tasset.safeTransfer(receiver, assets);\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction maxDeposit(address) public view virtual returns (uint256) {\\n\\t\\treturn type(uint256).max;\\n\\t}\\n\\n\\tfunction maxMint(address) public view virtual returns (uint256) {\\n\\t\\treturn type(uint256).max;\\n\\t}\\n\\n\\tfunction maxWithdraw(address owner) public view virtual returns (uint256) {\\n\\t\\treturn convertToAssets(balanceOf(owner));\\n\\t}\\n\\n\\tfunction maxRedeem(address owner) public view virtual returns (uint256) {\\n\\t\\treturn balanceOf(owner);\\n\\t}\\n\\n\\t/*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n\\tfunction beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n\\tfunction afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n\\n\\t// OVERRIDES\\n\\tfunction totalSupply() public view override(Accounting, ERC20) returns (uint256) {\\n\\t\\treturn ERC20.totalSupply();\\n\\t}\\n\\n\\terror MinLiquidity();\\n}\\n\",\"keccak256\":\"0x584d884bea253037fef85c95ad466fed51c34a00910af0c7a416083c090cbaf2\",\"license\":\"AGPL-3.0-only\"},\"src/vaults/SectorBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ERC4626, FixedPointMathLib, SafeERC20 } from \\\"./ERC4626/ERC4626.sol\\\";\\nimport { ISCYStrategy } from \\\"../interfaces/scy/ISCYStrategy.sol\\\";\\nimport { BatchedWithdraw } from \\\"./ERC4626/BatchedWithdraw.sol\\\";\\nimport { XChainIntegrator } from \\\"../common/XChainIntegrator.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/MsgStructs.sol\\\";\\n\\nabstract contract SectorBase is BatchedWithdraw, XChainIntegrator {\\n\\tusing FixedPointMathLib for uint256;\\n\\tusing SafeERC20 for ERC20;\\n\\n\\tevent Harvest(\\n\\t\\taddress indexed treasury,\\n\\t\\tuint256 underlyingProfit,\\n\\t\\tuint256 performanceFee,\\n\\t\\tuint256 managementFee,\\n\\t\\tuint256 sharesFees,\\n\\t\\tuint256 tvl\\n\\t);\\n\\n\\tuint256 public totalChildHoldings;\\n\\tuint256 public floatAmnt; // amount of underlying tracked in vault\\n\\n\\tfunction _harvest(uint256 currentChildHoldings) internal {\\n\\t\\t// withdrawFromStrategies should be called prior to harvest to ensure this tx doesn't revert\\n\\t\\tif (floatAmnt < pendingWithdraw) revert NotEnoughtFloat();\\n\\n\\t\\tuint256 profit = currentChildHoldings > totalChildHoldings\\n\\t\\t\\t? currentChildHoldings - totalChildHoldings\\n\\t\\t\\t: 0;\\n\\n\\t\\tuint256 timestamp = block.timestamp;\\n\\t\\tuint256 tvl = currentChildHoldings + floatAmnt;\\n\\n\\t\\t// totalChildHoldings need to be updated before fees computation\\n\\t\\ttotalChildHoldings = currentChildHoldings;\\n\\n\\t\\t// PROCESS VAULT FEES\\n\\t\\tuint256 _performanceFee = profit == 0 ? 0 : (profit * performanceFee) / 1e18;\\n\\t\\tuint256 _managementFee = managementFee == 0\\n\\t\\t\\t? 0\\n\\t\\t\\t: (managementFee * tvl * (timestamp - lastHarvestTimestamp)) / 1e18 / 365 days;\\n\\n\\t\\tuint256 totalFees = _performanceFee + _managementFee;\\n\\t\\tuint256 feeShares;\\n\\n\\t\\tif (totalFees > 0) {\\n\\t\\t\\t// this results in more accurate accounting considering dilution\\n\\t\\t\\tfeeShares = totalFees.mulDivDown(totalSupply(), tvl - totalFees);\\n\\t\\t\\t_mint(treasury, feeShares);\\n\\t\\t}\\n\\n\\t\\temit Harvest(treasury, profit, _performanceFee, _managementFee, feeShares, tvl);\\n\\n\\t\\t// this enables withdrawals requested prior to this timestamp\\n\\t\\tlastHarvestTimestamp = timestamp;\\n\\t}\\n\\n\\t/// @notice this method allows an arbitrary method to be called by the owner in case of emergency\\n\\t/// owner must be a timelock contract in order to allow users to redeem funds in case they suspect\\n\\t/// this action to be malicious\\n\\tfunction emergencyAction(address target, bytes calldata callData) public onlyOwner {\\n\\t\\tAddress.functionCall(target, callData);\\n\\t\\temit EmergencyAction(target, callData);\\n\\t}\\n\\n\\tfunction _checkSlippage(\\n\\t\\tuint256 expectedValue,\\n\\t\\tuint256 actualValue,\\n\\t\\tuint256 maxDelta\\n\\t) internal pure {\\n\\t\\tuint256 delta = expectedValue > actualValue\\n\\t\\t\\t? expectedValue - actualValue\\n\\t\\t\\t: actualValue - expectedValue;\\n\\t\\tif (delta > maxDelta) revert SlippageExceeded();\\n\\t}\\n\\n\\tfunction totalAssets() public view virtual override returns (uint256) {\\n\\t\\treturn floatAmnt + totalChildHoldings;\\n\\t}\\n\\n\\t/// INTERFACE UTILS\\n\\n\\t/// @dev returns a cached value used for withdrawals\\n\\tfunction underlyingBalance(address user) public view returns (uint256) {\\n\\t\\tuint256 shares = balanceOf(user);\\n\\t\\treturn convertToAssets(shares);\\n\\t}\\n\\n\\tfunction underlyingDecimals() public view returns (uint8) {\\n\\t\\treturn asset.decimals();\\n\\t}\\n\\n\\tfunction underlying() public view returns (address) {\\n\\t\\treturn address(asset);\\n\\t}\\n\\n\\t/// OVERRIDES\\n\\n\\tfunction afterDeposit(uint256 assets, uint256) internal override {\\n\\t\\tfloatAmnt += assets;\\n\\t}\\n\\n\\tfunction beforeWithdraw(uint256 assets, uint256) internal override {\\n\\t\\t// this check prevents withdrawing more underlying from the vault then\\n\\t\\t// what we need to keep to honor withdrawals\\n\\t\\tif (floatAmnt < assets || floatAmnt - assets < pendingWithdraw) revert NotEnoughtFloat();\\n\\t\\tfloatAmnt -= assets;\\n\\t}\\n\\n\\tevent RegisterDeposit(uint256 total);\\n\\tevent EmergencyWithdraw(address vault, address client, uint256 shares);\\n\\tevent EmergencyAction(address target, bytes callData);\\n\\n\\terror MaxRedeemNotZero();\\n\\terror NotEnoughtFloat();\\n\\terror WrongUnderlying();\\n\\terror SlippageExceeded();\\n\\terror StrategyExists();\\n\\terror StrategyNotFound();\\n\\terror MissingDepositValue();\\n}\\n\",\"keccak256\":\"0x7c7612d2088417ea322d0223e647fd63b1b316aeef1ac83e559abd69868250d5\",\"license\":\"AGPL-3.0\"},\"src/vaults/SectorVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ERC4626, FixedPointMathLib, SafeERC20, Fees, FeeConfig, Auth, AuthConfig } from \\\"./ERC4626/ERC4626.sol\\\";\\nimport { ISCYStrategy } from \\\"../interfaces/scy/ISCYStrategy.sol\\\";\\nimport { BatchedWithdraw } from \\\"./ERC4626/BatchedWithdraw.sol\\\";\\nimport { SectorBase } from \\\"./SectorBase.sol\\\";\\nimport \\\"../interfaces/MsgStructs.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n// TODO native asset deposit + flow\\n\\nstruct RedeemParams {\\n\\tISCYStrategy strategy;\\n\\tuint256 shares;\\n\\tuint256 minTokenOut;\\n}\\n\\nstruct DepositParams {\\n\\tISCYStrategy strategy;\\n\\tuint256 amountIn;\\n\\tuint256 minSharesOut;\\n}\\n\\ncontract SectorVault is SectorBase {\\n\\tusing FixedPointMathLib for uint256;\\n\\tusing SafeERC20 for ERC20;\\n\\n\\t/// if vaults accepts native asset we set asset to address 0;\\n\\taddress internal constant NATIVE = address(0);\\n\\n\\tmapping(ISCYStrategy => bool) public strategyExists;\\n\\taddress[] public strategyIndex;\\n\\taddress[] public bridgeQueue;\\n\\tMessage[] internal depositQueue;\\n\\n\\tuint256 public totalStrategyHoldings;\\n\\n\\tconstructor(\\n\\t\\tERC20 asset_,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tAuthConfig memory authConfig,\\n\\t\\tFeeConfig memory feeConfig\\n\\t) ERC4626(asset_, _name, _symbol) Auth(authConfig) Fees(feeConfig) BatchedWithdraw() {}\\n\\n\\tfunction addStrategy(ISCYStrategy strategy) public onlyOwner {\\n\\t\\tif (strategyExists[strategy]) revert StrategyExists();\\n\\n\\t\\t/// make sure underlying matches\\n\\t\\tif (address(strategy.underlying()) != address(asset)) revert WrongUnderlying();\\n\\n\\t\\tstrategyExists[strategy] = true;\\n\\t\\tstrategyIndex.push(address(strategy));\\n\\t\\temit AddStrategy(address(strategy));\\n\\t}\\n\\n\\tfunction removeStrategy(ISCYStrategy strategy) public onlyOwner {\\n\\t\\tif (!strategyExists[strategy]) revert StrategyNotFound();\\n\\t\\tstrategyExists[strategy] = false;\\n\\t\\tuint256 length = strategyIndex.length;\\n\\t\\t// replace current index with last strategy and pop the index array\\n\\t\\tuint256 i;\\n\\t\\tfor (i; i < length; ++i) if (address(strategy) == strategyIndex[i]) break;\\n\\t\\tstrategyIndex[i] = strategyIndex[length - 1];\\n\\t\\tstrategyIndex.pop();\\n\\t\\temit RemoveStrategy(address(strategy));\\n\\t}\\n\\n\\tfunction totalStrategies() external view returns (uint256) {\\n\\t\\treturn strategyIndex.length;\\n\\t}\\n\\n\\tfunction getAllStrategies() external view returns (address[] memory) {\\n\\t\\treturn strategyIndex;\\n\\t}\\n\\n\\t/// We compute expected tvl off-chain first, to ensure this transactions isn't sandwitched\\n\\tfunction harvest(uint256 expectedTvl, uint256 maxDelta) public onlyRole(MANAGER) {\\n\\t\\tuint256 currentChildHoldings = _getStrategyHoldings();\\n\\t\\tuint256 tvl = currentChildHoldings + floatAmnt;\\n\\t\\t_checkSlippage(expectedTvl, tvl, maxDelta);\\n\\t\\t// harvest event emitted here\\n\\t\\t_harvest(currentChildHoldings);\\n\\t}\\n\\n\\t/// this can be done in parts in case gas limit is reached\\n\\tfunction depositIntoStrategies(DepositParams[] calldata params) public onlyRole(MANAGER) {\\n\\t\\tuint256 l = params.length;\\n\\t\\tfor (uint256 i; i < l; ++i) {\\n\\t\\t\\tDepositParams memory param = params[i];\\n\\t\\t\\tuint256 amountIn = param.amountIn;\\n\\t\\t\\tif (amountIn == 0) continue;\\n\\t\\t\\tISCYStrategy strategy = param.strategy;\\n\\t\\t\\tif (!strategyExists[strategy]) revert StrategyNotFound();\\n\\t\\t\\t// update underlying float accouting\\n\\t\\t\\tbeforeWithdraw(amountIn, 0);\\n\\t\\t\\t/// push funds to avoid approvals\\n\\t\\t\\tasset.safeTransfer(strategy.strategy(), amountIn);\\n\\t\\t\\tstrategy.deposit(address(this), address(asset), 0, param.minSharesOut);\\n\\t\\t\\ttotalChildHoldings += amountIn;\\n\\t\\t\\temit DepositIntoStrategy(msg.sender, address(strategy), amountIn);\\n\\t\\t}\\n\\t}\\n\\n\\t/// this can be done in parts in case gas limit is reached\\n\\tfunction withdrawFromStrategies(RedeemParams[] calldata params) public onlyRole(MANAGER) {\\n\\t\\tuint256 l = params.length;\\n\\t\\tfor (uint256 i; i < l; ++i) {\\n\\t\\t\\tRedeemParams memory param = params[i];\\n\\t\\t\\tuint256 shares = param.shares;\\n\\t\\t\\tif (shares == 0) continue;\\n\\t\\t\\tISCYStrategy strategy = param.strategy;\\n\\t\\t\\tif (!strategyExists[strategy]) revert StrategyNotFound();\\n\\n\\t\\t\\t// no need to push share tokens - contract can burn them\\n\\t\\t\\tuint256 amountOut = strategy.redeem(\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\tshares,\\n\\t\\t\\t\\taddress(asset), // token out is allways asset\\n\\t\\t\\t\\tparam.minTokenOut\\n\\t\\t\\t);\\n\\t\\t\\ttotalChildHoldings -= amountOut;\\n\\t\\t\\t// update underlying float accounting\\n\\t\\t\\tafterDeposit(amountOut, 0);\\n\\t\\t\\temit WithdrawFromStrategy(msg.sender, address(strategy), amountOut);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction emergencyRedeem() public {\\n\\t\\tuint256 _totalSupply = totalSupply();\\n\\t\\tuint256 shares = balanceOf(msg.sender);\\n\\t\\tif (shares == 0) return;\\n\\t\\t_burn(msg.sender, shares);\\n\\n\\t\\t// redeem proportional share of vault's underlying float balance\\n\\t\\tuint256 underlyingShare = (floatAmnt * shares) / _totalSupply;\\n\\t\\tbeforeWithdraw(underlyingShare, 0);\\n\\t\\tasset.safeTransfer(msg.sender, underlyingShare);\\n\\n\\t\\tuint256 l = strategyIndex.length;\\n\\n\\t\\t// redeem proportional share of each strategy\\n\\t\\tfor (uint256 i; i < l; ++i) {\\n\\t\\t\\tERC20 stratToken = ERC20(strategyIndex[i]);\\n\\t\\t\\tuint256 balance = stratToken.balanceOf(address(this));\\n\\t\\t\\tuint256 userShares = (shares * balance) / _totalSupply;\\n\\t\\t\\tif (userShares == 0) continue;\\n\\t\\t\\tstratToken.safeTransfer(msg.sender, userShares);\\n\\t\\t}\\n\\t}\\n\\n\\t/// gets accurate strategy holdings denominated in asset\\n\\tfunction _getStrategyHoldings() internal returns (uint256 tvl) {\\n\\t\\tuint256 l = strategyIndex.length;\\n\\t\\t/// TODO compute realistic limit for strategy array lengh to stay within gas limit\\n\\t\\tfor (uint256 i; i < l; ++i) {\\n\\t\\t\\tISCYStrategy strategy = ISCYStrategy(payable(strategyIndex[i]));\\n\\t\\t\\ttvl += strategy.getUpdatedUnderlyingBalance(address(this));\\n\\t\\t}\\n\\t}\\n\\n\\t/// returns expected tvl (used for estimate)\\n\\tfunction getTvl() public view returns (uint256 tvl) {\\n\\t\\tuint256 l = strategyIndex.length;\\n\\t\\t// there should be no untrusted strategies in this array\\n\\t\\tfor (uint256 i; i < l; ++i) {\\n\\t\\t\\tISCYStrategy strategy = ISCYStrategy(payable(strategyIndex[i]));\\n\\t\\t\\ttvl += strategy.underlyingBalance(address(this));\\n\\t\\t}\\n\\t\\ttvl += asset.balanceOf(address(this));\\n\\t}\\n\\n\\tfunction totalAssets() public view virtual override returns (uint256) {\\n\\t\\treturn floatAmnt + totalChildHoldings;\\n\\t}\\n\\n\\t/// INTERFACE UTILS\\n\\n\\t/// @dev returns accurate value used to estimate current value\\n\\tfunction estimateUnderlyingBalance(address user) external view returns (uint256) {\\n\\t\\tuint256 shares = balanceOf(user);\\n\\t\\t// value based on last harvest exchange rate\\n\\t\\tuint256 cachedValue = convertToAssets(shares);\\n\\t\\t// valued based on current tvl\\n\\t\\tuint256 currentValue = sharesToUnderlying(shares);\\n\\t\\treturn cachedValue > currentValue ? currentValue : cachedValue;\\n\\t}\\n\\n\\t/// @dev current exchange rate (different from previewDeposit rate)\\n\\t/// this should be used for estiamtes of withdrawals\\n\\tfunction sharesToUnderlying(uint256 shares) public view returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\t\\treturn supply == 0 ? shares : shares.mulDivDown(getTvl(), supply);\\n\\t}\\n\\n\\t/// @dev current exchange rate (different from previewDeposit / previewWithdrawal rate)\\n\\t/// this should be used estimate of deposit fee\\n\\tfunction underlyingToShares(uint256 underlyingAmnt) public view returns (uint256) {\\n\\t\\tuint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n\\t\\treturn supply == 0 ? underlyingAmnt : underlyingAmnt.mulDivDown(supply, getTvl());\\n\\t}\\n\\n\\t/*/////////////////////////////////////////////////////////\\n\\t\\t\\t\\t\\tCrossChain functionality\\n\\t/////////////////////////////////////////////////////////*/\\n\\n\\tfunction _handleMessage(MessageType _type, Message calldata _msg) internal override {\\n\\t\\tif (_type == MessageType.DEPOSIT) _receiveDeposit(_msg);\\n\\t\\telse if (_type == MessageType.HARVEST) _receiveHarvest(_msg);\\n\\t\\telse if (_type == MessageType.WITHDRAW) _receiveWithdraw(_msg);\\n\\t\\telse if (_type == MessageType.EMERGENCYWITHDRAW) _receiveEmergencyWithdraw(_msg);\\n\\t\\telse revert NotImplemented();\\n\\t}\\n\\n\\tfunction _receiveDeposit(Message calldata _msg) internal {\\n\\t\\tdepositQueue.push(_msg);\\n\\t}\\n\\n\\tfunction _receiveWithdraw(Message calldata _msg) internal {\\n\\t\\tif (withdrawLedger[_msg.sender].value == 0) bridgeQueue.push(_msg.sender);\\n\\n\\t\\t/// value here is the fraction of the shares owned by the vault\\n\\t\\t/// since the xVault doesn't know how many shares it holds\\n\\t\\tuint256 xVaultShares = balanceOf(_msg.sender);\\n\\t\\tuint256 shares = (_msg.value * xVaultShares) / 1e18;\\n\\t\\trequestRedeem(shares, _msg.sender);\\n\\t}\\n\\n\\tfunction _receiveEmergencyWithdraw(Message calldata _msg) internal {\\n\\t\\tuint256 transferShares = (_msg.value * balanceOf(_msg.sender)) / 1e18;\\n\\n\\t\\t_transfer(_msg.sender, _msg.client, transferShares);\\n\\t\\temit EmergencyWithdraw(_msg.sender, _msg.client, transferShares);\\n\\t}\\n\\n\\t// TODO should it trigger harvest first?\\n\\tfunction _receiveHarvest(Message calldata _msg) internal {\\n\\t\\tuint256 xVaultUnderlyingBalance = underlyingBalance(_msg.sender);\\n\\n\\t\\tVault memory vault = addrBook[_msg.sender];\\n\\t\\t_sendMessage(\\n\\t\\t\\t_msg.sender,\\n\\t\\t\\tvault,\\n\\t\\t\\tMessage(xVaultUnderlyingBalance, address(this), address(0), chainId),\\n\\t\\t\\tMessageType.HARVEST\\n\\t\\t);\\n\\t}\\n\\n\\tfunction processIncomingXFunds() external override onlyRole(MANAGER) {\\n\\t\\tuint256 length = depositQueue.length;\\n\\t\\tuint256 totalDeposit = 0;\\n\\t\\tfor (uint256 i = length; i > 0; ) {\\n\\t\\t\\tMessage memory _msg = depositQueue[i - 1];\\n\\t\\t\\tdepositQueue.pop();\\n\\n\\t\\t\\tuint256 shares = previewDeposit(_msg.value);\\n\\t\\t\\t// lock minimum liquidity if totalSupply is 0\\n\\t\\t\\t// if i > 0 we can skip this\\n\\t\\t\\tif (i == 0 && totalSupply() == 0) {\\n\\t\\t\\t\\tif (MIN_LIQUIDITY > shares) revert MinLiquidity();\\n\\t\\t\\t\\tshares -= MIN_LIQUIDITY;\\n\\t\\t\\t\\t_mint(address(1), MIN_LIQUIDITY);\\n\\t\\t\\t}\\n\\t\\t\\t_mint(_msg.sender, shares);\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ttotalDeposit += _msg.value;\\n\\t\\t\\t\\ti--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Should account for fees paid in tokens for using bridge\\n\\t\\t// Also, if a value hasn't arrived manager will not be able to register any value\\n\\t\\tif (totalDeposit > (asset.balanceOf(address(this)) - floatAmnt - pendingWithdraw))\\n\\t\\t\\trevert MissingIncomingXFunds();\\n\\n\\t\\t// update floatAmnt with deposited funds\\n\\t\\tafterDeposit(totalDeposit, 0);\\n\\t\\t/// TODO should we add more params here?\\n\\t\\temit RegisterIncomingFunds(totalDeposit);\\n\\t}\\n\\n\\t// Problem -> bridgeQueue has an order and request array has to follow this order\\n\\t// Maybe change how withdraws are saved?\\n\\tfunction processXWithdraw(Request[] calldata requests) external onlyRole(MANAGER) {\\n\\t\\tuint256 length = bridgeQueue.length;\\n\\n\\t\\tuint256 total = 0;\\n\\t\\tfor (uint256 i = length - 1; i > 0; ) {\\n\\t\\t\\taddress vAddr = bridgeQueue[i];\\n\\n\\t\\t\\tif (requests[i].vaultAddr != vAddr) revert VaultAddressNotMatch();\\n\\n\\t\\t\\t// this returns the underlying amount the vault is withdrawing\\n\\t\\t\\tuint256 amountOut = _xRedeem(vAddr);\\n\\t\\t\\tbridgeQueue.pop();\\n\\n\\t\\t\\tVault memory vault = addrBook[vAddr];\\n\\t\\t\\t_sendMessage(\\n\\t\\t\\t\\tvAddr,\\n\\t\\t\\t\\tvault,\\n\\t\\t\\t\\tMessage(amountOut, address(this), address(0), chainId),\\n\\t\\t\\t\\tMessageType.WITHDRAW\\n\\t\\t\\t);\\n\\n\\t\\t\\t_sendTokens(\\n\\t\\t\\t\\tunderlying(),\\n\\t\\t\\t\\trequests[i].allowanceTarget,\\n\\t\\t\\t\\trequests[i].registry,\\n\\t\\t\\t\\tvAddr,\\n\\t\\t\\t\\tamountOut,\\n\\t\\t\\t\\taddrBook[vAddr].chainId,\\n\\t\\t\\t\\trequests[i].txData\\n\\t\\t\\t);\\n\\n\\t\\t\\temit BridgeAsset(chainId, addrBook[vAddr].chainId, amountOut);\\n\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ttotal += amountOut;\\n\\t\\t\\t\\ti--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tbeforeWithdraw(total, 0);\\n\\t}\\n\\n\\terror VaultAddressNotMatch();\\n\\tevent AddStrategy(address indexed strategy);\\n\\tevent RemoveStrategy(address indexed strategy);\\n\\tevent DepositIntoStrategy(address caller, address strategy, uint256 amount);\\n\\tevent WithdrawFromStrategy(address caller, address strategy, uint256 amount);\\n}\\n\",\"keccak256\":\"0x1ace722aa2fc2f7a2fd11c08db8527b016af059525bb65c1c3bb25017a9acd31\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c060405261ffff461660a0523480156200001957600080fd5b5060405162005e1d38038062005e1d8339810160408190526200003c916200051c565b8151600180546001600160a01b0319166001600160a01b0390921691821790556040805160008152602081019290925286918691869183918391879189917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0910160405180910390a18051620000b590600090620002aa565b600154620000dd9060008051602062005dfd833981519152906001600160a01b0316620002aa565b6200010260008051602062005dfd8339815191528260200151620002aa60201b60201c565b8051620001209060008051602062005ddd83398151915290620002aa565b6200014560008051602062005ddd8339815191528260200151620002aa60201b60201c565b6200016a60008051602062005ddd8339815191528260400151620002aa60201b60201c565b6200019460008051602062005ddd83398151915260008051602062005dfd8339815191526200034b565b508051600580546001600160a01b0319166001600160a01b0390921691821790556020820151600355604080830151600455517fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef390600090a27f8b940a95968ad5b511f89b01075446a4fe9f614f2dc5fbb9e9a6b227d6d4fd7081602001516040516200022391815260200190565b60405180910390a17fd87632b1c6ebfa21acbca0e3279b3cf6385a377cb8fda51e5b866baa6e6012ab81604001516040516200026191815260200190565b60405180910390a15060096200027883826200069f565b50600a6200028782826200069f565b5050506001600160a01b03909216608052505042600b55506200076b9350505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000347576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003063390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6001600160a01b0381168114620003ac57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715620003ea57620003ea620003af565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200041b576200041b620003af565b604052919050565b600082601f8301126200043557600080fd5b81516001600160401b03811115620004515762000451620003af565b602062000467601f8301601f19168201620003f0565b82815285828487010111156200047c57600080fd5b60005b838110156200049c5785810183015182820184015282016200047f565b506000928101909101919091529392505050565b600060608284031215620004c357600080fd5b604051606081016001600160401b0381118282101715620004e857620004e8620003af565b80604052508091508251620004fd8162000396565b8082525060208301516020820152604083015160408201525092915050565b60008060008060008587036101208112156200053757600080fd5b8651620005448162000396565b60208801519096506001600160401b03808211156200056257600080fd5b620005708a838b0162000423565b965060408901519150808211156200058757600080fd5b506200059689828a0162000423565b9450506060605f1982011215620005ac57600080fd5b50620005b7620003c5565b6060870151620005c78162000396565b81526080870151620005d98162000396565b602082015260a0870151620005ee8162000396565b60408201529150620006048760c08801620004b0565b90509295509295909350565b600181811c908216806200062557607f821691505b6020821081036200064657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200069a57600081815260208120601f850160051c81016020861015620006755750805b601f850160051c820191505b81811015620006965782815560010162000681565b5050505b505050565b81516001600160401b03811115620006bb57620006bb620003af565b620006d381620006cc845462000610565b846200064c565b602080601f8311600181146200070b5760008415620006f25750858301515b600019600386901b1c1916600185901b17855562000696565b600085815260208120601f198616915b828110156200073c578886015182559484019460019091019084016200071b565b50858210156200075b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a0516155dc6200080160003960008181611291015281816113b7015281816122b40152818161322b0152818161328801526141c1015260008181610f3a015281816110b4015281816116dc015281816117a2015281816119f801528181611c0101528181611c4a01528181611ee6015281816120690152818161210801528181612583015261284401526155dc6000f3fe608060405234801561001057600080fd5b50600436106104095760003560e01c806301e1d1141461040e57806301ffc9a71461042957806306fdde031461044c57806307a2d13a14610461578063095ea7b3146104745780630a28a47714610487578063107703ab1461049a578063175188e8146104af57806318160ddd146104c25780631b2df850146104ca57806321b77d63146104df578063223e5479146104e85780632257a738146104fb57806323b872dd14610504578063248a9ca31461051757806325a760c21461052a57806326d83182146105445780632940ec00146105575780632f2ff15d14610560578063313ce5671461052a5780633230b79b14610573578063341a7b42146105a057806336568abe146105b357806339509351146105c65780633e642575146105d9578063402d267d146105ec578063415c49e2146106015780634cdad5061461061457806351a72964146106275780635b9d26581461065c57806361d027b3146106a65780636e553f65146106c65780636f307dc3146106d957806370897b23146106e157806370a08231146106f4578063724c184c1461070757806373b90eac1461071c578063793361dc1461072457806379ba5097146107375780638576829e1461073f57806387788782146107485780638954b3e0146107515780638c871019146107595780638da5cb5b1461076c57806391d148541461077f57806394bf804d1461079257806395a2251f146107a557806395d89b41146107b857806396fbebcc146107c05780639908840c146107d35780639c508d4a146107e1578063a217fddf14610815578063a457c2d71461081d578063a6f7f5d614610830578063a879f97614610839578063a9059cbb14610897578063aa2f892d146108aa578063b3d7f6b9146108bd578063b460af94146108d0578063b5ca7704146108e3578063ba087652146108f6578063bdca916514610909578063be040fb014610918578063bf5ab6f514610920578063c3b2886414610933578063c63d75b6146105ec578063c6e6f59214610948578063c737186a1461095b578063ce96cb771461096e578063cee027f214610981578063d075dd4214610994578063d547741f1461099c578063d7b9991c146109af578063d905777e146109c2578063dd62ed3e146109d5578063e30c3978146109e8578063e3f62d5d146109fb578063e4a4b7b114610a1e578063e56e56db14610a31578063e6a2966614610a39578063eacff5ba14610a41578063ecad956514610a54578063ef8b30f714610a5d578063f0f4426014610a70578063f2d6f5a814610a83578063f2fde38b14610a96578063f3e7387514610aa9578063f96d7b8014610abc578063fc6b1ebe14610ac4578063fe56e23214610acd578063fef5745a14610ae0575b600080fd5b610416610af3565b6040519081526020015b60405180910390f35b61043c61043736600461485a565b610b0a565b6040519015158152602001610420565b610454610b41565b60405161042091906148a8565b61041661046f3660046148db565b610bd3565b61043c610482366004614909565b610c07565b6104166104953660046148db565b610c1f565b6104ad6104a8366004614935565b610c46565b005b6104ad6104bd366004614965565b610d0c565b610416610ec9565b61041660008051602061550783398151915281565b6104166103e881565b6104ad6104f6366004614965565b610ed4565b610416600b5481565b61043c610512366004614982565b611077565b6104166105253660046148db565b61109b565b6105326110b0565b60405160ff9091168152602001610420565b6104ad6105523660046149c3565b611134565b610416600c5481565b6104ad61056e366004614935565b61143a565b61043c610581366004614965565b6001600160a01b03166000908152600d6020526040902054600b541190565b6104ad6105ae366004614a45565b61145b565b6104ad6105c1366004614935565b6114f4565b61043c6105d4366004614909565b611572565b6104166105e7366004614965565b611594565b6104166105fa366004614965565b5060001990565b6104ad61060f366004614a83565b6115ab565b6104166106223660046148db565b611651565b61063a610635366004614965565b61165c565b6040805182518152602080840151908201529181015190820152606001610420565b61068b61066a366004614965565b600d6020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610420565b6005546106b9906001600160a01b031681565b6040516104209190614ace565b6104166106d4366004614935565b6116c2565b6106b96117a0565b6104ad6106ef3660046148db565b6117c4565b610416610702366004614965565b611853565b61041660008051602061552783398151915281565b6104ad61186e565b6104ad610732366004614b2d565b611ae6565b6104ad611d37565b61041660115481565b61041660035481565b6104ad611e82565b6104166107673660046148db565b611fff565b6001546106b9906001600160a01b031681565b61043c61078d366004614935565b612026565b6104166107a0366004614935565b61204f565b6104166107b3366004614965565b6120e0565b6104546121ce565b6104ad6107ce366004614b6e565b6121dd565b61041666b1a2bc2ec5000081565b6106b96107ef366004614ba6565b600f6020908152600092835260408084209091529082529020546001600160a01b031681565b610416600081565b61043c61082b366004614909565b612384565b61041660045481565b610874610847366004614965565b600e6020526000908152604090205461ffff8082169162010000810490911690600160201b900460ff1683565b6040805161ffff9485168152939092166020840152151590820152606001610420565b61043c6108a5366004614909565b6123ff565b6104ad6108b83660046148db565b61240d565b6104166108cb3660046148db565b61241a565b6104166108de366004614bd4565b612440565b6104166108f1366004614965565b61245b565b610416610904366004614bd4565b61249b565b6104166703782dace9d9000081565b6104166124ae565b6104ad61092e366004614b2d565b6124b9565b61093b612678565b6040516104209190614bfb565b6104166109563660046148db565b6126d9565b6106b96109693660046148db565b6126f8565b61041661097c366004614965565b612722565b6104ad61098f366004614c48565b612730565b61041661276c565b6104ad6109aa366004614935565b6128ca565b6106b96109bd3660046148db565b6128e6565b6104166109d0366004614965565b6128f6565b6104166109e3366004614ca4565b612901565b6002546106b9906001600160a01b031681565b61043c610a09366004614965565b60126020526000908152604090205460ff1681565b6104ad610a2c366004614cd2565b61292c565b610416612976565b6104ad6129de565b610416610a4f3660046148db565b612a7f565b61041660165481565b610416610a6b3660046148db565b612ad1565b6104ad610a7e366004614965565b612adc565b6104ad610a91366004614cf4565b612b50565b6104ad610aa4366004614965565b612c51565b610416610ab73660046148db565b612ccf565b601354610416565b61041660105481565b6104ad610adb3660046148db565b612ced565b6104ad610aee366004614d12565b612d74565b6000601054601154610b059190614dac565b905090565b60006001600160e01b03198216637965db0b60e01b1480610b3b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060098054610b5090614dbf565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7c90614dbf565b8015610bc95780601f10610b9e57610100808354040283529160200191610bc9565b820191906000526020600020905b815481529060010190602001808311610bac57829003601f168201915b5050505050905090565b600080610bde610ec9565b90508015610bfe57610bf9610bf1610af3565b849083612e12565b610c00565b825b9392505050565b600033610c15818585612e31565b5060019392505050565b600080610c2a610ec9565b90508015610bfe57610bf981610c3e610af3565b859190612f4d565b336001600160a01b03821614610c6157610c61813384612f7b565b610c6c813084612fef565b336000908152600d6020526040812042815560018101805491928592610c93908490614dac565b9091555060009050610ca484610bd3565b905080826002018190555080600c6000828254610cc19190614dac565b90915550506040518481526001600160a01b0384169033907ff601bbafcf0d793cce0a8802057c8783aa5946889f76bd9dd47492217f59af1e9060200160405180910390a350505050565b6001546001600160a01b03163314610d3f5760405162461bcd60e51b8152600401610d3690614df9565b60405180910390fd5b6001600160a01b03811660009081526012602052604090205460ff16610d7857604051632df15a4160e11b815260040160405180910390fd5b6001600160a01b0381166000908152601260205260408120805460ff19169055601354905b81811015610de65760138181548110610db857610db8614e1d565b6000918252602090912001546001600160a01b03848116911614610de657610ddf81614e33565b9050610d9d565b6013610df3600184614e4c565b81548110610e0357610e03614e1d565b600091825260209091200154601380546001600160a01b039092169183908110610e2f57610e2f614e1d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506013805480610e6e57610e6e614e5f565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038516917fd3281a40d50ae838fe77dc627744037b8f0fc6a5711d66119a9b670c5cde41af91a2505050565b6000610b0560085490565b6001546001600160a01b03163314610efe5760405162461bcd60e51b8152600401610d3690614df9565b6001600160a01b03811660009081526012602052604090205460ff1615610f38576040516325a2934b60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc49190614e75565b6001600160a01b031614610feb57604051632737e48360e11b815260040160405180910390fd5b6001600160a01b038116600081815260126020526040808220805460ff1916600190811790915560138054918201815583527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180546001600160a01b03191684179055517f69887873d46778fb35539b0a9992d9176ca03c1820b0afb538bc3a6f63326b109190a250565b600033611085858285612f7b565b611090858585612fef565b506001949350505050565b60009081526020819052604090206001015490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b059190614e92565b60008051602061550783398151915261114c816131ab565b60145460008061115d600184614e4c565b90505b80156114275760006014828154811061117b5761117b614e1d565b6000918252602090912001546001600160a01b03169050808787848181106111a5576111a5614e1d565b90506020028101906111b79190614eb5565b6111c5906020810190614965565b6001600160a01b0316146111ec57604051631ed0662960e21b815260040160405180910390fd5b60006111f7826131b5565b9050601480548061120a5761120a614e5f565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b0384168252600e81526040808320815160608082018452915461ffff8082168352620100008204811683870152600160201b90910460ff1615158285015283516080810185528781523095810195909552928401949094527f0000000000000000000000000000000000000000000000000000000000000000909116908201526112c69084908390600261320d565b6113936112d16117a0565b8a8a878181106112e3576112e3614e1d565b90506020028101906112f59190614eb5565b611306906080810190606001614965565b8b8b8881811061131857611318614e1d565b905060200281019061132a9190614eb5565b61133b9060a0810190608001614965565b6001600160a01b0387166000908152600e60205260409020548790879061ffff168f8f8c81811061136e5761136e614e1d565b90506020028101906113809190614eb5565b61138e9060a0810190614ed5565b6133b5565b6001600160a01b0383166000908152600e602090815260409182902054825161ffff7f000000000000000000000000000000000000000000000000000000000000000081168252909116918101919091529081018390527f8bdaf3de28c95336795fcfb09634aa6ee90e0ba358711340d92566bc6e3786269060600160405180910390a15092909201915060001901611160565b5061143381600061350f565b5050505050565b6114438261109b565b61144c816131ab565b6114568383613566565b505050565b6001546001600160a01b031633146114855760405162461bcd60e51b8152600401610d3690614df9565b6001600160a01b0382166000818152600e6020526040908190208054841515600160201b0260ff60201b19909116179055517f85e07ba75a2f56a1a2ca8551cdddfb8c998f5781c1c9ab6f8d4ae42101c0d7f1906114e890841515815260200190565b60405180910390a25050565b6001600160a01b03811633146115645760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610d36565b61156e82826135ea565b5050565b600033610c158185856115858383612901565b61158f9190614dac565b612e31565b6000806115a083611853565b9050610c0081610bd3565b6001546001600160a01b031633146115d55760405162461bcd60e51b8152600401610d3690614df9565b61ffff8381166000818152600f602090815260408083209487168084529482529182902080546001600160a01b0319166001600160a01b03871690811790915582519485529084015290917f0a24add6dc7dd296687ea41961d576aa7afe43986fac38191ce40bb4e7f2bf5b91015b60405180910390a2505050565b6000610b3b82610bd3565b61168060405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03166000908152600d6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b60006116cd83612ad1565b90506117046001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308661364f565b61170c610ec9565b60000361175157806103e8111561173657604051630131cd7b60e51b815260040160405180910390fd5b6117426103e882614e4c565b905061175160016103e86136a7565b61175b82826136a7565b816001600160a01b0316336001600160a01b0316600080516020615587833981519152858460405161178e929190614f1b565b60405180910390a3610b3b8382613774565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001546001600160a01b031633146117ee5760405162461bcd60e51b8152600401610d3690614df9565b6703782dace9d9000081111561181757604051635b94d8b160e01b815260040160405180910390fd5b60038190556040518181527f8b940a95968ad5b511f89b01075446a4fe9f614f2dc5fbb9e9a6b227d6d4fd70906020015b60405180910390a150565b6001600160a01b031660009081526006602052604090205490565b600080516020615507833981519152611886816131ab565b6015546000815b80156119da57600060156118a2600184614e4c565b815481106118b2576118b2614e1d565b6000918252602091829020604080516080810182526003939093029091018054835260018101546001600160a01b03908116948401949094526002015492831690820152600160a01b90910461ffff16606082015260158054919250908061191c5761191c614e5f565b6000828152602081206003600019909301928302018181556001810180546001600160a01b031916905560020180546001600160b01b03191690559155815161196490612ad1565b9050821580156119795750611977610ec9565b155b156119bc57806103e811156119a157604051630131cd7b60e51b815260040160405180910390fd5b6119ad6103e882614e4c565b90506119bc60016103e86136a7565b6119ca8260200151826136a7565b505191909101906000190161188d565b50600c546011546040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611a2d903090600401614ace565b602060405180830381865afa158015611a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6e9190614f29565b611a789190614e4c565b611a829190614e4c565b811115611aa2576040516337b481d960e01b815260040160405180910390fd5b611aad816000613774565b6040518181527f4f5745f9a8198fa6e603922d263d7e2a62c3ac2ea9791f1f4679e40bdad52edd906020015b60405180910390a1505050565b600080516020615507833981519152611afe816131ab565b8160005b81811015611433576000858583818110611b1e57611b1e614e1d565b905060600201803603810190611b349190615036565b60208101519091506000819003611b4c575050611d27565b81516001600160a01b03811660009081526012602052604090205460ff16611b8757604051632df15a4160e11b815260040160405180910390fd5b611b9282600061350f565b611c28816001600160a01b031663a8c62e766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf79190614e75565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084613786565b60408381015190516320e8c56560e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152600060448301526064820192909252908216906320e8c565906084016020604051808303816000875af1158015611cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccf9190614f29565b508160106000828254611ce29190614dac565b90915550506040517f46a80100e8cfe18c4729e50ad8704a292622bb8b711d9b6e915a1911f349206490611d1b90339084908690615052565b60405180910390a15050505b611d3081614e33565b9050611b02565b6002546001600160a01b03163314611d865760405162461bcd60e51b815260206004820152601260248201527127a7262cafa822a72224a723afa7aba722a960711b6044820152606401610d36565b600180546002546001600160a01b031982166001600160a01b039182161790925516611db36000826135ea565b611dcb600080516020615527833981519152826135ea565b611de3600080516020615507833981519152826135ea565b600154611dfb906000906001600160a01b0316613566565b600154611e2090600080516020615527833981519152906001600160a01b0316613566565b600154611e4590600080516020615507833981519152906001600160a01b0316613566565b6001546040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0916118489184916001600160a01b031690615076565b6000611e8c610ec9565b90506000611e9933611853565b905080600003611ea7575050565b611eb133826137a5565b60008282601154611ec29190615090565b611ecc91906150af565b9050611ed981600061350f565b611f0d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383613786565b60135460005b8181101561143357600060138281548110611f3057611f30614e1d565b60009182526020822001546040516370a0823160e01b81526001600160a01b03909116925082906370a0823190611f6b903090600401614ace565b602060405180830381865afa158015611f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fac9190614f29565b9050600087611fbb8389615090565b611fc591906150af565b905080600003611fd757505050611fef565b611feb6001600160a01b0384163383613786565b5050505b611ff881614e33565b9050611f13565b60008061200a610ec9565b90508015610bfe57610bf98161201e61276c565b859190612e12565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061205a8361241a565b90506120916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461364f565b61209b82846136a7565b816001600160a01b0316336001600160a01b031660008051602061558783398151915283866040516120ce929190614f1b565b60405180910390a3610b3b8184613774565b6000806120ec336138e1565b60405163a9059cbb60e01b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061213f90869086906004016150d1565b6020604051808303816000875af115801561215e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218291906150ea565b50336001600160a01b0316836001600160a01b0316336001600160a01b031660008051602061554783398151915285856040516121c0929190614f1b565b60405180910390a450919050565b6060600a8054610b5090614dbf565b6000600e816121f26040860160208701614965565b6001600160a01b0316815260208082019290925260409081016000208151606081018352905461ffff80821683526201000082041693820193909352600160201b90920460ff1615801591830191909152909150806122695750805161ffff166122626080850160608601615107565b61ffff1614155b156122985761227e6040840160208501614965565b6040516368692cbb60e11b8152600401610d369190614ace565b60208181015161ffff9081166000908152600f835260408082207f00000000000000000000000000000000000000000000000000000000000000009093168252919092529020546001600160a01b0316331461230957336040516306e02ebd60e11b8152600401610d369190614ace565b61231382846139a9565b6123236080840160608501615107565b61ffff166123376040850160208601614965565b6001600160a01b03167f649c8deb433503a93e61cbf3bd7afd938e936ce85fcf81928ab240068c6643a5856000013585336040516123779392919061515c565b60405180910390a3505050565b600033816123928286612901565b9050838110156123f25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d36565b6110908286868403612e31565b600033610c15818585612fef565b6124178133610c46565b50565b600080612425610ec9565b90508015610bfe57610bf9612438610af3565b849083612f4d565b600060405163d623472560e01b815260040160405180910390fd5b60008061246783611853565b9050600061247482610bd3565b9050600061248183612ccf565b90508082116124905781612492565b805b95945050505050565b60006124a6836120e0565b949350505050565b6000610b05336120e0565b6000805160206155078339815191526124d1816131ab565b8160005b818110156114335760008585838181106124f1576124f1614e1d565b9050606002018036038101906125079190615036565b6020810151909150600081900361251f575050612668565b81516001600160a01b03811660009081526012602052604090205460ff1661255a57604051632df15a4160e11b815260040160405180910390fd5b604083810151905163f3f094a160e01b8152306004820152602481018490526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166044830152606482019290925260009183169063f3f094a1906084016020604051808303816000875af11580156125df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126039190614f29565b905080601060008282546126179190614e4c565b909155506126289050816000613774565b7f60e3ebbed9f935b37adbc6b7a8ad559873ced28247296a76a4d3b81a9e5eb19a33838360405161265b93929190615052565b60405180910390a1505050505b61267181614e33565b90506124d5565b60606013805480602002602001604051908101604052809291908181526020018280548015610bc957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116126b2575050505050905090565b6000806126e4610ec9565b90508015610bfe57610bf98161201e610af3565b6014818154811061270857600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610b3b61046f83611853565b6001546001600160a01b0316331461275a5760405162461bcd60e51b8152600401610d3690614df9565b61276684848484613a4a565b50505050565b601354600090815b8181101561282c5760006013828154811061279157612791614e1d565b600091825260209091200154604051633e64257560e01b81526001600160a01b0390911691508190633e642575906127cd903090600401614ace565b602060405180830381865afa1580156127ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280e9190614f29565b6128189085614dac565b9350508061282590614e33565b9050612774565b506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612879903090600401614ace565b602060405180830381865afa158015612896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ba9190614f29565b6128c49083614dac565b91505090565b6128d38261109b565b6128dc816131ab565b61145683836135ea565b6013818154811061270857600080fd5b6000610b3b82611853565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b600080516020615507833981519152612944816131ab565b600061294e613b91565b90506000601154826129609190614dac565b905061296d858286613c58565b61143382613c9d565b336000908152600d60205260408120600181015460028201548361299983610bd3565b9050818110156129ae57600094505050505090565b816129b98183614e4c565b6129cb90670de0b6b3a7640000615090565b6129d591906150af565b94505050505090565b336000908152600d60205260408120600181015460028201549192909190612a0583610bd3565b90506000846002018190555081600c6000828254612a239190614e4c565b909155505081811015612a3b57612766303385612fef565b600081612a488486615090565b612a5291906150af565b90506000612a608286614e4c565b9050612a6d303384612fef565b612a7730826137a5565b505050505050565b600080612a8a610ec9565b9050600083612a97610af3565b612aa19190614e4c565b905080600003612ab357509192915050565b8115612ac957612ac4848383612e12565b6124a6565b509192915050565b6000610b3b826126d9565b6001546001600160a01b03163314612b065760405162461bcd60e51b8152600401610d3690614df9565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef390600090a250565b6001546001600160a01b03163314612b7a5760405162461bcd60e51b8152600401610d3690614df9565b6001600160a01b0382166000908152600e602090815260408083208151606081018352905461ffff80821680845262010000830490911694830194909452600160201b900460ff161515918101919091529103612bec5782604051634ae8435d60e01b8152600401610d369190614ace565b6001600160a01b0383166000818152600e6020908152604091829020805463ffff000019166201000061ffff88169081029190911790915591519182527f1f97e73f29802f056373306e9e3198b79119f446f1b9595d0752ebc2a9146f2e9101611644565b6001546001600160a01b03163314612c7b5760405162461bcd60e51b8152600401610d3690614df9565b600280546001600160a01b0319166001600160a01b038381169182179092556001546040517fb150023a879fd806e3599b6ca8ee3b60f0e360ab3846d128d67ebce1a391639a936118489392169190615076565b600080612cda610ec9565b90508015610bfe57610bf9610bf161276c565b6001546001600160a01b03163314612d175760405162461bcd60e51b8152600401610d3690614df9565b66b1a2bc2ec50000811115612d3f57604051635b94d8b160e01b815260040160405180910390fd5b60048190556040518181527fd87632b1c6ebfa21acbca0e3279b3cf6385a377cb8fda51e5b866baa6e6012ab90602001611848565b6001546001600160a01b03163314612d9e5760405162461bcd60e51b8152600401610d3690614df9565b612dde8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613e4792505050565b507fa9f1cb7eee5fc621e043c1ef431febb0f901998a6c0cbdf70147b0fe4d9f5a6a838383604051611ad993929190615189565b828202811515841585830485141716612e2a57600080fd5b0492915050565b6001600160a01b038316612e935760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d36565b6001600160a01b038216612ef45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d36565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101612377565b828202811515841585830485141716612f6557600080fd5b6001826001830304018115150290509392505050565b6000612f878484612901565b905060001981146127665781811015612fe25760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610d36565b6127668484848403612e31565b6001600160a01b0383166130535760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d36565b6001600160a01b0382166130b55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d36565b6001600160a01b0383166000908152600660205260409020548181101561312d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d36565b6001600160a01b03808516600090815260066020526040808220858503905591851681529081208054849290613164908490614dac565b92505081905550826001600160a01b0316846001600160a01b03166000805160206155678339815191528460405161319e91815260200190565b60405180910390a3612766565b6124178133613e89565b6000806131c1836138e1565b90925090506131d030826137a5565b826001600160a01b0316836001600160a01b0316846001600160a01b031660008051602061554783398151915285856040516121c0929190614f1b565b6020808401805161ffff9081166000908152600f80855260408083207f0000000000000000000000000000000000000000000000000000000000000000851684528652808320549451841683529085528082208851909316825291909352909120546001600160a01b039182169116816132c25784602001517f00000000000000000000000000000000000000000000000000000000000000006040516328a4ac9160e11b8152600401610d369291906151c9565b6001600160a01b0381166132f257602085015185516040516328a4ac9160e11b8152610d369291906004016151c9565b8451604051630e510a7760e41b81526001600160a01b0384169163e510a770916133299188918b9187918a919033906004016151de565b600060405180830381600087803b15801561334357600080fd5b505af1158015613357573d6000803e3d6000fd5b50505050846000015161ffff16866001600160a01b03167ff3617f26552d0e4bd64927d1a7fe0d18f2278f99e2446ad6ac8f0a73c38840d8866000015186866040516133a59392919061515c565b60405180910390a3505050505050565b6000805160206155078339815191526133cd816131ab565b61341183838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508d91508a9050613eed565b60405163095ea7b360e01b81526001600160a01b038a169063095ea7b39061343f908b9089906004016150d1565b6020604051808303816000875af115801561345e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348291906150ea565b506000876001600160a01b0316848460405161349f929190615259565b6000604051808303816000865af19150503d80600081146134dc576040519150601f19603f3d011682016040523d82523d6000602084013e6134e1565b606091505b50509050806135035760405163e0fec00360e01b815260040160405180910390fd5b50505050505050505050565b81601154108061352d5750600c548260115461352b9190614e4c565b105b1561354b5760405163078cc1fb60e01b815260040160405180910390fd5b816011600082825461355d9190614e4c565b90915550505050565b6135708282612026565b61156e576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556135a63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6135f48282612026565b1561156e576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b612766846323b872dd60e01b85858560405160240161367093929190615052565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614004565b6001600160a01b0382166136fd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610d36565b806008600082825461370f9190614dac565b90915550506001600160a01b0382166000908152600660205260408120805483929061373c908490614dac565b90915550506040518181526001600160a01b038316906000906000805160206155678339815191529060200160405180910390a35050565b816011600082825461355d9190614dac565b6114568363a9059cbb60e01b84846040516024016136709291906150d1565b6001600160a01b0382166138055760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610d36565b6001600160a01b038216600090815260066020526040902054818110156138795760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610d36565b6001600160a01b03831660009081526006602052604081208383039055600880548492906138a8908490614e4c565b90915550506040518281526000906001600160a01b038516906000805160206155678339815191529060200160405180910390a3505050565b6001600160a01b0381166000908152600d602052604081206002810154829190820361392057604051631f2a200560e01b815260040160405180910390fd5b600b5481541061394357604051634a44555360e11b815260040160405180910390fd5b60018101546002820154909250600061395b84610bd3565b905081811061396a578161396c565b805b945081600c60008282546139809190614e4c565b909155506139909050858561350f565b600060028401556139a130856137a5565b505050915091565b60018260048111156139bd576139bd615124565b036139cb5761156e816140d6565b60048260048111156139df576139df615124565b036139ed5761156e81614117565b6002826004811115613a0157613a01615124565b03613a0f5761156e816141ef565b6003826004811115613a2357613a23615124565b03613a315761156e816142c0565b60405163d623472560e01b815260040160405180910390fd5b6001546001600160a01b03163314613a745760405162461bcd60e51b8152600401610d3690614df9565b6001600160a01b0384166000908152600e60209081526040918290208251606081018452905461ffff80821683526201000082041692820192909252600160201b90910460ff161580159282019290925290613ae357604051630cb3e97f60e31b815260040160405180910390fd5b6040805160608101825261ffff86811680835286821660208085019182528715158587019081526001600160a01b038c166000818152600e845288902096518754945192511515600160201b0260ff60201b19938816620100000263ffffffff199096169190971617939093171693909317909355925192835290917fdfdecea9ea3fba2ae2104af96f9be11589a507814dfd462dadc83c581da372b0910160405180910390a25050505050565b601354600090815b81811015613c5357600060138281548110613bb657613bb6614e1d565b600091825260209091200154604051631132ffbf60e11b81526001600160a01b0390911691508190632265ff7e90613bf2903090600401614ace565b6020604051808303816000875af1158015613c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c359190614f29565b613c3f9085614dac565b93505080613c4c90614e33565b9050613b99565b505090565b6000828411613c7057613c6b8484614e4c565b613c7a565b613c7a8385614e4c565b90508181111561276657604051638199f5f360e01b815260040160405180910390fd5b600c546011541015613cc25760405163078cc1fb60e01b815260040160405180910390fd5b60006010548211613cd4576000613ce1565b601054613ce19083614e4c565b6011549091504290600090613cf69085614dac565b6010859055905060008315613d2b57670de0b6b3a764000060035485613d1c9190615090565b613d2691906150af565b613d2e565b60005b90506000600454600014613d89576301e13380670de0b6b3a7640000600b5486613d589190614e4c565b85600454613d669190615090565b613d709190615090565b613d7a91906150af565b613d8491906150af565b613d8c565b60005b90506000613d9a8284614dac565b905060008115613dda57613dc1613daf610ec9565b613db98488614e4c565b849190612e12565b600554909150613dda906001600160a01b0316826136a7565b600554604080518981526020810187905290810185905260608101839052608081018790526001600160a01b03909116907feaedd1267621f4a8ee97011faf0e67800ad3063714bd179f078c980bb9a3fa3d9060a00160405180910390a2505050600b9290925550505050565b6060610c0083836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564000081525061437b565b613e938282612026565b61156e57613eab816001600160a01b0316601461438a565b613eb683602061438a565b604051602001613ec7929190615269565b60408051601f198184030181529082905262461bcd60e51b8252610d36916004016148a8565b613ef56147d4565b613efe85614525565b905083816020015114613f455760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9259608a1b6044820152606401610d36565b816001600160a01b031681600001516001600160a01b031614613fa55760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964207265636569766572206164647265737360401b6044820152606401610d36565b826001600160a01b03168160800151604001516001600160a01b0316146114335760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b21034b7383aba103a37b5b2b760691b6044820152606401610d36565b6000614059826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661437b9092919063ffffffff16565b805190915015611456578080602001905181019061407791906150ea565b6114565760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d36565b6015805460018101825560009190915281906003027f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750161145682826152f8565b600061412c6105e76040840160208501614965565b90506000600e816141436040860160208701614965565b6001600160a01b0316815260208082019290925260409081016000208151606081018352905461ffff80821683526201000082041682850152600160201b900460ff161515818301529250611456916141a0918601908601614965565b6040805160808101825285815230602082015260009181019190915261ffff7f00000000000000000000000000000000000000000000000000000000000000001660608201528390600461320d565b600d60006142036040840160208501614965565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201546000036142735760146142406040830160208401614965565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790555b60006142886107026040840160208501614965565b90506000670de0b6b3a76400006142a0838535615090565b6142aa91906150af565b9050611456816104a86040860160208701614965565b6000670de0b6b3a76400006142de6107026040850160208601614965565b6142e9908435615090565b6142f391906150af565b905061431e6143086040840160208501614965565b6143186060850160408601614965565b83612fef565b7ff24ef89f38eadc1bde50701ad6e4d6d11a2dc24f7cf834a486991f388332850461434f6040840160208501614965565b61435f6060850160408601614965565b8360405161436f93929190615052565b60405180910390a15050565b60606124a6848460008561455d565b60606000614399836002615090565b6143a4906002614dac565b6001600160401b038111156143bb576143bb614f42565b6040519080825280601f01601f1916602001820160405280156143e5576020820181803683370190505b509050600360fc1b8160008151811061440057614400614e1d565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061442f5761442f614e1d565b60200101906001600160f81b031916908160001a9053506000614453846002615090565b61445e906001614dac565b90505b60018111156144d6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061449257614492614e1d565b1a60f81b8282815181106144a8576144a8614e1d565b60200101906001600160f81b031916908160001a90535060049490941c936144cf81615361565b9050614461565b508315610c005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d36565b61452d6147d4565b60006145478360048086516145429190614e4c565b61468e565b905080806020019051810190610c00919061543b565b6060824710156145be5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d36565b6001600160a01b0385163b6146155760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d36565b600080866001600160a01b0316858760405161463191906154f4565b60006040518083038185875af1925050503d806000811461466e576040519150601f19603f3d011682016040523d82523d6000602084013e614673565b606091505b509150915061468382828661479b565b979650505050505050565b60608161469c81601f614dac565b10156146db5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610d36565b6146e58284614dac565b845110156147295760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610d36565b6060821580156147485760405191506000825260208201604052614792565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015614781578051835260209283019201614769565b5050858452601f01601f1916604052505b50949350505050565b606083156147aa575081610c00565b8251156147ba5782518084602001fd5b8160405162461bcd60e51b8152600401610d3691906148a8565b6040518060a0016040528060006001600160a01b0316815260200160008152602001600081526020016148316040518060800160405280600081526020016000815260200160006001600160a01b03168152602001606081525090565b815260408051608081018252600080825260208281018290529282015260608082015291015290565b60006020828403121561486c57600080fd5b81356001600160e01b031981168114610c0057600080fd5b60005b8381101561489f578181015183820152602001614887565b50506000910152565b60208152600082518060208401526148c7816040850160208701614884565b601f01601f19169190910160400192915050565b6000602082840312156148ed57600080fd5b5035919050565b6001600160a01b038116811461241757600080fd5b6000806040838503121561491c57600080fd5b8235614927816148f4565b946020939093013593505050565b6000806040838503121561494857600080fd5b82359150602083013561495a816148f4565b809150509250929050565b60006020828403121561497757600080fd5b8135610c00816148f4565b60008060006060848603121561499757600080fd5b83356149a2816148f4565b925060208401356149b2816148f4565b929592945050506040919091013590565b600080602083850312156149d657600080fd5b82356001600160401b03808211156149ed57600080fd5b818501915085601f830112614a0157600080fd5b813581811115614a1057600080fd5b8660208260051b8501011115614a2557600080fd5b60209290920196919550909350505050565b801515811461241757600080fd5b60008060408385031215614a5857600080fd5b8235614a63816148f4565b9150602083013561495a81614a37565b61ffff8116811461241757600080fd5b600080600060608486031215614a9857600080fd5b8335614aa381614a73565b92506020840135614ab381614a73565b91506040840135614ac3816148f4565b809150509250925092565b6001600160a01b0391909116815260200190565b60008083601f840112614af457600080fd5b5081356001600160401b03811115614b0b57600080fd5b602083019150836020606083028501011115614b2657600080fd5b9250929050565b60008060208385031215614b4057600080fd5b82356001600160401b03811115614b5657600080fd5b614b6285828601614ae2565b90969095509350505050565b60008082840360a0811215614b8257600080fd5b6080811215614b9057600080fd5b5082915060808301356005811061495a57600080fd5b60008060408385031215614bb957600080fd5b8235614bc481614a73565b9150602083013561495a81614a73565b600080600060608486031215614be957600080fd5b833592506020840135614ab3816148f4565b6020808252825182820181905260009190848201906040850190845b81811015614c3c5783516001600160a01b031683529284019291840191600101614c17565b50909695505050505050565b60008060008060808587031215614c5e57600080fd5b8435614c69816148f4565b93506020850135614c7981614a73565b92506040850135614c8981614a73565b91506060850135614c9981614a37565b939692955090935050565b60008060408385031215614cb757600080fd5b8235614cc2816148f4565b9150602083013561495a816148f4565b60008060408385031215614ce557600080fd5b50508035926020909101359150565b60008060408385031215614d0757600080fd5b8235614bc4816148f4565b600080600060408486031215614d2757600080fd5b8335614d32816148f4565b925060208401356001600160401b0380821115614d4e57600080fd5b818601915086601f830112614d6257600080fd5b813581811115614d7157600080fd5b876020828501011115614d8357600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b3b57610b3b614d96565b600181811c90821680614dd357607f821691505b602082108103614df357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060018201614e4557614e45614d96565b5060010190565b81810381811115610b3b57610b3b614d96565b634e487b7160e01b600052603160045260246000fd5b600060208284031215614e8757600080fd5b8151610c00816148f4565b600060208284031215614ea457600080fd5b815160ff81168114610c0057600080fd5b6000823560be19833603018112614ecb57600080fd5b9190910192915050565b6000808335601e19843603018112614eec57600080fd5b8301803591506001600160401b03821115614f0657600080fd5b602001915036819003821315614b2657600080fd5b918252602082015260400190565b600060208284031215614f3b57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715614f7a57614f7a614f42565b60405290565b60405160a081016001600160401b0381118282101715614f7a57614f7a614f42565b604051601f8201601f191681016001600160401b0381118282101715614fca57614fca614f42565b604052919050565b600060608284031215614fe457600080fd5b604051606081016001600160401b038111828210171561500657615006614f42565b6040529050808235615017816148f4565b8082525060208301356020820152604083013560408201525092915050565b60006060828403121561504857600080fd5b610c008383614fd2565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b60008160001904831182151516156150aa576150aa614d96565b500290565b6000826150cc57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b6000602082840312156150fc57600080fd5b8151610c0081614a37565b60006020828403121561511957600080fd5b8135610c0081614a73565b634e487b7160e01b600052602160045260246000fd5b6005811061515857634e487b7160e01b600052602160045260246000fd5b9052565b83815260608101615170602083018561513a565b6001600160a01b03929092166040919091015292915050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b61ffff92831681529116602082015260400190565b60006101208201905087518252602088015160018060a01b0380821660208501528060408b015116604085015260608a0151915061ffff8083166060860152818a16608086015281891660a086015261523a60c086018961513a565b80871660e0860152508085166101008501525050979650505050505050565b8183823760009101908152919050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161529b816017850160208801614884565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516152cc816028840160208801614884565b01602801949350505050565b80546001600160a01b0319166001600160a01b0392909216919091179055565b81358155602082013561530a816148f4565b61531781600184016152d8565b5060028101604083013561532a816148f4565b61533481836152d8565b50606083013561534381614a73565b815461ffff60a01b191660a09190911b61ffff60a01b161790555050565b60008161537057615370614d96565b506000190190565b60006080828403121561538a57600080fd5b615392614f58565b9050815181526020808301518183015260408301516153b0816148f4565b604083015260608301516001600160401b03808211156153cf57600080fd5b818501915085601f8301126153e357600080fd5b8151818111156153f5576153f5614f42565b615407601f8201601f19168501614fa2565b9150808252868482850101111561541d57600080fd5b61542c81858401868601614884565b50606084015250909392505050565b60006020828403121561544d57600080fd5b81516001600160401b038082111561546457600080fd5b9083019060a0828603121561547857600080fd5b615480614f80565b825161548b816148f4565b8082525060208301516020820152604083015160408201526060830151828111156154b557600080fd5b6154c187828601615378565b6060830152506080830151828111156154d957600080fd5b6154e587828601615378565b60808301525095945050505050565b60008251614ecb81846020870161488456feaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8fbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8dbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7a2646970667358221220a2d91bc73eeee3831833e5c1ddef5832abd2d8e71421704795c9fc3a855cb51164736f6c63430008100033af290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104095760003560e01c806301e1d1141461040e57806301ffc9a71461042957806306fdde031461044c57806307a2d13a14610461578063095ea7b3146104745780630a28a47714610487578063107703ab1461049a578063175188e8146104af57806318160ddd146104c25780631b2df850146104ca57806321b77d63146104df578063223e5479146104e85780632257a738146104fb57806323b872dd14610504578063248a9ca31461051757806325a760c21461052a57806326d83182146105445780632940ec00146105575780632f2ff15d14610560578063313ce5671461052a5780633230b79b14610573578063341a7b42146105a057806336568abe146105b357806339509351146105c65780633e642575146105d9578063402d267d146105ec578063415c49e2146106015780634cdad5061461061457806351a72964146106275780635b9d26581461065c57806361d027b3146106a65780636e553f65146106c65780636f307dc3146106d957806370897b23146106e157806370a08231146106f4578063724c184c1461070757806373b90eac1461071c578063793361dc1461072457806379ba5097146107375780638576829e1461073f57806387788782146107485780638954b3e0146107515780638c871019146107595780638da5cb5b1461076c57806391d148541461077f57806394bf804d1461079257806395a2251f146107a557806395d89b41146107b857806396fbebcc146107c05780639908840c146107d35780639c508d4a146107e1578063a217fddf14610815578063a457c2d71461081d578063a6f7f5d614610830578063a879f97614610839578063a9059cbb14610897578063aa2f892d146108aa578063b3d7f6b9146108bd578063b460af94146108d0578063b5ca7704146108e3578063ba087652146108f6578063bdca916514610909578063be040fb014610918578063bf5ab6f514610920578063c3b2886414610933578063c63d75b6146105ec578063c6e6f59214610948578063c737186a1461095b578063ce96cb771461096e578063cee027f214610981578063d075dd4214610994578063d547741f1461099c578063d7b9991c146109af578063d905777e146109c2578063dd62ed3e146109d5578063e30c3978146109e8578063e3f62d5d146109fb578063e4a4b7b114610a1e578063e56e56db14610a31578063e6a2966614610a39578063eacff5ba14610a41578063ecad956514610a54578063ef8b30f714610a5d578063f0f4426014610a70578063f2d6f5a814610a83578063f2fde38b14610a96578063f3e7387514610aa9578063f96d7b8014610abc578063fc6b1ebe14610ac4578063fe56e23214610acd578063fef5745a14610ae0575b600080fd5b610416610af3565b6040519081526020015b60405180910390f35b61043c61043736600461485a565b610b0a565b6040519015158152602001610420565b610454610b41565b60405161042091906148a8565b61041661046f3660046148db565b610bd3565b61043c610482366004614909565b610c07565b6104166104953660046148db565b610c1f565b6104ad6104a8366004614935565b610c46565b005b6104ad6104bd366004614965565b610d0c565b610416610ec9565b61041660008051602061550783398151915281565b6104166103e881565b6104ad6104f6366004614965565b610ed4565b610416600b5481565b61043c610512366004614982565b611077565b6104166105253660046148db565b61109b565b6105326110b0565b60405160ff9091168152602001610420565b6104ad6105523660046149c3565b611134565b610416600c5481565b6104ad61056e366004614935565b61143a565b61043c610581366004614965565b6001600160a01b03166000908152600d6020526040902054600b541190565b6104ad6105ae366004614a45565b61145b565b6104ad6105c1366004614935565b6114f4565b61043c6105d4366004614909565b611572565b6104166105e7366004614965565b611594565b6104166105fa366004614965565b5060001990565b6104ad61060f366004614a83565b6115ab565b6104166106223660046148db565b611651565b61063a610635366004614965565b61165c565b6040805182518152602080840151908201529181015190820152606001610420565b61068b61066a366004614965565b600d6020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610420565b6005546106b9906001600160a01b031681565b6040516104209190614ace565b6104166106d4366004614935565b6116c2565b6106b96117a0565b6104ad6106ef3660046148db565b6117c4565b610416610702366004614965565b611853565b61041660008051602061552783398151915281565b6104ad61186e565b6104ad610732366004614b2d565b611ae6565b6104ad611d37565b61041660115481565b61041660035481565b6104ad611e82565b6104166107673660046148db565b611fff565b6001546106b9906001600160a01b031681565b61043c61078d366004614935565b612026565b6104166107a0366004614935565b61204f565b6104166107b3366004614965565b6120e0565b6104546121ce565b6104ad6107ce366004614b6e565b6121dd565b61041666b1a2bc2ec5000081565b6106b96107ef366004614ba6565b600f6020908152600092835260408084209091529082529020546001600160a01b031681565b610416600081565b61043c61082b366004614909565b612384565b61041660045481565b610874610847366004614965565b600e6020526000908152604090205461ffff8082169162010000810490911690600160201b900460ff1683565b6040805161ffff9485168152939092166020840152151590820152606001610420565b61043c6108a5366004614909565b6123ff565b6104ad6108b83660046148db565b61240d565b6104166108cb3660046148db565b61241a565b6104166108de366004614bd4565b612440565b6104166108f1366004614965565b61245b565b610416610904366004614bd4565b61249b565b6104166703782dace9d9000081565b6104166124ae565b6104ad61092e366004614b2d565b6124b9565b61093b612678565b6040516104209190614bfb565b6104166109563660046148db565b6126d9565b6106b96109693660046148db565b6126f8565b61041661097c366004614965565b612722565b6104ad61098f366004614c48565b612730565b61041661276c565b6104ad6109aa366004614935565b6128ca565b6106b96109bd3660046148db565b6128e6565b6104166109d0366004614965565b6128f6565b6104166109e3366004614ca4565b612901565b6002546106b9906001600160a01b031681565b61043c610a09366004614965565b60126020526000908152604090205460ff1681565b6104ad610a2c366004614cd2565b61292c565b610416612976565b6104ad6129de565b610416610a4f3660046148db565b612a7f565b61041660165481565b610416610a6b3660046148db565b612ad1565b6104ad610a7e366004614965565b612adc565b6104ad610a91366004614cf4565b612b50565b6104ad610aa4366004614965565b612c51565b610416610ab73660046148db565b612ccf565b601354610416565b61041660105481565b6104ad610adb3660046148db565b612ced565b6104ad610aee366004614d12565b612d74565b6000601054601154610b059190614dac565b905090565b60006001600160e01b03198216637965db0b60e01b1480610b3b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060098054610b5090614dbf565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7c90614dbf565b8015610bc95780601f10610b9e57610100808354040283529160200191610bc9565b820191906000526020600020905b815481529060010190602001808311610bac57829003601f168201915b5050505050905090565b600080610bde610ec9565b90508015610bfe57610bf9610bf1610af3565b849083612e12565b610c00565b825b9392505050565b600033610c15818585612e31565b5060019392505050565b600080610c2a610ec9565b90508015610bfe57610bf981610c3e610af3565b859190612f4d565b336001600160a01b03821614610c6157610c61813384612f7b565b610c6c813084612fef565b336000908152600d6020526040812042815560018101805491928592610c93908490614dac565b9091555060009050610ca484610bd3565b905080826002018190555080600c6000828254610cc19190614dac565b90915550506040518481526001600160a01b0384169033907ff601bbafcf0d793cce0a8802057c8783aa5946889f76bd9dd47492217f59af1e9060200160405180910390a350505050565b6001546001600160a01b03163314610d3f5760405162461bcd60e51b8152600401610d3690614df9565b60405180910390fd5b6001600160a01b03811660009081526012602052604090205460ff16610d7857604051632df15a4160e11b815260040160405180910390fd5b6001600160a01b0381166000908152601260205260408120805460ff19169055601354905b81811015610de65760138181548110610db857610db8614e1d565b6000918252602090912001546001600160a01b03848116911614610de657610ddf81614e33565b9050610d9d565b6013610df3600184614e4c565b81548110610e0357610e03614e1d565b600091825260209091200154601380546001600160a01b039092169183908110610e2f57610e2f614e1d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506013805480610e6e57610e6e614e5f565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038516917fd3281a40d50ae838fe77dc627744037b8f0fc6a5711d66119a9b670c5cde41af91a2505050565b6000610b0560085490565b6001546001600160a01b03163314610efe5760405162461bcd60e51b8152600401610d3690614df9565b6001600160a01b03811660009081526012602052604090205460ff1615610f38576040516325a2934b60e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc49190614e75565b6001600160a01b031614610feb57604051632737e48360e11b815260040160405180910390fd5b6001600160a01b038116600081815260126020526040808220805460ff1916600190811790915560138054918201815583527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900180546001600160a01b03191684179055517f69887873d46778fb35539b0a9992d9176ca03c1820b0afb538bc3a6f63326b109190a250565b600033611085858285612f7b565b611090858585612fef565b506001949350505050565b60009081526020819052604090206001015490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b059190614e92565b60008051602061550783398151915261114c816131ab565b60145460008061115d600184614e4c565b90505b80156114275760006014828154811061117b5761117b614e1d565b6000918252602090912001546001600160a01b03169050808787848181106111a5576111a5614e1d565b90506020028101906111b79190614eb5565b6111c5906020810190614965565b6001600160a01b0316146111ec57604051631ed0662960e21b815260040160405180910390fd5b60006111f7826131b5565b9050601480548061120a5761120a614e5f565b60008281526020808220600019908401810180546001600160a01b03191690559092019092556001600160a01b0384168252600e81526040808320815160608082018452915461ffff8082168352620100008204811683870152600160201b90910460ff1615158285015283516080810185528781523095810195909552928401949094527f0000000000000000000000000000000000000000000000000000000000000000909116908201526112c69084908390600261320d565b6113936112d16117a0565b8a8a878181106112e3576112e3614e1d565b90506020028101906112f59190614eb5565b611306906080810190606001614965565b8b8b8881811061131857611318614e1d565b905060200281019061132a9190614eb5565b61133b9060a0810190608001614965565b6001600160a01b0387166000908152600e60205260409020548790879061ffff168f8f8c81811061136e5761136e614e1d565b90506020028101906113809190614eb5565b61138e9060a0810190614ed5565b6133b5565b6001600160a01b0383166000908152600e602090815260409182902054825161ffff7f000000000000000000000000000000000000000000000000000000000000000081168252909116918101919091529081018390527f8bdaf3de28c95336795fcfb09634aa6ee90e0ba358711340d92566bc6e3786269060600160405180910390a15092909201915060001901611160565b5061143381600061350f565b5050505050565b6114438261109b565b61144c816131ab565b6114568383613566565b505050565b6001546001600160a01b031633146114855760405162461bcd60e51b8152600401610d3690614df9565b6001600160a01b0382166000818152600e6020526040908190208054841515600160201b0260ff60201b19909116179055517f85e07ba75a2f56a1a2ca8551cdddfb8c998f5781c1c9ab6f8d4ae42101c0d7f1906114e890841515815260200190565b60405180910390a25050565b6001600160a01b03811633146115645760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610d36565b61156e82826135ea565b5050565b600033610c158185856115858383612901565b61158f9190614dac565b612e31565b6000806115a083611853565b9050610c0081610bd3565b6001546001600160a01b031633146115d55760405162461bcd60e51b8152600401610d3690614df9565b61ffff8381166000818152600f602090815260408083209487168084529482529182902080546001600160a01b0319166001600160a01b03871690811790915582519485529084015290917f0a24add6dc7dd296687ea41961d576aa7afe43986fac38191ce40bb4e7f2bf5b91015b60405180910390a2505050565b6000610b3b82610bd3565b61168060405180606001604052806000815260200160008152602001600081525090565b506001600160a01b03166000908152600d6020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290565b60006116cd83612ad1565b90506117046001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308661364f565b61170c610ec9565b60000361175157806103e8111561173657604051630131cd7b60e51b815260040160405180910390fd5b6117426103e882614e4c565b905061175160016103e86136a7565b61175b82826136a7565b816001600160a01b0316336001600160a01b0316600080516020615587833981519152858460405161178e929190614f1b565b60405180910390a3610b3b8382613774565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001546001600160a01b031633146117ee5760405162461bcd60e51b8152600401610d3690614df9565b6703782dace9d9000081111561181757604051635b94d8b160e01b815260040160405180910390fd5b60038190556040518181527f8b940a95968ad5b511f89b01075446a4fe9f614f2dc5fbb9e9a6b227d6d4fd70906020015b60405180910390a150565b6001600160a01b031660009081526006602052604090205490565b600080516020615507833981519152611886816131ab565b6015546000815b80156119da57600060156118a2600184614e4c565b815481106118b2576118b2614e1d565b6000918252602091829020604080516080810182526003939093029091018054835260018101546001600160a01b03908116948401949094526002015492831690820152600160a01b90910461ffff16606082015260158054919250908061191c5761191c614e5f565b6000828152602081206003600019909301928302018181556001810180546001600160a01b031916905560020180546001600160b01b03191690559155815161196490612ad1565b9050821580156119795750611977610ec9565b155b156119bc57806103e811156119a157604051630131cd7b60e51b815260040160405180910390fd5b6119ad6103e882614e4c565b90506119bc60016103e86136a7565b6119ca8260200151826136a7565b505191909101906000190161188d565b50600c546011546040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611a2d903090600401614ace565b602060405180830381865afa158015611a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6e9190614f29565b611a789190614e4c565b611a829190614e4c565b811115611aa2576040516337b481d960e01b815260040160405180910390fd5b611aad816000613774565b6040518181527f4f5745f9a8198fa6e603922d263d7e2a62c3ac2ea9791f1f4679e40bdad52edd906020015b60405180910390a1505050565b600080516020615507833981519152611afe816131ab565b8160005b81811015611433576000858583818110611b1e57611b1e614e1d565b905060600201803603810190611b349190615036565b60208101519091506000819003611b4c575050611d27565b81516001600160a01b03811660009081526012602052604090205460ff16611b8757604051632df15a4160e11b815260040160405180910390fd5b611b9282600061350f565b611c28816001600160a01b031663a8c62e766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf79190614e75565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084613786565b60408381015190516320e8c56560e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152600060448301526064820192909252908216906320e8c565906084016020604051808303816000875af1158015611cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccf9190614f29565b508160106000828254611ce29190614dac565b90915550506040517f46a80100e8cfe18c4729e50ad8704a292622bb8b711d9b6e915a1911f349206490611d1b90339084908690615052565b60405180910390a15050505b611d3081614e33565b9050611b02565b6002546001600160a01b03163314611d865760405162461bcd60e51b815260206004820152601260248201527127a7262cafa822a72224a723afa7aba722a960711b6044820152606401610d36565b600180546002546001600160a01b031982166001600160a01b039182161790925516611db36000826135ea565b611dcb600080516020615527833981519152826135ea565b611de3600080516020615507833981519152826135ea565b600154611dfb906000906001600160a01b0316613566565b600154611e2090600080516020615527833981519152906001600160a01b0316613566565b600154611e4590600080516020615507833981519152906001600160a01b0316613566565b6001546040517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0916118489184916001600160a01b031690615076565b6000611e8c610ec9565b90506000611e9933611853565b905080600003611ea7575050565b611eb133826137a5565b60008282601154611ec29190615090565b611ecc91906150af565b9050611ed981600061350f565b611f0d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383613786565b60135460005b8181101561143357600060138281548110611f3057611f30614e1d565b60009182526020822001546040516370a0823160e01b81526001600160a01b03909116925082906370a0823190611f6b903090600401614ace565b602060405180830381865afa158015611f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fac9190614f29565b9050600087611fbb8389615090565b611fc591906150af565b905080600003611fd757505050611fef565b611feb6001600160a01b0384163383613786565b5050505b611ff881614e33565b9050611f13565b60008061200a610ec9565b90508015610bfe57610bf98161201e61276c565b859190612e12565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061205a8361241a565b90506120916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461364f565b61209b82846136a7565b816001600160a01b0316336001600160a01b031660008051602061558783398151915283866040516120ce929190614f1b565b60405180910390a3610b3b8184613774565b6000806120ec336138e1565b60405163a9059cbb60e01b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061213f90869086906004016150d1565b6020604051808303816000875af115801561215e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218291906150ea565b50336001600160a01b0316836001600160a01b0316336001600160a01b031660008051602061554783398151915285856040516121c0929190614f1b565b60405180910390a450919050565b6060600a8054610b5090614dbf565b6000600e816121f26040860160208701614965565b6001600160a01b0316815260208082019290925260409081016000208151606081018352905461ffff80821683526201000082041693820193909352600160201b90920460ff1615801591830191909152909150806122695750805161ffff166122626080850160608601615107565b61ffff1614155b156122985761227e6040840160208501614965565b6040516368692cbb60e11b8152600401610d369190614ace565b60208181015161ffff9081166000908152600f835260408082207f00000000000000000000000000000000000000000000000000000000000000009093168252919092529020546001600160a01b0316331461230957336040516306e02ebd60e11b8152600401610d369190614ace565b61231382846139a9565b6123236080840160608501615107565b61ffff166123376040850160208601614965565b6001600160a01b03167f649c8deb433503a93e61cbf3bd7afd938e936ce85fcf81928ab240068c6643a5856000013585336040516123779392919061515c565b60405180910390a3505050565b600033816123928286612901565b9050838110156123f25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d36565b6110908286868403612e31565b600033610c15818585612fef565b6124178133610c46565b50565b600080612425610ec9565b90508015610bfe57610bf9612438610af3565b849083612f4d565b600060405163d623472560e01b815260040160405180910390fd5b60008061246783611853565b9050600061247482610bd3565b9050600061248183612ccf565b90508082116124905781612492565b805b95945050505050565b60006124a6836120e0565b949350505050565b6000610b05336120e0565b6000805160206155078339815191526124d1816131ab565b8160005b818110156114335760008585838181106124f1576124f1614e1d565b9050606002018036038101906125079190615036565b6020810151909150600081900361251f575050612668565b81516001600160a01b03811660009081526012602052604090205460ff1661255a57604051632df15a4160e11b815260040160405180910390fd5b604083810151905163f3f094a160e01b8152306004820152602481018490526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166044830152606482019290925260009183169063f3f094a1906084016020604051808303816000875af11580156125df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126039190614f29565b905080601060008282546126179190614e4c565b909155506126289050816000613774565b7f60e3ebbed9f935b37adbc6b7a8ad559873ced28247296a76a4d3b81a9e5eb19a33838360405161265b93929190615052565b60405180910390a1505050505b61267181614e33565b90506124d5565b60606013805480602002602001604051908101604052809291908181526020018280548015610bc957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116126b2575050505050905090565b6000806126e4610ec9565b90508015610bfe57610bf98161201e610af3565b6014818154811061270857600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610b3b61046f83611853565b6001546001600160a01b0316331461275a5760405162461bcd60e51b8152600401610d3690614df9565b61276684848484613a4a565b50505050565b601354600090815b8181101561282c5760006013828154811061279157612791614e1d565b600091825260209091200154604051633e64257560e01b81526001600160a01b0390911691508190633e642575906127cd903090600401614ace565b602060405180830381865afa1580156127ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280e9190614f29565b6128189085614dac565b9350508061282590614e33565b9050612774565b506040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612879903090600401614ace565b602060405180830381865afa158015612896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ba9190614f29565b6128c49083614dac565b91505090565b6128d38261109b565b6128dc816131ab565b61145683836135ea565b6013818154811061270857600080fd5b6000610b3b82611853565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205490565b600080516020615507833981519152612944816131ab565b600061294e613b91565b90506000601154826129609190614dac565b905061296d858286613c58565b61143382613c9d565b336000908152600d60205260408120600181015460028201548361299983610bd3565b9050818110156129ae57600094505050505090565b816129b98183614e4c565b6129cb90670de0b6b3a7640000615090565b6129d591906150af565b94505050505090565b336000908152600d60205260408120600181015460028201549192909190612a0583610bd3565b90506000846002018190555081600c6000828254612a239190614e4c565b909155505081811015612a3b57612766303385612fef565b600081612a488486615090565b612a5291906150af565b90506000612a608286614e4c565b9050612a6d303384612fef565b612a7730826137a5565b505050505050565b600080612a8a610ec9565b9050600083612a97610af3565b612aa19190614e4c565b905080600003612ab357509192915050565b8115612ac957612ac4848383612e12565b6124a6565b509192915050565b6000610b3b826126d9565b6001546001600160a01b03163314612b065760405162461bcd60e51b8152600401610d3690614df9565b600580546001600160a01b0319166001600160a01b0383169081179091556040517fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef390600090a250565b6001546001600160a01b03163314612b7a5760405162461bcd60e51b8152600401610d3690614df9565b6001600160a01b0382166000908152600e602090815260408083208151606081018352905461ffff80821680845262010000830490911694830194909452600160201b900460ff161515918101919091529103612bec5782604051634ae8435d60e01b8152600401610d369190614ace565b6001600160a01b0383166000818152600e6020908152604091829020805463ffff000019166201000061ffff88169081029190911790915591519182527f1f97e73f29802f056373306e9e3198b79119f446f1b9595d0752ebc2a9146f2e9101611644565b6001546001600160a01b03163314612c7b5760405162461bcd60e51b8152600401610d3690614df9565b600280546001600160a01b0319166001600160a01b038381169182179092556001546040517fb150023a879fd806e3599b6ca8ee3b60f0e360ab3846d128d67ebce1a391639a936118489392169190615076565b600080612cda610ec9565b90508015610bfe57610bf9610bf161276c565b6001546001600160a01b03163314612d175760405162461bcd60e51b8152600401610d3690614df9565b66b1a2bc2ec50000811115612d3f57604051635b94d8b160e01b815260040160405180910390fd5b60048190556040518181527fd87632b1c6ebfa21acbca0e3279b3cf6385a377cb8fda51e5b866baa6e6012ab90602001611848565b6001546001600160a01b03163314612d9e5760405162461bcd60e51b8152600401610d3690614df9565b612dde8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613e4792505050565b507fa9f1cb7eee5fc621e043c1ef431febb0f901998a6c0cbdf70147b0fe4d9f5a6a838383604051611ad993929190615189565b828202811515841585830485141716612e2a57600080fd5b0492915050565b6001600160a01b038316612e935760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d36565b6001600160a01b038216612ef45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d36565b6001600160a01b0383811660008181526007602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101612377565b828202811515841585830485141716612f6557600080fd5b6001826001830304018115150290509392505050565b6000612f878484612901565b905060001981146127665781811015612fe25760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610d36565b6127668484848403612e31565b6001600160a01b0383166130535760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d36565b6001600160a01b0382166130b55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d36565b6001600160a01b0383166000908152600660205260409020548181101561312d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d36565b6001600160a01b03808516600090815260066020526040808220858503905591851681529081208054849290613164908490614dac565b92505081905550826001600160a01b0316846001600160a01b03166000805160206155678339815191528460405161319e91815260200190565b60405180910390a3612766565b6124178133613e89565b6000806131c1836138e1565b90925090506131d030826137a5565b826001600160a01b0316836001600160a01b0316846001600160a01b031660008051602061554783398151915285856040516121c0929190614f1b565b6020808401805161ffff9081166000908152600f80855260408083207f0000000000000000000000000000000000000000000000000000000000000000851684528652808320549451841683529085528082208851909316825291909352909120546001600160a01b039182169116816132c25784602001517f00000000000000000000000000000000000000000000000000000000000000006040516328a4ac9160e11b8152600401610d369291906151c9565b6001600160a01b0381166132f257602085015185516040516328a4ac9160e11b8152610d369291906004016151c9565b8451604051630e510a7760e41b81526001600160a01b0384169163e510a770916133299188918b9187918a919033906004016151de565b600060405180830381600087803b15801561334357600080fd5b505af1158015613357573d6000803e3d6000fd5b50505050846000015161ffff16866001600160a01b03167ff3617f26552d0e4bd64927d1a7fe0d18f2278f99e2446ad6ac8f0a73c38840d8866000015186866040516133a59392919061515c565b60405180910390a3505050505050565b6000805160206155078339815191526133cd816131ab565b61341183838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508d91508a9050613eed565b60405163095ea7b360e01b81526001600160a01b038a169063095ea7b39061343f908b9089906004016150d1565b6020604051808303816000875af115801561345e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348291906150ea565b506000876001600160a01b0316848460405161349f929190615259565b6000604051808303816000865af19150503d80600081146134dc576040519150601f19603f3d011682016040523d82523d6000602084013e6134e1565b606091505b50509050806135035760405163e0fec00360e01b815260040160405180910390fd5b50505050505050505050565b81601154108061352d5750600c548260115461352b9190614e4c565b105b1561354b5760405163078cc1fb60e01b815260040160405180910390fd5b816011600082825461355d9190614e4c565b90915550505050565b6135708282612026565b61156e576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556135a63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6135f48282612026565b1561156e576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b612766846323b872dd60e01b85858560405160240161367093929190615052565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614004565b6001600160a01b0382166136fd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610d36565b806008600082825461370f9190614dac565b90915550506001600160a01b0382166000908152600660205260408120805483929061373c908490614dac565b90915550506040518181526001600160a01b038316906000906000805160206155678339815191529060200160405180910390a35050565b816011600082825461355d9190614dac565b6114568363a9059cbb60e01b84846040516024016136709291906150d1565b6001600160a01b0382166138055760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610d36565b6001600160a01b038216600090815260066020526040902054818110156138795760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610d36565b6001600160a01b03831660009081526006602052604081208383039055600880548492906138a8908490614e4c565b90915550506040518281526000906001600160a01b038516906000805160206155678339815191529060200160405180910390a3505050565b6001600160a01b0381166000908152600d602052604081206002810154829190820361392057604051631f2a200560e01b815260040160405180910390fd5b600b5481541061394357604051634a44555360e11b815260040160405180910390fd5b60018101546002820154909250600061395b84610bd3565b905081811061396a578161396c565b805b945081600c60008282546139809190614e4c565b909155506139909050858561350f565b600060028401556139a130856137a5565b505050915091565b60018260048111156139bd576139bd615124565b036139cb5761156e816140d6565b60048260048111156139df576139df615124565b036139ed5761156e81614117565b6002826004811115613a0157613a01615124565b03613a0f5761156e816141ef565b6003826004811115613a2357613a23615124565b03613a315761156e816142c0565b60405163d623472560e01b815260040160405180910390fd5b6001546001600160a01b03163314613a745760405162461bcd60e51b8152600401610d3690614df9565b6001600160a01b0384166000908152600e60209081526040918290208251606081018452905461ffff80821683526201000082041692820192909252600160201b90910460ff161580159282019290925290613ae357604051630cb3e97f60e31b815260040160405180910390fd5b6040805160608101825261ffff86811680835286821660208085019182528715158587019081526001600160a01b038c166000818152600e845288902096518754945192511515600160201b0260ff60201b19938816620100000263ffffffff199096169190971617939093171693909317909355925192835290917fdfdecea9ea3fba2ae2104af96f9be11589a507814dfd462dadc83c581da372b0910160405180910390a25050505050565b601354600090815b81811015613c5357600060138281548110613bb657613bb6614e1d565b600091825260209091200154604051631132ffbf60e11b81526001600160a01b0390911691508190632265ff7e90613bf2903090600401614ace565b6020604051808303816000875af1158015613c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c359190614f29565b613c3f9085614dac565b93505080613c4c90614e33565b9050613b99565b505090565b6000828411613c7057613c6b8484614e4c565b613c7a565b613c7a8385614e4c565b90508181111561276657604051638199f5f360e01b815260040160405180910390fd5b600c546011541015613cc25760405163078cc1fb60e01b815260040160405180910390fd5b60006010548211613cd4576000613ce1565b601054613ce19083614e4c565b6011549091504290600090613cf69085614dac565b6010859055905060008315613d2b57670de0b6b3a764000060035485613d1c9190615090565b613d2691906150af565b613d2e565b60005b90506000600454600014613d89576301e13380670de0b6b3a7640000600b5486613d589190614e4c565b85600454613d669190615090565b613d709190615090565b613d7a91906150af565b613d8491906150af565b613d8c565b60005b90506000613d9a8284614dac565b905060008115613dda57613dc1613daf610ec9565b613db98488614e4c565b849190612e12565b600554909150613dda906001600160a01b0316826136a7565b600554604080518981526020810187905290810185905260608101839052608081018790526001600160a01b03909116907feaedd1267621f4a8ee97011faf0e67800ad3063714bd179f078c980bb9a3fa3d9060a00160405180910390a2505050600b9290925550505050565b6060610c0083836040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564000081525061437b565b613e938282612026565b61156e57613eab816001600160a01b0316601461438a565b613eb683602061438a565b604051602001613ec7929190615269565b60408051601f198184030181529082905262461bcd60e51b8252610d36916004016148a8565b613ef56147d4565b613efe85614525565b905083816020015114613f455760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a590818da185a5b9259608a1b6044820152606401610d36565b816001600160a01b031681600001516001600160a01b031614613fa55760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964207265636569766572206164647265737360401b6044820152606401610d36565b826001600160a01b03168160800151604001516001600160a01b0316146114335760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b21034b7383aba103a37b5b2b760691b6044820152606401610d36565b6000614059826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661437b9092919063ffffffff16565b805190915015611456578080602001905181019061407791906150ea565b6114565760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d36565b6015805460018101825560009190915281906003027f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750161145682826152f8565b600061412c6105e76040840160208501614965565b90506000600e816141436040860160208701614965565b6001600160a01b0316815260208082019290925260409081016000208151606081018352905461ffff80821683526201000082041682850152600160201b900460ff161515818301529250611456916141a0918601908601614965565b6040805160808101825285815230602082015260009181019190915261ffff7f00000000000000000000000000000000000000000000000000000000000000001660608201528390600461320d565b600d60006142036040840160208501614965565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201546000036142735760146142406040830160208401614965565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790555b60006142886107026040840160208501614965565b90506000670de0b6b3a76400006142a0838535615090565b6142aa91906150af565b9050611456816104a86040860160208701614965565b6000670de0b6b3a76400006142de6107026040850160208601614965565b6142e9908435615090565b6142f391906150af565b905061431e6143086040840160208501614965565b6143186060850160408601614965565b83612fef565b7ff24ef89f38eadc1bde50701ad6e4d6d11a2dc24f7cf834a486991f388332850461434f6040840160208501614965565b61435f6060850160408601614965565b8360405161436f93929190615052565b60405180910390a15050565b60606124a6848460008561455d565b60606000614399836002615090565b6143a4906002614dac565b6001600160401b038111156143bb576143bb614f42565b6040519080825280601f01601f1916602001820160405280156143e5576020820181803683370190505b509050600360fc1b8160008151811061440057614400614e1d565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061442f5761442f614e1d565b60200101906001600160f81b031916908160001a9053506000614453846002615090565b61445e906001614dac565b90505b60018111156144d6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061449257614492614e1d565b1a60f81b8282815181106144a8576144a8614e1d565b60200101906001600160f81b031916908160001a90535060049490941c936144cf81615361565b9050614461565b508315610c005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610d36565b61452d6147d4565b60006145478360048086516145429190614e4c565b61468e565b905080806020019051810190610c00919061543b565b6060824710156145be5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610d36565b6001600160a01b0385163b6146155760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d36565b600080866001600160a01b0316858760405161463191906154f4565b60006040518083038185875af1925050503d806000811461466e576040519150601f19603f3d011682016040523d82523d6000602084013e614673565b606091505b509150915061468382828661479b565b979650505050505050565b60608161469c81601f614dac565b10156146db5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610d36565b6146e58284614dac565b845110156147295760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610d36565b6060821580156147485760405191506000825260208201604052614792565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015614781578051835260209283019201614769565b5050858452601f01601f1916604052505b50949350505050565b606083156147aa575081610c00565b8251156147ba5782518084602001fd5b8160405162461bcd60e51b8152600401610d3691906148a8565b6040518060a0016040528060006001600160a01b0316815260200160008152602001600081526020016148316040518060800160405280600081526020016000815260200160006001600160a01b03168152602001606081525090565b815260408051608081018252600080825260208281018290529282015260608082015291015290565b60006020828403121561486c57600080fd5b81356001600160e01b031981168114610c0057600080fd5b60005b8381101561489f578181015183820152602001614887565b50506000910152565b60208152600082518060208401526148c7816040850160208701614884565b601f01601f19169190910160400192915050565b6000602082840312156148ed57600080fd5b5035919050565b6001600160a01b038116811461241757600080fd5b6000806040838503121561491c57600080fd5b8235614927816148f4565b946020939093013593505050565b6000806040838503121561494857600080fd5b82359150602083013561495a816148f4565b809150509250929050565b60006020828403121561497757600080fd5b8135610c00816148f4565b60008060006060848603121561499757600080fd5b83356149a2816148f4565b925060208401356149b2816148f4565b929592945050506040919091013590565b600080602083850312156149d657600080fd5b82356001600160401b03808211156149ed57600080fd5b818501915085601f830112614a0157600080fd5b813581811115614a1057600080fd5b8660208260051b8501011115614a2557600080fd5b60209290920196919550909350505050565b801515811461241757600080fd5b60008060408385031215614a5857600080fd5b8235614a63816148f4565b9150602083013561495a81614a37565b61ffff8116811461241757600080fd5b600080600060608486031215614a9857600080fd5b8335614aa381614a73565b92506020840135614ab381614a73565b91506040840135614ac3816148f4565b809150509250925092565b6001600160a01b0391909116815260200190565b60008083601f840112614af457600080fd5b5081356001600160401b03811115614b0b57600080fd5b602083019150836020606083028501011115614b2657600080fd5b9250929050565b60008060208385031215614b4057600080fd5b82356001600160401b03811115614b5657600080fd5b614b6285828601614ae2565b90969095509350505050565b60008082840360a0811215614b8257600080fd5b6080811215614b9057600080fd5b5082915060808301356005811061495a57600080fd5b60008060408385031215614bb957600080fd5b8235614bc481614a73565b9150602083013561495a81614a73565b600080600060608486031215614be957600080fd5b833592506020840135614ab3816148f4565b6020808252825182820181905260009190848201906040850190845b81811015614c3c5783516001600160a01b031683529284019291840191600101614c17565b50909695505050505050565b60008060008060808587031215614c5e57600080fd5b8435614c69816148f4565b93506020850135614c7981614a73565b92506040850135614c8981614a73565b91506060850135614c9981614a37565b939692955090935050565b60008060408385031215614cb757600080fd5b8235614cc2816148f4565b9150602083013561495a816148f4565b60008060408385031215614ce557600080fd5b50508035926020909101359150565b60008060408385031215614d0757600080fd5b8235614bc4816148f4565b600080600060408486031215614d2757600080fd5b8335614d32816148f4565b925060208401356001600160401b0380821115614d4e57600080fd5b818601915086601f830112614d6257600080fd5b813581811115614d7157600080fd5b876020828501011115614d8357600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b3b57610b3b614d96565b600181811c90821680614dd357607f821691505b602082108103614df357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060018201614e4557614e45614d96565b5060010190565b81810381811115610b3b57610b3b614d96565b634e487b7160e01b600052603160045260246000fd5b600060208284031215614e8757600080fd5b8151610c00816148f4565b600060208284031215614ea457600080fd5b815160ff81168114610c0057600080fd5b6000823560be19833603018112614ecb57600080fd5b9190910192915050565b6000808335601e19843603018112614eec57600080fd5b8301803591506001600160401b03821115614f0657600080fd5b602001915036819003821315614b2657600080fd5b918252602082015260400190565b600060208284031215614f3b57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715614f7a57614f7a614f42565b60405290565b60405160a081016001600160401b0381118282101715614f7a57614f7a614f42565b604051601f8201601f191681016001600160401b0381118282101715614fca57614fca614f42565b604052919050565b600060608284031215614fe457600080fd5b604051606081016001600160401b038111828210171561500657615006614f42565b6040529050808235615017816148f4565b8082525060208301356020820152604083013560408201525092915050565b60006060828403121561504857600080fd5b610c008383614fd2565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b60008160001904831182151516156150aa576150aa614d96565b500290565b6000826150cc57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b6000602082840312156150fc57600080fd5b8151610c0081614a37565b60006020828403121561511957600080fd5b8135610c0081614a73565b634e487b7160e01b600052602160045260246000fd5b6005811061515857634e487b7160e01b600052602160045260246000fd5b9052565b83815260608101615170602083018561513a565b6001600160a01b03929092166040919091015292915050565b6001600160a01b03841681526040602082018190528101829052818360608301376000818301606090810191909152601f909201601f1916010192915050565b61ffff92831681529116602082015260400190565b60006101208201905087518252602088015160018060a01b0380821660208501528060408b015116604085015260608a0151915061ffff8083166060860152818a16608086015281891660a086015261523a60c086018961513a565b80871660e0860152508085166101008501525050979650505050505050565b8183823760009101908152919050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526000835161529b816017850160208801614884565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516152cc816028840160208801614884565b01602801949350505050565b80546001600160a01b0319166001600160a01b0392909216919091179055565b81358155602082013561530a816148f4565b61531781600184016152d8565b5060028101604083013561532a816148f4565b61533481836152d8565b50606083013561534381614a73565b815461ffff60a01b191660a09190911b61ffff60a01b161790555050565b60008161537057615370614d96565b506000190190565b60006080828403121561538a57600080fd5b615392614f58565b9050815181526020808301518183015260408301516153b0816148f4565b604083015260608301516001600160401b03808211156153cf57600080fd5b818501915085601f8301126153e357600080fd5b8151818111156153f5576153f5614f42565b615407601f8201601f19168501614fa2565b9150808252868482850101111561541d57600080fd5b61542c81858401868601614884565b50606084015250909392505050565b60006020828403121561544d57600080fd5b81516001600160401b038082111561546457600080fd5b9083019060a0828603121561547857600080fd5b615480614f80565b825161548b816148f4565b8082525060208301516020820152604083015160408201526060830151828111156154b557600080fd5b6154c187828601615378565b6060830152506080830151828111156154d957600080fd5b6154e587828601615378565b60808301525095945050505050565b60008251614ecb81846020870161488456feaf290d8680820aad922855f39b306097b20e28774d6c1ad35a20325630c3a02c8b5b16d04624687fcf0d0228f19993c9157c1ed07b41d8d430fd9100eb099fe8fbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8dbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7a2646970667358221220a2d91bc73eeee3831833e5c1ddef5832abd2d8e71421704795c9fc3a855cb51164736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Accept transfer of ownership of the contract. Can only be called by the pendingOwner."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "estimateUnderlyingBalance(address)": {
        "details": "returns accurate value used to estimate current value"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "redeem()": {
        "details": "safest UI method"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setManagementFee(uint256)": {
        "params": {
          "_managementFee": "The new performance fee."
        }
      },
      "setPerformanceFee(uint256)": {
        "params": {
          "_performanceFee": "The new performance fee."
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "New treasury address."
        }
      },
      "sharesToUnderlying(uint256)": {
        "details": "current exchange rate (different from previewDeposit rate) this should be used for estiamtes of withdrawals"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Init transfer of ownership of the contract to a new account (`_pendingOwner`).",
        "params": {
          "_pendingOwner": "pending owner of contract Can only be called by the current owner."
        }
      },
      "underlyingBalance(address)": {
        "details": "returns a cached value used for withdrawals"
      },
      "underlyingToShares(uint256)": {
        "details": "current exchange rate (different from previewDeposit / previewWithdrawal rate) this should be used estimate of deposit fee"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "SetManagementFee(uint256)": {
        "notice": "Emitted when management fee is updated."
      },
      "SetPerformanceFee(uint256)": {
        "notice": "Emitted when performance fee is updated."
      }
    },
    "kind": "user",
    "methods": {
      "GUARDIAN()": {
        "notice": "Update vault params, perform time-sensitive operations, set manager"
      },
      "MANAGER()": {
        "notice": "Hot-wallet bots that route funds between vaults, rebalance and harvest strategies"
      },
      "depositIntoStrategies((address,uint256,uint256)[])": {
        "notice": "this can be done in parts in case gas limit is reached"
      },
      "emergencyAction(address,bytes)": {
        "notice": "this method allows an arbitrary method to be called by the owner in case of emergency owner must be a timelock contract in order to allow users to redeem funds in case they suspect this action to be malicious"
      },
      "getPenalty()": {
        "notice": "UI method to view cancellation penalty"
      },
      "getTvl()": {
        "notice": "returns expected tvl (used for estimate)"
      },
      "harvest(uint256,uint256)": {
        "notice": "We compute expected tvl off-chain first, to ensure this transactions isn't sandwitched"
      },
      "managementFee()": {
        "notice": "Annual management fee."
      },
      "owner()": {
        "notice": "Add and remove vaults and strategies and other critical operations behind timelock Default admin role There should only be one owner, so it is not a role"
      },
      "performanceFee()": {
        "notice": "The percentage of profit recognized each harvest to reserve as fees."
      },
      "redeemIsReady(address)": {
        "notice": "UTILS"
      },
      "setManagementFee(uint256)": {
        "notice": "Sets a new performanceFee."
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets a new performanceFee."
      },
      "setTreasury(address)": {
        "notice": "Updates treasury."
      },
      "treasury()": {
        "notice": "address where all fees are sent to"
      },
      "withdrawFromStrategies((address,uint256,uint256)[])": {
        "notice": "this can be done in parts in case gas limit is reached"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1634,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1629_storage)"
      },
      {
        "astId": 15515,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15517,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15859,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15862,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "managementFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 15865,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2171,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2177,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2179,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2181,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "_name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 2183,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 28890,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "lastHarvestTimestamp",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 28892,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "pendingWithdraw",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 28897,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "withdrawLedger",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(WithdrawRecord)28874_storage)"
      },
      {
        "astId": 16181,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "addrBook",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(Vault)16940_storage)"
      },
      {
        "astId": 16187,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "postmanAddr",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_address))"
      },
      {
        "astId": 30560,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "totalChildHoldings",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 30562,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "floatAmnt",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 31750,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "strategyExists",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_contract(ISCYStrategy)18745,t_bool)"
      },
      {
        "astId": 31753,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "strategyIndex",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 31756,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "bridgeQueue",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 31760,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "depositQueue",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_struct(Message)16933_storage)dyn_storage"
      },
      {
        "astId": 31762,
        "contract": "src/vaults/SectorVault.sol:SectorVault",
        "label": "totalStrategyHoldings",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Message)16933_storage)dyn_storage": {
        "base": "t_struct(Message)16933_storage",
        "encoding": "dynamic_array",
        "label": "struct Message[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISCYStrategy)18745": {
        "encoding": "inplace",
        "label": "contract ISCYStrategy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Vault)16940_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault)",
        "numberOfBytes": "32",
        "value": "t_struct(Vault)16940_storage"
      },
      "t_mapping(t_address,t_struct(WithdrawRecord)28874_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WithdrawRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(WithdrawRecord)28874_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1629_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1629_storage"
      },
      "t_mapping(t_contract(ISCYStrategy)18745,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(ISCYStrategy)18745",
        "label": "mapping(contract ISCYStrategy => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_address))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_address)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Message)16933_storage": {
        "encoding": "inplace",
        "label": "struct Message",
        "members": [
          {
            "astId": 16926,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16928,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "sender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16930,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "client",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16932,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "chainId",
            "offset": 20,
            "slot": "2",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)1629_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1626,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1628,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Vault)16940_storage": {
        "encoding": "inplace",
        "label": "struct Vault",
        "members": [
          {
            "astId": 16935,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "chainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16937,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "postmanId",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16939,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "allowed",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(WithdrawRecord)28874_storage": {
        "encoding": "inplace",
        "label": "struct WithdrawRecord",
        "members": [
          {
            "astId": 28869,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 28871,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 28873,
            "contract": "src/vaults/SectorVault.sol:SectorVault",
            "label": "value",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}